<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://blog.inferis.org/</id>
  <title>Inferical Writings</title>
  <updated>2015-11-01T20:10:36Z</updated>
  <link rel="alternate" href="http://blog.inferis.org/"/>
  <link rel="self" href="http://blog.inferis.org/feed.atom"/>
  <author>
    <name>Tom Adriaenssen</name>
    <uri>http://inferis.org</uri>
  </author>
  <entry>
    <id>tag:blog.inferis.org,2015-11-01:/blog/2015/11/01/no-sfo-to-fra-for-you/</id>
    <title type="html">‚õîÔ∏è SFO ‚úàÔ∏è FRA</title>
    <published>2015-11-01T20:10:36Z</published>
    <updated>2015-11-01T20:10:36Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/11/01/no-sfo-to-fra-for-you/"/>
    <content type="html">

&lt;p&gt;One more blogpost written on American soil. The flight home yesterday didn't work out exactly as planned, one could say.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;I managed to arrive quite on time at the airport on Saturday. Since my idiotic stint at &lt;a href="http://www.aena.es/csee/Satellite/Aeropuerto-Madrid-Barajas/en/Page/1049727006353/"&gt;MAD&lt;/a&gt; last year after NSSpain, I've been extra careful to be on time. I'd rather now spend some expected time waiting than to miss a flight and having to do more unexpected waiting (and pay extra, too).&lt;/p&gt;

&lt;p&gt;I'm flying Lufthansa but the flight back is a code share by United Airlines. I flew in on an actual Lufthansa flight and as far as all the clich√©s on Germans go: it was perfectly on time and everything was so well taken care of it kinda hurt (it actually didn't of course, but you can catch my drift, surely).&lt;/p&gt;

&lt;p&gt;Back to Saturday: checking in my baggage at the United desks was a breeze. Even though my luggage seemed to be twice as heavy as it was coming in (thanks to Amazon Prime, I guess), there was no problem at all and before I knew it I was waiting for a security check. &lt;/p&gt;

&lt;p&gt;Again, that was not a problem. There was a small wait, and I had no problems at all passing security even though I was carrying a fair number of laptops and Apple devices. The epic near "just walk through security" last year after my interviews at Apple (resulting in a 2+ hour wait in the terminal) was not repeated, unfortunately.&lt;/p&gt;

&lt;p&gt;Boarding was no problem either (don't you love being in Boarding Group 1), but then the wait started. We were going past our scheduled take-off time. Now to be fair, I think I have never seen an airplane take off on the actual scheduled time (even the German one last month), so wasn't really worried. I had put on &lt;a href="http://www.audible.com/pd/Sci-Fi-Fantasy/Ready-Player-One-Audiobook/B005FRGT44"&gt;Ready Player One&lt;/a&gt; (excellently read by Wil Wheaton) and started to relax for the flight, when a communication from the captain broke:&lt;/p&gt;

&lt;div class="embed tweet"&gt;
&lt;blockquote class="twitter-tweet"&gt;
&lt;p lang="en" dir="ltr"&gt;‚ÄúA maintenance issue‚Äù. What.&lt;/p&gt;‚Äî Tom Adriaenssen (@Inferis) &lt;a href="https://twitter.com/Inferis/status/660574712028770304"&gt;October 31, 2015&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;When you hear things like this when sitting in an airplane, even though you're still standing on the ground, you know shit is going to hit the fan.&lt;/p&gt;

&lt;p&gt;And yes, about forty-five minutes later (I fell asleep in the meanwhile it seems, Wil's soothing voice certainly helped):&lt;/p&gt;

&lt;div class="embed tweet"&gt;
&lt;blockquote class="twitter-tweet"&gt;
&lt;p lang="en" dir="ltr"&gt;And then my flight got delayed for about 2 and half hours.&lt;/p&gt;‚Äî Tom Adriaenssen (@Inferis) &lt;a href="https://twitter.com/Inferis/status/660590020726657024"&gt;October 31, 2015&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;So we got off the plane, waited some more and then chaotically boarded another plane a few hours later:&lt;/p&gt;

&lt;div class="embed tweet"&gt;
&lt;blockquote class="twitter-tweet"&gt;
&lt;p lang="en" dir="ltr"&gt;Boarded again, but I‚Äôm on another plane now. *fingers crossed*&lt;/p&gt;‚Äî Tom Adriaenssen (@Inferis) &lt;a href="https://twitter.com/Inferis/status/660611152959836160"&gt;November 1, 2015&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;The chances of my baggage winding up with me, at the same time, on the same airport had drastically dropped by then I felt, but I'd worry about that later. Boarding again was kinda funny, seeing familiar faces around you (since we had the exact same seats as before). Anyhow, I got settled again and waited for the airplane to start taxiing.&lt;/p&gt;

&lt;p&gt;But nope:&lt;/p&gt;

&lt;div class="embed tweet"&gt;
&lt;blockquote class="twitter-tweet"&gt;
&lt;p lang="en" dir="ltr"&gt;And now they need another crew because they only can work for 16h in one run. 

So much fun. üòû&lt;/p&gt;‚Äî Tom Adriaenssen (@Inferis) &lt;a href="https://twitter.com/Inferis/status/660619698929733632"&gt;November 1, 2015&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;Apparently the crews can only work for 16 hours in one stretch, which is an admirably large number to be fair. But given the time they needed to prepare the airplane, our delay and then the flight home we'd be royally over those 16 hours. It seems United had some problems finding a replacement crew so the flight was delayed by some 1400 minutes until the next day (with the same crew, I assume). &lt;/p&gt;

&lt;p&gt;And so they threw us back out of the secured zone to wait in line at the check-in desks for "rebooking" and accomodations for the night. That took a while, and it was all pretty orderly. The people helping us were very polite and helpful, no complaints there. It never pays of to be angry or arrogant in cases like this: the people helping you did not have a direct doing in the problem at hand. And in this case it was just a bad circumstance of a technical problem and regulations. That happens, I guess.&lt;/p&gt;

&lt;p&gt;I must say I was pretty pissed off at this moment though. My mental state had finally set itself on getting back to Belgium and seeing my wife and kids a few hours later, and so this delay came as a very large disappointment.&lt;/p&gt;

&lt;p&gt;Anyhow, I finally managed to get out of the airport by 8:30pm, spending almost 8 hours in there. I was in good care all of the time, so no real complaining -- there are people having it a lot worse. United set me up in the Embassy Suites SFO hotel nearby: a quick shuttle trip, a check in and half an hour later I could crash on my bed. I also got some meal vouchers so I gratefully exchanged them for a nice meal at the restaurant: I hadn't had a decent meal since breakfast. &lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="https://scontent-yyz1-1.cdninstagram.com/hphotos-xfa1/t51.2885-15/e35/11379997_1697344767179510_349813073_n.jpg" width="500"&gt;&lt;/p&gt;

&lt;p&gt;The hotel had a full size palmtree instead. üá∫üá∏&lt;/p&gt;

&lt;p&gt;I slept like a baby, gaining an hour in the process (DST!), and woke up pretty refreshed. Had breakfast, spent the morning at the hotel writing this blogpost and working a bit, since I had a feeling that without some settling-in time, I wasn't going to do much of the planned work on Monday anyway. And I had to wait out the time until my flight, so I might as well be productive.&lt;/p&gt;

&lt;p&gt;During a quick Facetime call with my wife I found out my kids weren't as bummed about my delay as I had expected, although my wife framing it like "Dad's going to be a day later: this is not fun, but it's better than him not making it at all." might have had something to do with it. Which I guess &lt;strong&gt;is&lt;/strong&gt; fair: a faulty braking system is no fun when landing, I presume.&lt;/p&gt;

&lt;p&gt;I then took the shuttle back to the airport, got through security without much problems: I even earned the Swarm mayorship (which was quite unexpected, to be sure):&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="https://scontent-sjc2-1.cdninstagram.com/hphotos-xaf1/t51.2885-15/e35/11374421_1477363422570708_811979022_n.jpg" width="500"&gt;&lt;/p&gt;

&lt;p&gt;And now I'm in a lounge, waiting for my plane from yesterday to take off today. My connecting flight in Frankfurt is long gone, and I have to rebook that one when I get there. So the journey's not over, but let's hope I actually make it to the other side of the ocean this time.&lt;/p&gt;

&lt;p&gt;Remember: traveling is never boring, people. Except for the "waiting" parts, perhaps.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-10-30:/blog/2015/10/30/murica-bye-bye-cry-emoji/</id>
    <title type="html">Murica... üëã! üò¢</title>
    <published>2015-10-31T01:22:02Z</published>
    <updated>2015-10-31T01:22:02Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/10/30/murica-bye-bye-cry-emoji/"/>
    <content type="html">

&lt;p&gt;One month in California: completed. And a crazy month, it has been. &lt;/p&gt;

&lt;p&gt;I started my new job at Apple, and while learned an impressive pile of new things, it feels like I don't know anything at all yet. I have immensely enjoyed working with the people at UIKit: it been a welcoming and fun environment, filled with smart and hard-working people. I can truly say I'm going to miss these folks when I get back to Belgium to continue my work there. I know I'm lucky to be living in this day and age where technology allows us to communicate so easily with each other, and technology will do it's best do make this remote adventure work. But it's more than the work... I'm going to miss the social part of working here: the hallway talks, the early morning breakfasts at Caff√© Macs, the lunches with some of the team on our balcony, the lets-get-coffee-in-the-lobby trips. Those are not really part of work, but they really are (you see what I did there, right). I will get by without them, but I'm quite sure I'll miss those moments a lot. &lt;/p&gt;

&lt;p&gt;On the other hand, I've missed my wife and kids immensely, so I can't wait to get back home to see, hear and feel them again. Again, FaceTime was a big boon in this case: when one of us felt the need to talk to the person on the other side of the ocean, a call was arranged quickly. I loved those moments, irregardless of their length. They always made me happy and gave me a boost to continue.&lt;/p&gt;

&lt;p&gt;So yeah, these last few days I've been stuck with double emotions: I'm pretty sad that I have to leave this great workplace, and I'm pretty happy to go home. &lt;/p&gt;

&lt;p&gt;But hey, "I'll be back"! &lt;/p&gt;

&lt;p&gt;The last few weeks have been very different from the first two weeks. While the first were clearly about adaption and fitting in, these last 2 weeks felt more about making the best of my time here. I explored more, and felt more relaxed than I had been in the weeks before. Also, no more jetlag leftovers. All gone, baby.&lt;/p&gt;

&lt;p&gt;&lt;img class="fullwidth" src="http://c.inferis.org/image/3Y1Q151U2J1R/ocean.jpg"&gt;&lt;/p&gt;

&lt;p&gt;Last weekend was the full last weekend I'd be here, so I took full use of the time I had. On Saturday, I spent the afternoon driving around Highway 1 along the Pacific Ocean. I drove from Santa Cruz to Half Moon Bay. I loved it. So quite, such nice views. I don't like do drive around, but this was a very relaxing trip, and it was a great opportunity for some nice pictures.&lt;/p&gt;

&lt;p&gt;&lt;img class="fullwidth" src="https://c1.staticflickr.com/1/740/22625580001_b2c7e3860a_c.jpg"&gt;&lt;/p&gt;

&lt;p&gt;On Sunday I had arranged to meet up with Matthias and a colleague of him at Showpad to visit Alcatraz. I never made there it before during my trips to SF, but now seemed like a good moment. The weather was particularly good (given that we were past halfway through October), even at the island itself (which is apparently not that common). The whole visit was a bit too touristy for my taste. For example, there's an audio tour you can do which was fine in itself I guess but I would have preferred something else I feel. It felt too "well groomed". &lt;/p&gt;

&lt;p&gt;We did have a bit of luck though: our group of 3 got a chance to visit the leftovers of the old Alcatraz citadel below the current prison building. Apparently the whole first floor of the citadel is still present underneath the prison, and I can be visited by small groups of 10. These visits are official, but kinda random: nothing really organized or scheduled. You just need some luck. I have to say: I loved that part. It's so crazy that everything is still down there in pretty good conditions. A place with quite a history, and you feel it. &lt;/p&gt;

&lt;p&gt;&lt;img class="fullwidth" src="https://c2.staticflickr.com/6/5834/22631675121_705e653cd1_c.jpg"&gt;&lt;/p&gt;

&lt;p&gt;And for the rest: I think I could get used living here (imagine that!). Americans still can't drive, but I learned how to adapt to that. I stopped eating junkfood (although the last few days are worse again since I don't want to throw away all the leftovers in my fridge). I slept a lot better by turning on the airco for a hour or 2 when going to bed; I guess the slightly cooler temperatures at night help a lot too. I actually had trouble getting in early in a few times, but I mostly made it more than early enough (finding a parking spot is a bitch otherwise). It takes a while to get used to the "fuck it, just do this" attidute most Americans seem to have here, but once you get the hang of it, it's cool. I'm going to miss paying for stuff by holding my Watch to a terminal. I'm going to need some getting used to driving manual again. I'm looking forward to be able to take my bike to go shopping (although that's technically a problem due to the length of my stay here, and not the place I am).&lt;/p&gt;

&lt;p&gt;&lt;img class="fullwidth" src="https://c2.staticflickr.com/6/5719/22432600420_8abde58cf8_c.jpg"&gt;&lt;/p&gt;

&lt;p&gt;So yeah, that's it. It's been good, but it's time for the next step. &lt;/p&gt;

&lt;p&gt;And before I go: a &lt;em&gt;big&lt;/em&gt;, &lt;em&gt;big&lt;/em&gt; shoutout to &lt;a href="http://twitter.com/steve_breen"&gt;Steve Breen&lt;/a&gt;: this guy has been so incredibly supportive for me in the last month, I'm sure this whole ordeal would have been a lot more tough without him. I owe you one, buddy! &lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-10-18:/blog/2015/10/18/murica-2/</id>
    <title type="html">Murica, 2</title>
    <published>2015-10-19T00:54:47Z</published>
    <updated>2015-10-19T00:54:47Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/10/18/murica-2/"/>
    <content type="html">

&lt;p&gt;A second week of living in the United States. Two weeks already, time flies when you're having fun. &lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2&gt;üçé&lt;/h2&gt;

&lt;p&gt;I've been working pretty hard during the week, even though it's a relatively quiet period. But there's so much to learn and I want to make the most out of the precious time I can spend here with the team, so I don't mind. And there's literally nobody to come home to, so it really doesn't matter if I come in early and leave late. On the contrary: at work I get to interact with people, when being alone in my apartment I felt kinda lonely this week. Even though I'm Facetiming with my family almost every day, I do have to admit I miss them. This is not so much a problem during the week but it hits home (hah!) harder during the weekends. &lt;/p&gt;

&lt;h2&gt;üöó&lt;/h2&gt;

&lt;p&gt;I'm slowly getting used to the US. Things feel less strange than 2 weeks ago, for sure. Additionally: I'm no longer sure that Americans are disciplined drivers: it feels more like they don't know how to drive and make up for it by doing everything slower, or at least appearing to be more calculated in traffic. I've had 2 near accidents because of idiots doing crazy maneuvers without any signal at all. &lt;/p&gt;

&lt;p&gt;The thing that gets me the most at the moment is that you almost have no other choice (here in the suburbs at least) but to do everything by car. I surely miss my daily bike rides, to be honest. I tried walking to grab some food yesterday: there's a lot of places nearby, but it still was a 15 to 20 minute walk there (and then back again). And you don't see a lot of pedestrians anyway. Like I said, I'm pretty close to the commercial zone around El Camino Real, so I can imagine living deeper in the suburbs, there's really no other option but to take the car. On the flip side: gas prices are a lot cheaper here than in Europe, obviously. I paid less than half the price for gas as I would have paid for in Belgium. Crazy. &lt;/p&gt;

&lt;p&gt;&lt;img class="fullwidth" src="http://c.inferis.org/image/0m2W0f3i1R1h/Image.jpg"&gt;&lt;/p&gt;

&lt;p&gt;Driving around the Bay Area, it feels like a strange place though: knowing the state of housing in the area, it's so weird to see all those one story houses block after block. You can see alternative housing types popping up, more creative housing types to be sure, so I guess it is slowly changing. Going for something less suburban (for example, terraced housing) seems like a good way out of the high prices (I for one would prefer a small terraced house over an apartment, for example). All the "bungalow" style houses here really feel like a waste of space.  &lt;/p&gt;

&lt;h2&gt;üëú, üíµ &amp;amp; üí≥&lt;/h2&gt;

&lt;p&gt;One of the things I love here is that stores are open at the craziest hours, compared to Belgium. You can go shopping until late in the evening. The nearby Safeway on &lt;em&gt;El Camino Real&lt;/em&gt; is open 24/24: this is something unseen where I live. Additionally, weekends are just barely different from weekdays regarding stores and services. I had to call support for my bank to get Apple Pay verified on my Watch last Sunday, and that was no problem at all. On the contrary: I got helped faster than a few days before when verifying Apple Pay on my iPhone. Again: this is something impossible in Belgium. Banks are open from 9am to about 4pm usually, sometimes later. Weekends? Forget it. &lt;/p&gt;

&lt;p&gt;Speaking about money: it is fascinating how -- how should I put it -- old fashioned the payment system here in the US is. And by that I mean that most transactions work by swiping your credit card. Sometimes that's just all you need, sometimes you need and extra signature. Convenient, but it feels so unsecure. When paying in a restaurant, you just give your card along with the waiter, and sign the receipt afterwards. The strange thing is that you can/have to add tip, but that happens &lt;em&gt;after&lt;/em&gt; the swipe, so basically the restaurant can charge whatever they want. Now, I haven't had any problems with this, and I figured it's probably a good idea to keep receipts here just in case something goes awruy, but it feels backward. In Belgium, they bring the credit card terminal to your table, where you can pin locally and be done with it. On the other hand, you can do a split bill very easily here: just hand x credit cards to the waiter and they'll charge each card proportionally. Good luck trying that in Belgium. üòâ&lt;/p&gt;

&lt;p&gt;I tried to go shopping today. Wanted to get some presents for the kids, so I drove to &lt;a href="https://www.westfield.com/valleyfair"&gt;Westfield Valley Fair&lt;/a&gt; which seemed like a fairly decent mall not too far away. While the mall was everything I expected from it, I only bought 2 pants for myself (and only because of a lovely 40% discount on both). This is of course entirely my own fault: I should have known this would be a dead end: I do not like shopping at all. While I was walking around in the mall, I though: dammit, I should just do this online: it's less stressful and everything is delivered to my doorstep. When I got back to the apartment, I opened amazon.com and surely all the things I had considered were also available online. I haven't ordered yet, but I will do this week. Lesson learned. &lt;/p&gt;

&lt;p&gt;And oh: Apple Pay is so, so glorious. I'm so going to miss that when I get back home.&lt;/p&gt;

&lt;h2&gt;üåû&lt;/h2&gt;

&lt;p&gt;&lt;img class="fullwidth" src="https://scontent.cdninstagram.com/hphotos-xaf1/t51.2885-15/e35/11375406_1500769576883941_628230801_n.jpg"&gt;&lt;/p&gt;

&lt;p&gt;The weather's been really great so far: blue skies and fairly warm temperatures: most days it's been hotter than 28¬∞C. This weekend was more overcast and a bit cooler, but still a fairly awesome 24¬∞C overall. The problem is that almost everywhere you will find airco on inside. And mostly, it is setup just a bit too cold for my taste. I've reverted to carrying a sweater to work because I sometimes feel too cold while working. And the temperature changes are taking their toll: I think I'm coming up with a mild cold (might also be some fallout from the UIKit flu that's going around, not sure).&lt;/p&gt;

&lt;p&gt;Jetlag is completely gone, although it sometimes feels that my body still thinks it is in CET. I can feel very tired on unexpected times during the day and not be able to sleep at night. This doesn't happen all the time, just occasionally. I've been coming home tired enough from work the whole week to usually pass out around 10pm most of the days, to be honest.&lt;/p&gt;

&lt;h2&gt;Halfway there&lt;/h2&gt;

&lt;p&gt;So yeah, halfway through my monthlong stint in Silicon Valley so far. Took a while, but I feel I got to cruising speed this week. There's more where that came from, but it feels pretty good so far. Two more weeks and then the cold reality of being back in Belgium will hit hard, I feel (but I'll be so happy to be reunited with my family).&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-10-10:/blog/2015/10/10/murica/</id>
    <title type="html">Murica</title>
    <published>2015-10-11T04:08:52Z</published>
    <updated>2015-10-11T04:08:52Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/10/10/murica/"/>
    <content type="html">

&lt;p&gt;Some observations and highlights of one week in California:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Given the number of commercials for food on TV, it's no surprise my studio had no actual table (I have one coming in on Monday though).&lt;/li&gt;
&lt;li&gt;Speaking of TV commercials: a 90 minute movie takes 3 hours because for every 10 minutes of movie, there's an accompanying 10 minutes of commercials.&lt;/li&gt;
&lt;li&gt;More on food: there's seem to be enough food chains that you can eat in a different one each day of the month.&lt;/li&gt;
&lt;li&gt;I managed to open a US bank account, because Apple Pay.&lt;/li&gt;
&lt;li&gt;I stopped wearing a sweater after 4 days. The weather's just too gorgeous. &lt;/li&gt;
&lt;li&gt;Got rid of the jetlag by Friday. I do am dog-tired every night I get home (I barely survived past 10pm this week). This was confirmed when I managed to sleep more than 3 hours during middle of the day on Saturday. &lt;/li&gt;
&lt;li&gt;Related: I sleep a lot better with the airco on than off (I discovered after 3 nights).&lt;/li&gt;
&lt;li&gt;Driving a car with automatic transmission is awkward at first, but so glorious once you get used to it.&lt;/li&gt;
&lt;li&gt;I'm never going to get used to American food portions. Man.&lt;/li&gt;
&lt;li&gt;No Starbucks yet (yay!), and Philz Coffee is pretty great (yay!).&lt;/li&gt;
&lt;li&gt;They have Seinfeld on TV.&lt;/li&gt;
&lt;li&gt;Did I mention the weather's pretty great out here?&lt;/li&gt;
&lt;li&gt;Bay Area traffic sucks. Luckily my daily commute doesn't suffer from it.&lt;/li&gt;
&lt;li&gt;2 more shootings happened in the US while I was here. The mind, it bends.&lt;/li&gt;
&lt;li&gt;Bacon. &lt;/li&gt;
&lt;li&gt;Most people are very nice and welcoming. This is especially true for the people I've met at Apple.&lt;/li&gt;
&lt;li&gt;I don't know of a good Dutch word for "tailgating".&lt;/li&gt;
&lt;li&gt;Finding a good way to pronounce my last name as something comprehensibly for Americans is quite the challenge.&lt;/li&gt;
&lt;li&gt;Most drivers here are pretty disciplined. &lt;/li&gt;
&lt;li&gt;When talking in myself (this is a healthy trait to have, okay?) I am now doing it in a combination of English and Dutch.&lt;/li&gt;
&lt;li&gt;Why is everyone so crazy about cr√®me br√ªl√©e?&lt;/li&gt;
&lt;li&gt;I haven't made it to San Francisco. This Saturday night, I will.&lt;/li&gt;
&lt;li&gt;Shopping in another country is strangely disconcerting. Even if a supermarket is just a supermarket, it's different enough to feel uncomfortable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And oh... Working at Apple has been great so far. Can't wait for more. &lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-10-01:/blog/2015/10/01/and-so-it-begins/</id>
    <title type="html">And so it begins</title>
    <published>2015-10-01T07:15:24Z</published>
    <updated>2015-10-01T07:15:24Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/10/01/and-so-it-begins/"/>
    <content type="html">

&lt;p&gt;I've been a developer for while now... 18 years, to be exact. &lt;/p&gt;

&lt;p&gt;I started in 1997, fresh out of university - without carrying any kind of degree, to be honest. I had learnt a lot there though: I had my first tastes of the internet there, and saw the web in its infancy, growing to a budding communication tool for a wide variety of people. And so I started in October 1997 as a web developer in an Antwerp-based company called iM@Gic. It was a fun place to work at, and we made some great sites there given the technology we had to our disposal (all coded in Perl, baby). &lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;But after a year or 2 I felt that I was stuck in the job, not learning enough, hitting some kind of ceiling. And so I moved companies and joined Evisor in 1999. Evisor was a "new media" company, focusing on e-business solutions, growing like cabbage in the dotcom era. It was an even more fun place to work; I guess it had a bit of a startup mentality even though we mostly did client work. I spent some time in the Microsoft Compentence Center, jumping on the freshly booted dot-net bandwagon, and later switched to the Mobile Competence Center. Doing mobile in 2001 was, eh, not like it was today. We mostly had Palm Pilots to play with, or Nokia 6510's with a super duper WAP browser. Incredibly cool things at the time, but so limited now. &lt;/p&gt;

&lt;p&gt;But alas, those good times also came to an end: Evisor was acquired by PwC Consulting (which subsequently was acquired by IBM, just a year later). The subsequent change in company culture bothered me, and the home-work distance surely didn't help either. I looked for a new job nearby, and by the middle of 2002 I had found a new job at Frontline, back in Antwerp where I lived. My work there consisted of web development and application development. Again, it was a fun place to work at (I never regretted career choices in that regard). Unfortunately, a series of events caused the company to go bankrupt not 6 months after I started working there. So by the end of 2002, I was out of a job.&lt;/p&gt;

&lt;p&gt;It was then that I decided I'd go "indie". The expierence with Frontline's demise bothered me in that I had absolutely no control over what had happened. I wanted that control for myself, to find my own direction. If it went wrong, it would be my own fault.&lt;/p&gt;

&lt;h2&gt;That Indie Life&lt;/h2&gt;

&lt;p&gt;And so I became a freelancing developer, immediately joining a jumpstarted continuation of Frontline called Frontlink (yeah, ¬Ø\_(„ÉÑ)_/¬Ø). It was not an easy time. My rates were too low (I discovered too late), and the work was not as challenging as it had been at Frontline. And so after half a year or so, I moved on to other projects. As an indie, I've done several types of work. Small projects, on a pretty casual basis working with or through former collegues. But also larger projects, more formal ones, with important bid phases before actual work. I also worked on "time and material" stints for companies, doing all kinds of work for them and their clients. &lt;/p&gt;

&lt;p&gt;I've been doing that indie/freelancing work for almost 13 years now. I think I've done well. There were times where growth was an option, but I never looked forward to managing people (well, not doing the paperwork and stuff). There were times where I hit rock bottom, a few times even pretty hard. Those times were not easy. There were so many cool interesting projects, but also a lot of miscalculations. &lt;/p&gt;

&lt;p&gt;&lt;img class="fullwidth" src="http://c.inferis.org/image/0P1n1t1G3m1L/work_2.jpg"&gt;&lt;/p&gt;

&lt;p&gt;I've worked for a number of very cool companies (who treated me like one of their own, and I likewise acted like I was one of their own). The most interesting that come to mind are iPASoftware, 10to1 and last but not least iCapps. iPASoftware offered me a taste of developing your own frameworks (I built a large part of their internal RAD framework, which was pretty extensive), and the first taste of leading a team. 10to1 offered me the chance to join them as an iOS developer, even though I had no experience at all in that field (I would not be where I am now without them, of that I am sure). The people I met there I still consider to be amongst my best friends. And at iCapps I could better myself as a team lead, first leading the Bolero iOS team, later in a more general role in the company (such a fruitful environment to work in, by the way). &lt;/p&gt;

&lt;p&gt;I learned a lot at those companies, and I am very grateful to them for their confidence in my abilities. &lt;/p&gt;

&lt;h2&gt;Apple&lt;/h2&gt;

&lt;p&gt;Today, October 1st, I start my new job as a UIKit Frameworks Engineer. It certainly feels like starting a new chapter. So many things to close off since I'm terminating my freelancing life. Additionally, this job at Apple is like something I have never done before, it is novel on so many levels. &lt;/p&gt;

&lt;p&gt;&lt;img class="fullwidth" src="http://c.inferis.org/image/3m0G1u0g1M0T/20141103_095233__IMG_0316.jpg"&gt;&lt;/p&gt;

&lt;p&gt;Certain things haven't exactly turned out as planned, so when I'm stepping on the plane to SFO this Saturday my relocation will be temporary. After about a month of bootcamp in the US with the UIKit team, I'm coming back home to continue my work from Belgium. I'd like to stress that this is a temporary situation: I will only work here for about a year after which I will still move to the US to join the team in Cupertino (on a somewhat less stressful visa process). However, I am very grateful to Apple that I still get the possibility to actually do this job: I am well aware of the extra effort this requires.&lt;/p&gt;

&lt;p&gt;Monday, October 5th is my &lt;em&gt;real&lt;/em&gt; start date in Cupertino (coincidentally on the date Steve Jobs died, which is going to be an, eh, interesting experience I think). I look incredibly forward to it (jetlagged as I will be).&lt;/p&gt;

&lt;h2&gt;Finally&lt;/h2&gt;

&lt;p&gt;And in closing, a small fun fact: &lt;strong&gt;all&lt;/strong&gt; jobs/projects I have had since 2008 were via an (indirect) Twitter link. Somebody I knew on Twitter had a job for me, or knew somebody who had. Or people who knew me via Twitter passed on my credentials to companies looking for a job. And even this new job started out with a reply to a tweet, albeit via email. So yeah: you can say a lot about Twitter (as a tool), but it surely facilitated a lot of my career. &lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-09-25:/blog/2015/09/25/xcodeghost-verify-your-xcode/</id>
    <title type="html">XcodeGhost: verify your Xcode</title>
    <published>2015-09-25T13:23:09Z</published>
    <updated>2015-09-25T13:23:09Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/09/25/xcodeghost-verify-your-xcode/"/>
    <content type="html">

&lt;p&gt;&lt;em&gt;Update Sept 28th: this article is now also &lt;a href="http://www.icapps.com/xcodeghost/"&gt;cross-posted&lt;/a&gt; on the &lt;a href="http://www.icapps.com/blog/"&gt;iCapps&lt;/a&gt; blog, as part of their &lt;a href="https://twitter.com/hashtag/iCappsiOSMonth"&gt;#iCappsiOSMonth&lt;/a&gt; series in September 2015&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Recently a malware issue for the iOS app store (which is a rarity in itself) called &lt;a href="http://www.macrumors.com/2015/09/20/xcodeghost-chinese-malware-faq/"&gt;XcodeGhost&lt;/a&gt; made its appearance. I'm not going to go into the &lt;a href="http://researchcenter.paloaltonetworks.com/2015/09/novel-malware-xcodeghost-modifies-xcode-infects-apple-ios-apps-and-hits-app-store/"&gt;gory&lt;/a&gt; &lt;a href="http://researchcenter.paloaltonetworks.com/2015/09/more-details-on-the-xcodeghost-malware-and-affected-ios-apps/"&gt;details&lt;/a&gt;, but it boils down to a malware injection through a patched version of Xcode. When building iOS apps with such an Xcode, the app binary is modified transparantly, injecting malware into your app at runtime. Nothing is downloaded from the internet, the malware just gets compiled into your app.&lt;/p&gt;

&lt;p&gt;There's not a lot you can do about this, except to make sure that you're using a legit Xcode. You can do this by &lt;strong&gt;never-ever&lt;/strong&gt; downloading a version of Xcode from a location other than Apple's, which is either from the Mac App Store, or from &lt;a href="http://developer.apple.com"&gt;http://developer.apple.com&lt;/a&gt;) (I know this is easier said than done, saying this from my chair in the middle of super-connected Europe).&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;But, once you have an Xcode installed, it doesn't hurt to verify its authenticity once in a while, especially if you use a build server to deliver your products.&lt;/p&gt;

&lt;p&gt;In the &lt;a href="https://developer.apple.com/news/?id=09222015a"&gt;communication&lt;/a&gt; Apple released about XcodeGhost, they mention a simple tool to verify your Xcode. Fire up the command line and enter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spctl --assess --verbose /Applications/Xcode.app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;spctl&lt;/code&gt; is a command that manages the security assessment policy subsystem of OSX, which is used to define the system software policy (what you can install -- think &lt;em&gt;GateKeeper&lt;/em&gt;) and code signing requirements.&lt;/p&gt;

&lt;p&gt;If you get back a response which includes &lt;code&gt;accepted&lt;/code&gt; (e.g. &lt;code&gt;/Applications/Xcode.app: accepted source=Mac App Store&lt;/code&gt; or &lt;code&gt;/Applications/Xcode.app: accepted source=Apple&lt;/code&gt;) you're in the safe zone and Xcode is not compromised. If you get back something else, chances are that your Xcode is compromised. It doesn't necessarily means that: if you accidentally edited a header file in the .app bundle, the assessment tool will also notice this and will report an error. 
However, if you see a mention of &lt;code&gt;CoreServices&lt;/code&gt; passing by in the output of &lt;code&gt;spctl&lt;/code&gt;, you're probably going to have a problem. By the way, the command can take a while so don't worry if it doesn't pony up an answer right away.&lt;/p&gt;

&lt;p&gt;In any case, if you get an error it's a good idea to download a fresh copy to be safe. Verify the downloaded app again, to make sure you updated it correctly.&lt;/p&gt;

&lt;h2&gt;Jenkins&lt;/h2&gt;

&lt;p&gt;Now, you don't want to be doing this manually on a regular basis, especially on a build server. At &lt;a href="http://icapps.com"&gt;iCapps&lt;/a&gt;, we have more than one Xcode version on the server in order to support older projects (or until they are upgraded to newer versions of Xcode). So what we did was create a small shell script which fires off the &lt;code&gt;spctl&lt;/code&gt; command. That script takes a path to any Xcode.app as an argument. So we have that script run each morning to verify all of our Xcode versions. The script terminates with a faulty exit code if the &lt;code&gt;spctl&lt;/code&gt; output doesn't contain &lt;code&gt;accepted&lt;/code&gt;, causing that job to fail. The failed job sends of an email to the development team so we get notified pretty quick in case something would go wrong.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/1x2M1L2u2O3J/Untitled-1.png"&gt;&lt;/p&gt;

&lt;p&gt;The script itself is pretty simple, like I said:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-sh highlight"&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Validating '&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;'. This can take a while."&lt;/span&gt;
&lt;span class="nv"&gt;OUTPUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;spctl --assess --verbose &lt;span class="nv"&gt;$1&lt;/span&gt; 2&amp;gt;&amp;amp;1&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$OUTPUT&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$OUTPUT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ accepted &lt;span class="o"&gt;]]&lt;/span&gt;; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"'&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;' validates just fine."&lt;/span&gt;
    &lt;span class="nb"&gt;exit &lt;/span&gt;0
&lt;span class="k"&gt;fi&lt;/span&gt;;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"'&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;' does not validate."&lt;/span&gt;
&lt;span class="nb"&gt;exit &lt;/span&gt;1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should be pretty obvious. There's one thing to point out: the &lt;code&gt;spctl&lt;/code&gt; command outputs it's assessment on &lt;em&gt;stderr&lt;/em&gt; so we need to pipe that output to &lt;em&gt;stdout&lt;/em&gt; for the backtick invocation to be able to grab it. You do this by adding &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; to your command invocation (standard error = file number 2, standard output = file number 1). If you don't do this, the script fails even though the command finds no problem.&lt;/p&gt;

&lt;p&gt;We added this script to a git repo, set up a jenkins job with that repo and had it run periodically, in our case each morning at 7am:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/2P3E1K2W030w/Image%202015-09-25%20at%204.00.51%20PM.png"&gt;&lt;/p&gt;

&lt;p&gt;But you could schedule this however you wanted, of course.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why use a repo and not install the script on the server directly&lt;/em&gt;, you ask? First of all it's a lot easier to keep track of any changes, and in case it needs changing you can do the changes locally, try them out and push to the repo. The server is updated automatically at the next validation job run.&lt;/p&gt;

&lt;p&gt;And that job, all it does is invoke the script:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/0P2k3Z2S3c1Y/Image%202015-09-25%20at%203.58.29%20PM.png"&gt;&lt;/p&gt;

&lt;p&gt;The parameter obviously changes for each Xcode install: just change the path to the Xcode.app you want to verify.&lt;/p&gt;

&lt;p&gt;Finally, set up a post build email notification so that you actually get a warning when something goes south:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/2b2l1W432O07/Image%202015-09-25%20at%204.02.57%20PM.png"&gt;&lt;/p&gt;

&lt;p&gt;And that's it. You're now a little bit safer in this cruel, cruel world. Not entirely safe though: if somebody gains access to your server and messes with your Xcodes they'll probably find and disable these jobs too (if only that: if they are resourceful enough, they might hack into spctl too). But this is better than nothing at all. &lt;/p&gt;

&lt;p&gt;The best part: if you üåü&lt;em&gt;Do Things Right&lt;/em&gt;üåü (which includes &lt;em&gt;Not Ever Turning GateKeeper Off&lt;/em&gt;), this should never bother you. üòâ&lt;/p&gt;

&lt;h2&gt;Fastlane&lt;/h2&gt;

&lt;p&gt;And oh, the fabulous &lt;a href="http://fastlane.tools"&gt;Fastlane&lt;/a&gt; toolchain by &lt;a href="http://twitter.com/krausefx"&gt;Felix Krause&lt;/a&gt; also provides a &lt;code&gt;verify&lt;/code&gt; action that you can use in your Fastfiles, making sure that you verify the Xcode you're going to use for that build is valid. The build will take longer of course, but it's the price to pay for ensured security. So if you're using Fastlane and want to make sure your builds are "safe of malware" add this action to your Fastfile.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-09-14:/blog/2015/09/14/wanted-new-maintainer-for-viewdeck/</id>
    <title type="html">Wanted: new maintainer for ViewDeck</title>
    <published>2015-09-14T15:07:24Z</published>
    <updated>2015-09-14T15:07:24Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/09/14/wanted-new-maintainer-for-viewdeck/"/>
    <content type="html">

&lt;p&gt;I'm pretty sure that if you found this blog, you also know about a little piece of software I wrote a few years ago: &lt;a href="https://github.com/ViewDeck/ViewDeck"&gt;ViewDeck&lt;/a&gt;. The &lt;a href="https://github.com/ViewDeck/ViewDeck/commit/463324184a67a7fa24c9207352298e69da0d66b7"&gt;initial commit&lt;/a&gt; was on December 3rd, 2011. I'd been doing nearly a year of iOS development at that moment, and both the Facebook and Path apps came with this nifty new feature we now call "a hamburger menu". &lt;/p&gt;

&lt;p&gt;&lt;img class="right" src="http://cl.ly/063X412a1i2U2e3f3D02/Image%202012.01.26%2023:26:55.png" width="240"&gt; I remember finding it an interesting piece of user interaction and wondered how it was implemented, and so set out one night to try to recreate something like it myself. At that point, not an awful lot of libraries existed that recreated that UX, so I had no way to base my code on somebody elses creations. By the end of the night I had a mostly working prototype, and decided to continue working on it, and to share it with the world. After all it might come in handy for someone else and it was a fun way of showing of what I did (&lt;strong&gt;YEAH BABY&lt;/strong&gt;).&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;ViewDeck grew, more features were added, people started creating pull requests with some pretty cool stuff. It got to a point the library started to become a bit bloated with all the features it had gained (AFAIK, &lt;a href="https://github.com/mutualmobile/MMDrawerController"&gt;MMDrawerController&lt;/a&gt; was created as a sort of reaction against that, but I might be wrong). It required quite a bit of support to be honest, support for which I didn't always have the time.&lt;/p&gt;

&lt;p&gt;And then, a refactoring to fix a number of problems introduced more problems that it fixed, it seemed. Version 2.3 was "the bridge too far". Fixing this would prove to be a very timeconsuming problem due to the myriad of UI configurations possible. So I kind of abandoned development, not even bothering to retract 2.3 from CocoaPods but just left a notice that 2.2.11 should be used. A bit shameful, I admit. The fact that iOS7 had just arrived and introduced a number of additional complexities (A transparent status bar, for example, or translucent navigation bars) didn't help at all. That was the last update. I tried restarting work on it a few times, but I never retained the traction I had up till version 2.2. It's been a few years now since I touched the code.&lt;/p&gt;

&lt;p&gt;I never understood why it was and still is so popular. At the time of writing it has 4.416 stars on Github, 901 forks and gets cloned between 10 to 30 times per day. This means people still use it. Not by an immense number, but it's not a small forgotten library either. I fondly remember finding out that the Foursquare app used it, and have gotten several emails of people telling me that they used it in their app. It's great fun to have people use your "framework".&lt;/p&gt;

&lt;p&gt;But the time has come to let it go more formally. My future job at Apple interferes with maintaining open source (UIKit related) software (which I can understand), and even apart from that I have no intention to continue development or maintance for ViewDeck. &lt;/p&gt;

&lt;p&gt;So... I'm looking for one or more people to take over the library. It's going to be all yours, and I will not interfere with its future development. The one thing I ask is to be recognized and mentioned as its original author, but that's it. If you want to turn it into something completely else: fine by me. I have moved the repo from its original location under my Github account to a newly created ViewDeck organisation in order to "set it free". If nobody takes over: again, fine by me, the code won't go away. But if somebody wants to take the current code and do magic with it: I'd love that. I know I'm not leaving a perfectly maintained library behind, but setting the code free is the least I can do. &lt;/p&gt;

&lt;p&gt;Interested? Shoot me a message on &lt;a href="https://twitter.com/inferis"&gt;Twitter&lt;/a&gt; and we'll talk. And oh: I'm fine with adding more than one maintainer. :)&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-08-18:/blog/2015/08/18/sound-debugging/</id>
    <title type="html">Sound debugging</title>
    <published>2015-08-18T15:52:27Z</published>
    <updated>2015-08-18T15:52:27Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/08/18/sound-debugging/"/>
    <content type="html">

&lt;p&gt;I'd like to mention a trick I use often while debugging, a trick I learned from my good friend &lt;a href="https://twitter.com/qnoid"&gt;Markos Charatzas&lt;/a&gt;: triggering a sound when a breakpoint is hit. It's a pretty simple but useful trick, especially if you're debugging repeatable actions and you want to know when they happen.&lt;/p&gt;

&lt;p&gt;I'm talking about this:&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;center&gt;
&lt;iframe src="https://player.vimeo.com/video/96070920?color=aaafb3" width="600" height="338" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;&lt;sub&gt;&lt;a href="https://vimeo.com/96070920"&gt;Sound Debugging - Markos Charatzas&lt;/a&gt; from &lt;a href="https://vimeo.com/n%0Asconf"&gt;NSConference&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/sub&gt;
&lt;/center&gt;

&lt;p&gt;If you don't have 11 minutes to watch the video (but please do, it's interesting!), here's short recap.&lt;/p&gt;

&lt;p&gt;When setting a breakpoint in Xcode, you can set a number of options on the breakpoint:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/2E3f2n2k2q0k/Screen%20Shot%202015-08-18%20at%2015.49.17.png" width="520"&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;the condition&lt;/strong&gt;: an expression which is evaluated each time the breakpoint is hit; when the expression yields a truthy value, the breakpoint is actually hit. If it returns falsy, it's like nothing has happened.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;**Ignore((: the number of times the breakpoint should be ignored. This is useful when I know the code in a loop goes ok for let's say the first 100 times, but fails the 101st or 102nd time. You can set a breakpoint before the offending line of code, have it ignored 100 times and then trigger the 101st time. Saves you a lot of "continue"s. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Action: you can add one or more actions to the breakpoint. You've got the following options: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;run an apple script &lt;img class="right" src="http://c.inferis.org/image/3K3k2v0b0Y3n/Screen%20Shot%202015-08-18%20at%2015.55.54.png" width="183"&gt;
&lt;/li&gt;
&lt;li&gt;capture a GPU frame&lt;/li&gt;
&lt;li&gt;run an LLDB command&lt;/li&gt;
&lt;li&gt;Log a message to the console&lt;/li&gt;
&lt;li&gt;run a shell command&lt;/li&gt;
&lt;li&gt;play a sound&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;finally, you can specify if the breakpoint &lt;strong&gt;automatically continues&lt;/strong&gt; after it has evaluated all the actions. If you don't have any actions, this is a rather silly option since nothing will happen, but it's very useful when you do specify actions.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Sound&lt;/h2&gt;

&lt;p&gt;The ones I used most are &lt;code&gt;run an LLDB command&lt;/code&gt;, &lt;code&gt;log a message&lt;/code&gt; and &lt;code&gt;play a sound&lt;/code&gt;. The first two are pretty handy for adding ad-hoc logging to you app. No need to add manual &lt;code&gt;NSLog()&lt;/code&gt; or &lt;code&gt;print()&lt;/code&gt; statements: you can just log from a breakpoint you can set on the fly. &lt;/p&gt;

&lt;p&gt;Finally: there's &lt;code&gt;play a sound&lt;/code&gt;. There's a number of sounds you can choose from:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/2w1o213J020c/Screen%20Shot%202015-08-18%20at%2016.05.11.png" width="509"&gt;&lt;/p&gt;

&lt;p&gt;When setting a &lt;em&gt;sound&lt;/em&gt; action, it does exactly what you'd expect: it plays the sound you selected. Some of the sounds are long, some are short. There's one little caveat: it blocks your program while it plays the sound! So depending on where you place the sound, this action can have a serious "performance" impact on your app. That's why I usually go for short sounds (Morse, Tink, Bottle, Frog, Pop) for breakpoints which tend to get hit pretty frequently, and longer ones for "once in a while" breakpoints.&lt;/p&gt;

&lt;p&gt;The cool thing about this technique is that you can actually hear what your code is doing (much to annoyance of your coworkers, so put headphones one when using this). If some concurrent code is not doing what you are expecting it to do, place some sound breakpoints in strategically placed locations in your code and you can just hear what is happening. If you don't get the sound pattern you expected, something is not going how you planned it and you can investigate further from there (with more information, because you &lt;em&gt;do&lt;/em&gt; know now how the order of execution is). You can also log this to the console (remember, you can have more than 1 action per breakpoint) for later introspection, but I've found that the listening and analysing the &lt;em&gt;music&lt;/em&gt; you code plays is a very valuable debugging technique.&lt;/p&gt;

&lt;p&gt;I usually have one or more sound breakpoints in my concurrent "backend" code (when a network requests returns, for example, or after a long calculation), and then another one (or more) in UI facing code, so that you know that background piece of code has it's effect on the UI.&lt;/p&gt;

&lt;p&gt;Or you can set it in any view related code, for example in the &lt;code&gt;-updateConstraints&lt;/code&gt; or &lt;code&gt;-viewDidLayoutSubviews&lt;/code&gt; to know when what happens. &lt;/p&gt;

&lt;p&gt;Like I said, it's a very useful technique since it allows you to use another sensory trigger to gather information, which is always a good thing. &lt;/p&gt;

&lt;p&gt;Let's just hope Apple doesn't add a &lt;em&gt;smell&lt;/em&gt; action to that list. üò≥&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-08-14:/blog/2015/08/14/imagenamed-and-multiple-bundles/</id>
    <title type="html">imageNamed: and multiple bundles</title>
    <published>2015-08-14T14:10:27Z</published>
    <updated>2015-08-14T14:10:27Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/08/14/imagenamed-and-multiple-bundles/"/>
    <content type="html">

&lt;p&gt;I've been working on a largeish project for a client for the last few months. We're have to modularized our code into several sections using CocoaPods (this is a post worth on itself, really). &lt;/p&gt;

&lt;p&gt;One of the problems you encounter with this approach is that for each pod, CocoaPods creates a bundle with resources for that pod (at least it does so when you tell it to do that). It's the only good way to package pod resources into the main app. This means that our resources do not all live in the main bundle but in seperate bundles (which themselves &lt;strong&gt;do&lt;/strong&gt; live in the main bundle). This is no problem in itself, but it can cause loading problems of resources in those bundles. It doesn't pose that much of an issue when you specify images in a nib since iOS will search in the nib's bundle too, but it's a bit harder to get resources from within your code&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Basically, you're going to be doing this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="nf"&gt;loadTheNeededBundle&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// funk that
&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="nf"&gt;pathForResource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nf"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="nf"&gt;imageWithContentsOfFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First of all, you need to know where the bundle is. I'm not going to add code for this, because you might already have a reference to this bundle. And otherwise you need to lookup the bundle within your main bundle. But we'll get to that later.&lt;/p&gt;

&lt;p&gt;Then, you need to find out if there's a file named just like the image name you're after. This poses a second hurdle: for &lt;code&gt;imageNamed:&lt;/code&gt; you can specify an image with or without the extension. That's not going to work here since we explicitly need the extension (either separately or in the resource name) otherwise the path cannot be found. And only then, when you have the actual physical path of the resource, you can load up the image.&lt;/p&gt;

&lt;p&gt;While not a lot of code, reusing these same lines of code becomes tedious and repetitive. And we don't like repetitive code, do we? &lt;/p&gt;

&lt;p&gt;So on to a better solution.&lt;/p&gt;

&lt;h2&gt;Resource bundles&lt;/h2&gt;

&lt;p&gt;First of all, we need to lookup all the bundles in our app. There's no built in way to do this, unfortunately. &lt;code&gt;NSBundle&lt;/code&gt; does not have facilities to search for all app bundles. Let's cook up our own, because it's relatively easy.&lt;/p&gt;

&lt;p&gt;Turns out that all "bundled" bundles are just living in your app's main bundle:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://c.inferis.org/image/1p3G2V0M0h1s/Image%202015-08-11%20at%209.46.46%20am.png"&gt;&lt;/p&gt;

&lt;p&gt;Let's find a way to enumerate them. Like I said: that's pretty easy:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;allAppBundles&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;_bundles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt; &lt;span class="nf"&gt;mainBundle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nf"&gt;pathsForResourcesOfType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@"bundle"&lt;/span&gt; 
                                                              &lt;span class="nf"&gt;inDirectory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@"."&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bundles&lt;/span&gt; &lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt; &lt;span class="nf"&gt;bundleWithPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}];&lt;/span&gt;

        &lt;span class="n"&gt;_bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt; &lt;span class="nf"&gt;mainBundle&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="nf"&gt;arrayByAddingObjectsFromArray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bundles&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_bundles&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;+allAppBundles&lt;/code&gt; returns an array of &lt;code&gt;NSBundle&lt;/code&gt; instances, all representing a resource bundle in your app (including the main app bundle). We get those bundles like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ask the main bundles for the paths of all resources of type "bundle". This gives us a bunch of strings with bundle paths.&lt;/li&gt;
&lt;li&gt;we try to load an NSBundle for each of those paths&lt;/li&gt;
&lt;li&gt;we tack the main bundle in front of our result&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;(The &lt;code&gt;map&lt;/code&gt; in that code sample does exactly what you expect it to do: it transforms an array into objects of a different type. This particular implementation automatically discards &lt;code&gt;nil&lt;/code&gt; result instances)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We don't need to use &lt;code&gt;dispatch_once()&lt;/code&gt; here since the data we're after is mostly static anyway. Even if you call this code simulanteously from 2 threads, it might execute twice but it won't ever introduce a race condition since we're just gathering data. You *&lt;/em&gt;can** use &lt;code&gt;dispatch_once()&lt;/code&gt; of course, but it's not necessary.*&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;+allAppBundles&lt;/code&gt; gives us an ordered array of &lt;code&gt;NSBundle&lt;/code&gt;s to work with. This solves the first hurdle in our original problem. You can add this method as a category on &lt;code&gt;NSBundle&lt;/code&gt; if you'd like.&lt;/p&gt;

&lt;h2&gt;Finding an image&lt;/h2&gt;

&lt;p&gt;Now that we have "easy" access to all app bundles, we can tackle the next hurdle: find the correct instance of the image. This again is relatively easy: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;for each bundle in &lt;code&gt;allAppBundles&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;try to load the image you want &lt;/li&gt;
&lt;li&gt;if found, return image, otherwise continue&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That might look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;imageNamedGlobally&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="nf"&gt;imageNamed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt; &lt;span class="nf"&gt;allAppBundles&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bundles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="nf"&gt;pathForResource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nf"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="nf"&gt;imageWithContentsOfFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, it first tries: &lt;code&gt;imageNamed&lt;/code&gt;. This makes sure that the default behavior is still present, before falling back to our &lt;em&gt;let's search all app bundles&lt;/em&gt; approach.&lt;/p&gt;

&lt;p&gt;Good, this works, but it has a downside: you need to fully quantify the image name with the extension, otherwise it won't be found. We can solve this by explicitly adding extra checks for known extensions:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;imageNamedGlobally&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="nf"&gt;imageNamed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt; &lt;span class="nf"&gt;allAppBundles&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bundles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="nf"&gt;pathForResource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nf"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="nf"&gt;imageWithContentsOfFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;extension&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;@"jpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@"png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@"tiff"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@"gif"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@"tif"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="nf"&gt;pathForResource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nf"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;extension&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="nf"&gt;imageWithContentsOfFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Surely, the added complexity comes at a cost, since if you now drop the extension from the name the code has to go searching for the correct file. If you do this, make sure the list of extensions is in the most appropriate order (if you have more jpgs, put &lt;code&gt;jpg&lt;/code&gt; first). But better still, just use a fully quantified name &lt;code&gt;image.jpg&lt;/code&gt; so you can leave the code out.&lt;/p&gt;

&lt;p&gt;One downside of this approach is that if a image is present in more than one bundle, only the first one (in the order of the bundles as returned by &lt;code&gt;allAppBundles&lt;/code&gt;) is returned. But this usually is not a problem unless you use multiple frameworks with similar embedded image names.&lt;/p&gt;

&lt;p&gt;So that that's: just use &lt;code&gt;+imageNamedGlobally:&lt;/code&gt; instead of &lt;code&gt;+imageNamed:&lt;/code&gt; and you're set. &lt;/p&gt;

&lt;h2&gt;Swizzling&lt;/h2&gt;

&lt;p&gt;But suppose you want this behavior everywhere, or you always seem to forgot to use the &lt;em&gt;Globally&lt;/em&gt; postfix (REALLY?)? In that case, you can swizzle &lt;code&gt;+imageNamed:&lt;/code&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Now, a big fair warning!&lt;/strong&gt; Since you are changing are core UIKit component, this will have effect in &lt;strong&gt;all&lt;/strong&gt; places in your app where &lt;code&gt;+imageNamed:&lt;/code&gt; is used. This includes not only your code, but all invocations of &lt;code&gt;+imageNamed:&lt;/code&gt; in any framework or component that's loaded into your app!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With that out of the way, let's find a way have &lt;code&gt;imageNamed:&lt;/code&gt; always do the &lt;em&gt;global&lt;/em&gt; search. We'll have to &lt;em&gt;swizzle&lt;/em&gt; the default implemenation with our own implementation. &lt;em&gt;/cue dramatic music&lt;/em&gt;&lt;br&gt;
I'm going to use &lt;a href="http://twitter.com/steipete"&gt;Peter Steinberger&lt;/a&gt;'s &lt;a href="http://petersteinberger.com/blog/2014/a-story-about-swizzling-the-right-way-and-touch-forwarding/"&gt;method swizzling&lt;/a&gt; code for that (not included here, you can get it from his post).&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;makeImageNamedActGlobally&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;__block&lt;/span&gt; &lt;span class="n"&gt;IMP&lt;/span&gt; &lt;span class="n"&gt;imageNamedImp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PSPDFReplaceMethodWithBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;objc_getMetaClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"UIImage"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
        &lt;span class="k"&gt;@selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageNamed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Class&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;UIImage&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;imageNamed&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SEL&lt;/span&gt; &lt;span class="n"&gt;sel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSString&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="n"&gt;imageNamedImp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;@selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageNamed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imageNamed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt; &lt;span class="nf"&gt;allAppBundles&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bundles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="nf"&gt;pathForResource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nf"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="nf"&gt;imageWithContentsOfFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code essentially does the same as the code above, but with a slight twist. As you can see, &lt;code&gt;PSPDFReplaceMethodWithBlock&lt;/code&gt; provides us with a block for the new implementation and it returns the original implementation. We need that implementation to call the "regular" &lt;code&gt;imageNamed:&lt;/code&gt;, of course. Since that &lt;code&gt;IMP&lt;/code&gt; is just a C function, we need to cast it to the correct signature &lt;strong&gt;and&lt;/strong&gt; provide a correct &lt;code&gt;self&lt;/code&gt; and &lt;em&gt;selector&lt;/em&gt; for the call. I wrapped that part in a block of it's own to make it more readable. Also notice that we can reuse the return value from the call (the original &lt;code&gt;IMP&lt;/code&gt;) in the block itself by prepending it with &lt;code&gt;__block&lt;/code&gt; so that the compiler will keep the reference to it until the block executes. The rest of the code is the same as our original implementation since we did not rely on &lt;code&gt;self&lt;/code&gt; or &lt;code&gt;imageNamed:&lt;/code&gt; apart from that first call.&lt;/p&gt;

&lt;p&gt;You could also have this code in a &lt;code&gt;+load&lt;/code&gt; method, but I prefer to have it explicitly called in an AppDelegate so that it's clear you're doing magic. &lt;/p&gt;

&lt;p&gt;But again: this approach is probably not the most sound one, but it probably is the most lazy one. &lt;/p&gt;

&lt;h2&gt;One more thing: nibs&lt;/h2&gt;

&lt;p&gt;For completeness: you can use the same system for Nibs, by the way. Since there's no &lt;code&gt;nibNamed:&lt;/code&gt; we can create one ourselves:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;nibNamed&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt; &lt;span class="nf"&gt;allAppBundles&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bundles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;UINib&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;nib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UINib&lt;/span&gt; &lt;span class="nf"&gt;nibWithName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nf"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nib&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;nib&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So that's it. &lt;code&gt;imageNamedGlobally:&lt;/code&gt; is an easy way out of doing manual bundle searching yourself. &lt;/p&gt;

&lt;p&gt;There's a few optimisations that can be made on this code, like remembering where you find an image so that you don't have to search again for every invocation. But I'll leave those as an exercise to the reader. &lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-06-30:/blog/2015/06/30/uikonf-2015/</id>
    <title type="html">UIKonf 2015</title>
    <published>2015-06-30T11:27:47Z</published>
    <updated>2015-06-30T11:27:47Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/06/30/uikonf-2015/"/>
    <content type="html">

&lt;p&gt;&lt;a href="http://uikonf.com"&gt;UIKonf 2015&lt;/a&gt;. It's been a while already, but I've too busy afterwards to do a decent writeup. I feel like I should though, because it's the first conference I attended where I was also a speaker (if you don't count my adhoc lightning talk at &lt;a href="http://nsspain.com"&gt;NSSpain&lt;/a&gt; last year, that is). Attending a conference as an announced speaker is different. Which was to be expected, of course.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2&gt;Runup&lt;/h2&gt;

&lt;p&gt;One of the things is: since you're doing a talk you want it to be perfect and so until you have actually performed on stage, everything about the conference is subordinate to the preparation of your talk. At least: that's how I experienced it. And judging from sitting at tables at other conferences with speakers that still needed to do their talk: I'm not the only one. Now, restarting the work on your slides 2 days before the conference doesn't really help. But I felt it was necessary: my first set of slides contained too much text and content, and I wanted to focus on certain things. Explaining everything on screen is pretty hard to follow for the audience, and the feeling that it just wasn't quite right had been dawning on me but in the run up to the conf it became more obvious.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/423R0d1F2J2r/IMG_2783.jpg" width="750"&gt; &lt;/p&gt;

&lt;p&gt;Mind you, I had set a schedule for myself: work on your slides each day in the train after &lt;a href="http://nsconference.com"&gt;NSConf&lt;/a&gt; ended, and you have plenty of time to finish them before the conf. Alas - and as expected - this didn't work out quite as planned. When I'm developing something at work and I have to leave because it's the most convenient time to leave (mostly because you have to catch that direct train home that runs only once each hour), I tend to whip out the laptop on the train and just continue coding. This works pretty well: the small pauze you take going from your desk right until you sit down in the train is perfect for some settling down. And so I'm stoked to continue work once I'm on the train (I even do this for short 15min train rides, but then the short duration of the ride can be a frustrating factor). So that "make slides on train" thing only worked out for 50%. By the beginning of May I had a pretty good outline of things I wanted to say and how to say them.&lt;/p&gt;

&lt;p&gt;But then it was time to cook up some actual slides, and that was a quite whole different ballgame. Even though I had my outline, it was hard to distill it into good slides. I started and got somewhere, but like I mentioned before it felt off. And so I let it be, not continuing work because I felt the quality was sub par and I had no idea how to make it better. In the few days before the conf I actually continued working on it, but still with mixed feelings about the result.&lt;/p&gt;

&lt;p&gt;And then it dawned to me: just learn from the big ones. Remember what you saw at other conferences (and I've done a few), (re-)watch some presentations only to seem how other people did it. And so looked around, and observed. The presentations I saw features one thing most of the time: the content on screen was limited. Usually just a work, or an image or a short sentence. Not a plethora of bullet points, albeit they appeared here and there but only expectionally. And so, after 2 hours of skimming various videos, I decided to rewrite my slides.&lt;/p&gt;

&lt;p&gt;To put this into perspective: this was on Saturday when I had just arrived in Berlin, 2 days before I was to go on stage. But I felt my current content was inadequate, and going on stage knowing that you could do better was a no go. And so I went back to my outline, opened an AsyncViewControllers2.md document and started over. I could of course reuse a lot of the work I had done before, I just had to devise a new way of delivering it. Additionally, this is one of the things &lt;a href="http://decksetapp.com"&gt;Deckset&lt;/a&gt; is really good at: its limited feature set forces you to tone down on the screen content. You &lt;em&gt;can&lt;/em&gt; put a screenful of bullets on screen, but it starts to feel cramped soon.&lt;/p&gt;

&lt;p&gt;And so I started putting out Markdown, rewriting things here and there, making minimal slides accompanied by decent presenter notes. I did take the time to take the Berlin bike tour, because I felt I'd be sad later if I wouldn't have joined. And there was plenty of time afterwards. Turned out, I need most of that time afterwards. I spent part of the night working on v2, and woke up early (7am: great moment to take breakfast in a hotel after being awake for an hour). And then I missed the start of the conference, but by noon I felt I had something good to present. I also took the time to rehearse several time, which was a good decision: you know the content almost by heart when you bring it on stage, which helps a lot with the stage fright.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="https://lh5.googleusercontent.com/-EjBm196Z4Ss/VXV2hfgaGYI/AAAAAAAABHU/PmNMr80ltB0/w1266-h1900-no/_MG_0551.jpg" width="750"&gt; &lt;/p&gt;

&lt;p&gt;Speaking about stage fright: that moment right before you have to go on stage is excruciating. I've talked with other speakers about this, and apparently that's normal even after having done it several times. It also keeps you on your edge and focused, I felt. Also, once you are on stage you go into a certain flow and then you're off.&lt;/p&gt;

&lt;p&gt;All in all, I was pretty happy with the presentation at that moment. Rewatching it afterward makes me cringe a bit... but I guess that's normal. It was the first time I did this, and I hope to do it more in the future. You live, you learn. That's the fun part of it.&lt;/p&gt;

&lt;p&gt;Once the talk was over, I felt very relieved. It was so much fun to do (even with the tricky questions afterwards), and it was nice to have people come up to you to talk about it. And from that moment, I felt I could enjoy the conference so much more. That hard part was over, I had done my job, and I was happy with it.&lt;/p&gt;

&lt;p&gt;By the way, you can &lt;a href="https://youtu.be/xy-xqj3m_Tk"&gt;watch a video&lt;/a&gt; of my presentation, and in good open source spirit &lt;a href="https://speakerdeck.com/inferis/async-view-controllers"&gt;my slides&lt;/a&gt; are online, including &lt;a href="https://github.com/Inferis/UIKonf-AsyncViewControllers"&gt;the source&lt;/a&gt;. And of course, the source of &lt;a href="https://github.com/Inferis/IIAsyncViewController"&gt;IIAsyncViewController&lt;/a&gt; is available too. By the way, &lt;a href="https://www.youtube.com/playlist?list=PLdr22uU_wISpW6XI1J0S7Lp-X8Km-HaQW"&gt;all UIKonf 2015 videos&lt;/a&gt; are up, so if you missed the conference this is a good way to catch up anyway.&lt;/p&gt;

&lt;h2&gt;UIKonf&lt;/h2&gt;

&lt;p&gt;All in all, I loved every bit of UIKonf. First of all, the location. Berlin is &lt;em&gt;such&lt;/em&gt; a nice city to visit. It feels so green, so welcoming. Even the more &lt;em&gt;shady&lt;/em&gt; parts (or at least that's how they looked) never made me feel really uncomfortable. It's also very curious how present the Wall still is, even though it's been gone for 25 years now.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/421i161R181w/IMG_2750.jpg" width="750"&gt;&lt;/p&gt;

&lt;p&gt;Secondly, the conference itself is very welcoming. I found the recreational activities on Sunday to be a lot of fun. It's a different kind of setting than being at the conference itself, you get to know more people that you otherwise wouldn't have, and it's a great way to learn and experience new things.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/0H3F1F3B1H2U/IMG_2806.jpg" width="750"&gt;&lt;/p&gt;

&lt;p&gt;Thirdly: the conference was organised splendidly, IMHO. Speaking both as a speaker and an attendee, I loved the experience. The 4 organisers were very welcoming and helpful. I loved the conference swag (&lt;strong&gt;so&lt;/strong&gt; nice of them to leave that purple shirt for the speakers while they could have easily have reserved it for themselves). But the venue itself was very good, wifi was impeccable and overall the equipment used was top notch. The videos of the conference show that clearly, I feel. They inherited a great conference from an impressive set of organisers, but they took the conference and turned the dial up another notch. Lovely work, Sabine, Diana, Maxim and Engin!&lt;/p&gt;

&lt;h2&gt;Takeaway&lt;/h2&gt;

&lt;p&gt;We're all winging it. Attendees, speakers, organisers. But that doesn't change the fact that UIKonf was one of the conferences I enjoyed most. And so:&lt;/p&gt;

&lt;p&gt;‚òÖ ‚òÖ ‚òÖ ‚òÖ ‚òÖ WOULD COME BACK FOR MORE&lt;/p&gt;

</content>
  </entry>
</feed>

