<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://blog.inferis.org/</id>
  <title>Inferical Writings</title>
  <updated>2015-08-14T14:10:27Z</updated>
  <link rel="alternate" href="http://blog.inferis.org/"/>
  <link rel="self" href="http://blog.inferis.org/feed.atom"/>
  <author>
    <name>Tom Adriaenssen</name>
    <uri>http://inferis.org</uri>
  </author>
  <entry>
    <id>tag:blog.inferis.org,2015-08-14:/blog/2015/08/14/imagenamed-and-multiple-bundles/</id>
    <title type="html">imageNamed: and multiple bundles</title>
    <published>2015-08-14T14:10:27Z</published>
    <updated>2015-08-14T14:10:27Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/08/14/imagenamed-and-multiple-bundles/"/>
    <content type="html">

&lt;p&gt;I've been working on a largeish project for a client for the last few months. We're have to modularized our code into several sections using CocoaPods (this is a post worth on itself, really). &lt;/p&gt;

&lt;p&gt;One of the problems you encounter with this approach is that for each pod, CocoaPods creates a bundle with resources for that pod (at least it does so when you tell it to do that). It's the only good way to package pod resources into the main app. This means that our resources do not all live in the main bundle but in seperate bundles (which themselves &lt;strong&gt;do&lt;/strong&gt; live in the main bundle). This is no problem in itself, but it can cause loading problems of resources in those bundles. It doesn't pose that much of an issue when you specify images in a nib since iOS will search in the nib's bundle too, but it's a bit harder to get resources from within your code&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Basically, you're going to be doing this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="nf"&gt;loadTheNeededBundle&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// funk that
&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="nf"&gt;pathForResource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nf"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="nf"&gt;imageWithContentsOfFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First of all, you need to know where the bundle is. I'm not going to add code for this, because you might already have a reference to this bundle. And otherwise you need to lookup the bundle within your main bundle. But we'll get to that later.&lt;/p&gt;

&lt;p&gt;Then, you need to find out if there's a file named just like the image name you're after. This poses a second hurdle: for &lt;code&gt;imageNamed:&lt;/code&gt; you can specify an image with or without the extension. That's not going to work here since we explicitly need the extension (either separately or in the resource name) otherwise the path cannot be found. And only then, when you have the actual physical path of the resource, you can load up the image.&lt;/p&gt;

&lt;p&gt;While not a lot of code, reusing these same lines of code becomes tedious and repetitive. And we don't like repetitive code, do we? &lt;/p&gt;

&lt;p&gt;So on to a better solution.&lt;/p&gt;

&lt;h2&gt;Resource bundles&lt;/h2&gt;

&lt;p&gt;First of all, we need to lookup all the bundles in our app. There's no built in way to do this, unfortunately. &lt;code&gt;NSBundle&lt;/code&gt; does not have facilities to search for all app bundles. Let's cook up our own, because it's relatively easy.&lt;/p&gt;

&lt;p&gt;Turns out that all "bundled" bundles are just living in your app's main bundle:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://c.inferis.org/image/1p3G2V0M0h1s/Image%202015-08-11%20at%209.46.46%20am.png"&gt;&lt;/p&gt;

&lt;p&gt;Let's find a way to enumerate them. Like I said: that's pretty easy:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;allAppBundles&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;_bundles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt; &lt;span class="nf"&gt;mainBundle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nf"&gt;pathsForResourcesOfType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@"bundle"&lt;/span&gt; 
                                                              &lt;span class="nf"&gt;inDirectory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@"."&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bundles&lt;/span&gt; &lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt; &lt;span class="nf"&gt;bundleWithPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}];&lt;/span&gt;

        &lt;span class="n"&gt;_bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt; &lt;span class="nf"&gt;mainBundle&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="nf"&gt;arrayByAddingObjectsFromArray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bundles&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_bundles&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;+allAppBundles&lt;/code&gt; returns an array of &lt;code&gt;NSBundle&lt;/code&gt; instances, all representing a resource bundle in your app (including the main app bundle). We get those bundles like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ask the main bundles for the paths of all resources of type "bundle". This gives us a bunch of strings with bundle paths.&lt;/li&gt;
&lt;li&gt;we try to load an NSBundle for each of those paths&lt;/li&gt;
&lt;li&gt;we tack the main bundle in front of our result&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;(The &lt;code&gt;map&lt;/code&gt; in that code sample does exactly what you expect it to do: it transforms an array into objects of a different type. This particular implementation automatically discards &lt;code&gt;nil&lt;/code&gt; result instances)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We don't need to use &lt;code&gt;dispatch_once()&lt;/code&gt; here since the data we're after is mostly static anyway. Even if you call this code simulanteously from 2 threads, it might execute twice but it won't ever introduce a race condition since we're just gathering data. You *&lt;/em&gt;can** use &lt;code&gt;dispatch_once()&lt;/code&gt; of course, but it's not necessary.*&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;+allAppBundles&lt;/code&gt; gives us an ordered array of &lt;code&gt;NSBundle&lt;/code&gt;s to work with. This solves the first hurdle in our original problem. You can add this method as a category on &lt;code&gt;NSBundle&lt;/code&gt; if you'd like.&lt;/p&gt;

&lt;h2&gt;Finding an image&lt;/h2&gt;

&lt;p&gt;Now that we have "easy" access to all app bundles, we can tackle the next hurdle: find the correct instance of the image. This again is relatively easy: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;for each bundle in &lt;code&gt;allAppBundles&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;try to load the image you want &lt;/li&gt;
&lt;li&gt;if found, return image, otherwise continue&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That might look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;imageNamedGlobally&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="nf"&gt;imageNamed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt; &lt;span class="nf"&gt;allAppBundles&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bundles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="nf"&gt;pathForResource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nf"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="nf"&gt;imageWithContentsOfFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, it first tries: &lt;code&gt;imageNamed&lt;/code&gt;. This makes sure that the default behavior is still present, before falling back to our &lt;em&gt;let's search all app bundles&lt;/em&gt; approach.&lt;/p&gt;

&lt;p&gt;Good, this works, but it has a downside: you need to fully quantify the image name with the extension, otherwise it won't be found. We can solve this by explicitly adding extra checks for known extensions:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;imageNamedGlobally&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="nf"&gt;imageNamed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt; &lt;span class="nf"&gt;allAppBundles&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bundles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="nf"&gt;pathForResource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nf"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="nf"&gt;imageWithContentsOfFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;extension&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;@"jpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@"png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@"tiff"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@"gif"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@"tif"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="nf"&gt;pathForResource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nf"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;extension&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="nf"&gt;imageWithContentsOfFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Surely, the added complexity comes at a cost, since if you now drop the extension from the name the code has to go searching for the correct file. If you do this, make sure the list of extensions is in the most appropriate order (if you have more jpgs, put &lt;code&gt;jpg&lt;/code&gt; first). But better still, just use a fully quantified name &lt;code&gt;image.jpg&lt;/code&gt; so you can leave the code out.&lt;/p&gt;

&lt;p&gt;One downside of this approach is that if a image is present in more than one bundle, only the first one (in the order of the bundles as returned by &lt;code&gt;allAppBundles&lt;/code&gt;) is returned. But this usually is not a problem unless you use multiple frameworks with similar embedded image names.&lt;/p&gt;

&lt;p&gt;So that that's: just use &lt;code&gt;+imageNamedGlobally:&lt;/code&gt; instead of &lt;code&gt;+imageNamed:&lt;/code&gt; and you're set. &lt;/p&gt;

&lt;h2&gt;Swizzling&lt;/h2&gt;

&lt;p&gt;But suppose you want this behavior everywhere, or you always seem to forgot to use the &lt;em&gt;Globally&lt;/em&gt; postfix (REALLY?)? In that case, you can swizzle &lt;code&gt;+imageNamed:&lt;/code&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Now, a big fair warning!&lt;/strong&gt; Since you are changing are core UIKit component, this will have effect in &lt;strong&gt;all&lt;/strong&gt; places in your app where &lt;code&gt;+imageNamed:&lt;/code&gt; is used. This includes not only your code, but all invocations of &lt;code&gt;+imageNamed:&lt;/code&gt; in any framework or component that's loaded into your app!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With that out of the way, let's find a way have &lt;code&gt;imageNamed:&lt;/code&gt; always do the &lt;em&gt;global&lt;/em&gt; search. We'll have to &lt;em&gt;swizzle&lt;/em&gt; the default implemenation with our own implementation. &lt;em&gt;/cue dramatic music&lt;/em&gt;&lt;br&gt;
I'm going to use &lt;a href="http://twitter.com/steipete"&gt;Peter Steinberger&lt;/a&gt;'s &lt;a href="http://petersteinberger.com/blog/2014/a-story-about-swizzling-the-right-way-and-touch-forwarding/"&gt;method swizzling&lt;/a&gt; code for that (not included here, you can get it from his post).&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;makeImageNamedActGlobally&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;__block&lt;/span&gt; &lt;span class="n"&gt;IMP&lt;/span&gt; &lt;span class="n"&gt;imageNamedImp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PSPDFReplaceMethodWithBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;objc_getMetaClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"UIImage"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
        &lt;span class="k"&gt;@selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageNamed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Class&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;UIImage&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;imageNamed&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SEL&lt;/span&gt; &lt;span class="n"&gt;sel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSString&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="n"&gt;imageNamedImp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;@selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageNamed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imageNamed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt; &lt;span class="nf"&gt;allAppBundles&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bundles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="nf"&gt;pathForResource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nf"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="nf"&gt;imageWithContentsOfFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code essentially does the same as the code above, but with a slight twist. As you can see, &lt;code&gt;PSPDFReplaceMethodWithBlock&lt;/code&gt; provides us with a block for the new implementation and it returns the original implementation. We need that implementation to call the "regular" &lt;code&gt;imageNamed:&lt;/code&gt;, of course. Since that &lt;code&gt;IMP&lt;/code&gt; is just a C function, we need to cast it to the correct signature &lt;strong&gt;and&lt;/strong&gt; provide a correct &lt;code&gt;self&lt;/code&gt; and &lt;em&gt;selector&lt;/em&gt; for the call. I wrapped that part in a block of it's own to make it more readable. Also notice that we can reuse the return value from the call (the original &lt;code&gt;IMP&lt;/code&gt;) in the block itself by prepending it with &lt;code&gt;__block&lt;/code&gt; so that the compiler will keep the reference to it until the block executes. The rest of the code is the same as our original implementation since we did not rely on &lt;code&gt;self&lt;/code&gt; or &lt;code&gt;imageNamed:&lt;/code&gt; apart from that first call.&lt;/p&gt;

&lt;p&gt;You could also have this code in a &lt;code&gt;+load&lt;/code&gt; method, but I prefer to have it explicitly called in an AppDelegate so that it's clear you're doing magic. &lt;/p&gt;

&lt;p&gt;But again: this approach is probably not the most sound one, but it probably is the most lazy one. &lt;/p&gt;

&lt;h2&gt;One more thing: nibs&lt;/h2&gt;

&lt;p&gt;For completeness: you can use the same system for Nibs, by the way. Since there's no &lt;code&gt;nibNamed:&lt;/code&gt; we can create one ourselves:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;nibNamed&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt; &lt;span class="nf"&gt;allAppBundles&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bundles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;UINib&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;nib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UINib&lt;/span&gt; &lt;span class="nf"&gt;nibWithName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nf"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nib&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;nib&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So that's it. &lt;code&gt;imageNamedGlobally:&lt;/code&gt; is an easy way out of doing manual bundle searching yourself. &lt;/p&gt;

&lt;p&gt;There's a few optimisations that can be made on this code, like remembering where you find an image so that you don't have to search again for every invocation. But I'll leave those as an exercise to the reader. &lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-06-30:/blog/2015/06/30/uikonf-2015/</id>
    <title type="html">UIKonf 2015</title>
    <published>2015-06-30T11:27:47Z</published>
    <updated>2015-06-30T11:27:47Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/06/30/uikonf-2015/"/>
    <content type="html">

&lt;p&gt;&lt;a href="http://uikonf.com"&gt;UIKonf 2015&lt;/a&gt;. It's been a while already, but I've too busy afterwards to do a decent writeup. I feel like I should though, because it's the first conference I attended where I was also a speaker (if you don't count my adhoc lightning talk at &lt;a href="http://nsspain.com"&gt;NSSpain&lt;/a&gt; last year, that is). Attending a conference as an announced speaker is different. Which was to be expected, of course.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2&gt;Runup&lt;/h2&gt;

&lt;p&gt;One of the things is: since you're doing a talk you want it to be perfect and so until you have actually performed on stage, everything about the conference is subordinate to the preparation of your talk. At least: that's how I experienced it. And judging from sitting at tables at other conferences with speakers that still needed to do their talk: I'm not the only one. Now, restarting the work on your slides 2 days before the conference doesn't really help. But I felt it was necessary: my first set of slides contained too much text and content, and I wanted to focus on certain things. Explaining everything on screen is pretty hard to follow for the audience, and the feeling that it just wasn't quite right had been dawning on me but in the run up to the conf it became more obvious.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/423R0d1F2J2r/IMG_2783.jpg" width="750"&gt; &lt;/p&gt;

&lt;p&gt;Mind you, I had set a schedule for myself: work on your slides each day in the train after &lt;a href="http://nsconference.com"&gt;NSConf&lt;/a&gt; ended, and you have plenty of time to finish them before the conf. Alas - and as expected - this didn't work out quite as planned. When I'm developing something at work and I have to leave because it's the most convenient time to leave (mostly because you have to catch that direct train home that runs only once each hour), I tend to whip out the laptop on the train and just continue coding. This works pretty well: the small pauze you take going from your desk right until you sit down in the train is perfect for some settling down. And so I'm stoked to continue work once I'm on the train (I even do this for short 15min train rides, but then the short duration of the ride can be a frustrating factor). So that "make slides on train" thing only worked out for 50%. By the beginning of May I had a pretty good outline of things I wanted to say and how to say them.&lt;/p&gt;

&lt;p&gt;But then it was time to cook up some actual slides, and that was a quite whole different ballgame. Even though I had my outline, it was hard to distill it into good slides. I started and got somewhere, but like I mentioned before it felt off. And so I let it be, not continuing work because I felt the quality was sub par and I had no idea how to make it better. In the few days before the conf I actually continued working on it, but still with mixed feelings about the result.&lt;/p&gt;

&lt;p&gt;And then it dawned to me: just learn from the big ones. Remember what you saw at other conferences (and I've done a few), (re-)watch some presentations only to seem how other people did it. And so looked around, and observed. The presentations I saw features one thing most of the time: the content on screen was limited. Usually just a work, or an image or a short sentence. Not a plethora of bullet points, albeit they appeared here and there but only expectionally. And so, after 2 hours of skimming various videos, I decided to rewrite my slides.&lt;/p&gt;

&lt;p&gt;To put this into perspective: this was on Saturday when I had just arrived in Berlin, 2 days before I was to go on stage. But I felt my current content was inadequate, and going on stage knowing that you could do better was a no go. And so I went back to my outline, opened an AsyncViewControllers2.md document and started over. I could of course reuse a lot of the work I had done before, I just had to devise a new way of delivering it. Additionally, this is one of the things &lt;a href="http://decksetapp.com"&gt;Deckset&lt;/a&gt; is really good at: its limited feature set forces you to tone down on the screen content. You &lt;em&gt;can&lt;/em&gt; put a screenful of bullets on screen, but it starts to feel cramped soon.&lt;/p&gt;

&lt;p&gt;And so I started putting out Markdown, rewriting things here and there, making minimal slides accompanied by decent presenter notes. I did take the time to take the Berlin bike tour, because I felt I'd be sad later if I wouldn't have joined. And there was plenty of time afterwards. Turned out, I need most of that time afterwards. I spent part of the night working on v2, and woke up early (7am: great moment to take breakfast in a hotel after being awake for an hour). And then I missed the start of the conference, but by noon I felt I had something good to present. I also took the time to rehearse several time, which was a good decision: you know the content almost by heart when you bring it on stage, which helps a lot with the stage fright.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="https://lh5.googleusercontent.com/-EjBm196Z4Ss/VXV2hfgaGYI/AAAAAAAABHU/PmNMr80ltB0/w1266-h1900-no/_MG_0551.jpg" width="750"&gt; &lt;/p&gt;

&lt;p&gt;Speaking about stage fright: that moment right before you have to go on stage is excruciating. I've talked with other speakers about this, and apparently that's normal even after having done it several times. It also keeps you on your edge and focused, I felt. Also, once you are on stage you go into a certain flow and then you're off.&lt;/p&gt;

&lt;p&gt;All in all, I was pretty happy with the presentation at that moment. Rewatching it afterward makes me cringe a bit... but I guess that's normal. It was the first time I did this, and I hope to do it more in the future. You live, you learn. That's the fun part of it.&lt;/p&gt;

&lt;p&gt;Once the talk was over, I felt very relieved. It was so much fun to do (even with the tricky questions afterwards), and it was nice to have people come up to you to talk about it. And from that moment, I felt I could enjoy the conference so much more. That hard part was over, I had done my job, and I was happy with it.&lt;/p&gt;

&lt;p&gt;By the way, you can &lt;a href="https://youtu.be/xy-xqj3m_Tk"&gt;watch a video&lt;/a&gt; of my presentation, and in good open source spirit &lt;a href="https://speakerdeck.com/inferis/async-view-controllers"&gt;my slides&lt;/a&gt; are online, including &lt;a href="https://github.com/Inferis/UIKonf-AsyncViewControllers"&gt;the source&lt;/a&gt;. And of course, the source of &lt;a href="https://github.com/Inferis/IIAsyncViewController"&gt;IIAsyncViewController&lt;/a&gt; is available too. By the way, &lt;a href="https://www.youtube.com/playlist?list=PLdr22uU_wISpW6XI1J0S7Lp-X8Km-HaQW"&gt;all UIKonf 2015 videos&lt;/a&gt; are up, so if you missed the conference this is a good way to catch up anyway.&lt;/p&gt;

&lt;h2&gt;UIKonf&lt;/h2&gt;

&lt;p&gt;All in all, I loved every bit of UIKonf. First of all, the location. Berlin is &lt;em&gt;such&lt;/em&gt; a nice city to visit. It feels so green, so welcoming. Even the more &lt;em&gt;shady&lt;/em&gt; parts (or at least that's how they looked) never made me feel really uncomfortable. It's also very curious how present the Wall still is, even though it's been gone for 25 years now.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/421i161R181w/IMG_2750.jpg" width="750"&gt;&lt;/p&gt;

&lt;p&gt;Secondly, the conference itself is very welcoming. I found the recreational activities on Sunday to be a lot of fun. It's a different kind of setting than being at the conference itself, you get to know more people that you otherwise wouldn't have, and it's a great way to learn and experience new things.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/0H3F1F3B1H2U/IMG_2806.jpg" width="750"&gt;&lt;/p&gt;

&lt;p&gt;Thirdly: the conference was organised splendidly, IMHO. Speaking both as a speaker and an attendee, I loved the experience. The 4 organisers were very welcoming and helpful. I loved the conference swag (&lt;strong&gt;so&lt;/strong&gt; nice of them to leave that purple shirt for the speakers while they could have easily have reserved it for themselves). But the venue itself was very good, wifi was impeccable and overall the equipment used was top notch. The videos of the conference show that clearly, I feel. They inherited a great conference from an impressive set of organisers, but they took the conference and turned the dial up another notch. Lovely work, Sabine, Diana, Maxim and Engin!&lt;/p&gt;

&lt;h2&gt;Takeaway&lt;/h2&gt;

&lt;p&gt;We're all winging it. Attendees, speakers, organisers. But that doesn't change the fact that UIKonf was one of the conferences I enjoyed most. And so:&lt;/p&gt;

&lt;p&gt;★ ★ ★ ★ ★ WOULD COME BACK FOR MORE&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-06-08:/blog/2015/06/08/wwdc-2015-predictions/</id>
    <title type="html">WWDC 2015 Predictions</title>
    <published>2015-06-08T08:10:04Z</published>
    <updated>2015-06-08T08:10:04Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/06/08/wwdc-2015-predictions/"/>
    <content type="html">

&lt;p&gt;That time of year again: june! Time for WWDC. A special WWDC: given my future plans, it'll be the last (in a while I guess) WWDC I'll be experiencing from &lt;em&gt;the outside&lt;/em&gt;. So this is the perfect opportunity to do &lt;a href="/blog/2013/06/08/wwdc-predictions/"&gt;another&lt;/a&gt; &lt;a href="/blog/2014/05/29/wwdc-14/"&gt;predictions&lt;/a&gt; post. 😉&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2&gt;Will see&lt;/h2&gt;

&lt;h4&gt;iOS 9&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;more extensions: If not lock screen extensions, perhaps more interaction in Springboard. But not only that, more interaction between apps themselves (embeddable views?).&lt;/li&gt;
&lt;li&gt;opening up Siri (so you can use it to open your own app or even make use of her services inside of your apps)&lt;/li&gt;
&lt;li&gt;Side by side apps support for larger devices. Not sure if they're going to announce this now or leave it as a surprise when actually release the new iOS? Better multitasking overall (see a)&lt;/li&gt;
&lt;li&gt;an update to WatchOS. I can see us getting 1.1 soon, but 2.0 will probably add native Watch apps. I previously was of the opinion that they would wait longer for native apps to gather more battery stats from current usage, but since the battery is rarely an issue with daily Watch usage (for me at least) I can see them moving faster. It'll be interesting to see what the limits will be for Watchkit apps, because this is a whole different ballgame than the iPhone.&lt;/li&gt;
&lt;li&gt;More HealthKit &amp;amp; ResearchKit (including more integration with the Watch). Better ways to get data out (e.g. watch workouts?)&lt;/li&gt;
&lt;li&gt;HomeKit. The introduction last year was clearly intended to get hardware vendors on the bandwagon, but this year should see more functionality.&lt;/li&gt;
&lt;li&gt;Related to this: no new AppleTV hardware, but I do think we'll see an update to the software if only to accomodate the new HomeKit functionality (the AppleTV will act as a bridge between local hardware and your other devices, I think).&lt;/li&gt;
&lt;li&gt;Swift: not sure. Mixins would be nice. I think we'll see the two languages (ObjC and Swift) come together more to improve interop (e.g. more annotations in the frameworks, but also better ways to integrate Swift components in Objective-C code). Objective-C is not going away soon, folks.&lt;/li&gt;
&lt;li&gt;A retina Thunderbolt display. A standalone retina iMac, let's say. Announced, but not immediately shippable. Seems like something developers will be very happy with (the needed hardware to drive it, apart from that Mac Pro, will come later).&lt;/li&gt;
&lt;li&gt;general improvements to iCloud (more storage, better UI, improvements to CloudKit, ...). Probably in conjuction with a price drop for iCloud storage.&lt;/li&gt;
&lt;li&gt;a significant update to the dev tooling. This includes Xcode but also things for continious integration. Additionally, I have a feeling that deployment might become a bit simpler given the current hassle with extensions etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That last speculation is (IMHO) reinforced by the scheduled maintenance window today, which ends around the time the keynote should end (9PM CET = 12AM PST):&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/2K3U0D3j2516/Image%202015-06-08%20at%2011.55.54%20am.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;One can hope.&lt;/p&gt;

&lt;p&gt;Also:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iOS8.4 with &lt;em&gt;Apple Music&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But that's not really a surprise. I'm curious about the pricing, though.&lt;/p&gt;

&lt;h4&gt;OSX 10.11&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;more integration with iOS. A better handoff, messages, ...&lt;/li&gt;
&lt;li&gt;the demise of HFS+ (because you never know)&lt;/li&gt;
&lt;li&gt;the breakup of iTunes into a Music only component and a sync app for syncing your iDevice with you Mac. Potentially I'd see them getting rid of that last part, forcing everybody to go to iCloud for syncing and backup (see price reduction above).&lt;/li&gt;
&lt;li&gt;iCloud will become more prominent, I think. This will anger the Snow-Leopard-Was-The-Best purists, naturally.&lt;/li&gt;
&lt;li&gt;a public UXKit (UIKit for the Mac)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Won't see&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Jony Ive on stage (👋 White Room)&lt;/li&gt;
&lt;li&gt;hints of new iOS devices&lt;/li&gt;
&lt;li&gt;no new Macbook Pro's (👋 Intel)&lt;/li&gt;
&lt;li&gt;A review of OSX by &lt;a href="https://twitter.com/siracusa"&gt;@siracusa&lt;/a&gt;. 😢&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So there. There's probably more but these are the things from the top of my head. It's more than enough, and you can't guess it all.&lt;/p&gt;

&lt;p&gt;To be clear: I have &lt;strong&gt;no&lt;/strong&gt; insider knowledge. This is pure guesswork. 😁 And if I had, I wouldn't be doing a post like this.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-05-27:/blog/2015/05/27/swift-an-array-of-protocols/</id>
    <title type="html">Swift: an array of protocols</title>
    <published>2015-05-27T05:03:27Z</published>
    <updated>2015-05-27T05:03:27Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/05/27/swift-an-array-of-protocols/"/>
    <content type="html">

&lt;p&gt;I was working on a side project yesterday, a side project which I decided to develop using Swift. My day job mostly consists of Objective-C (which I still love) but all the hip kids are doing Swift and it doesn't hurt to keep along with the latest trend, right? And learning is fun.&lt;/p&gt;

&lt;p&gt;So I was coding away, and I had this component which needed to notify several other components of certain events that happened. In practice this meant that I needed a sort of &lt;em&gt;multicast delegate&lt;/em&gt;. Now, I could have solved this the old Cocoa way by using notifications, but I try to stay away from them unless it really makes sense. The contract they offer is pretty loose (which can be handy too), but I wanted to try something more set-in-stone right now.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2&gt;The setup&lt;/h2&gt;

&lt;p&gt;So I created this class and protocol.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didDoOneThingy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;thingyName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didDoOtherThingy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;thingyId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;ThingyManager&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;doOneThingy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;thingyName&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"one-thing"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"other-thing"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;notifyAll&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;notifier&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="n"&gt;notifier&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;didDoOneThingy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thingyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;doOtherThingy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;thingyId&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;notifyAll&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;notifier&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
          &lt;span class="n"&gt;notifier&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;didDoOtherThingy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thingyId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;addNotifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// to be implemented&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;removeNotifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// to be implemented&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;notifyAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// to be implemented&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;(Note: The actual code was obviously different but similar.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is pretty simple: I have a &lt;code&gt;ThingyManager&lt;/code&gt; which manages thingies (not very good in this case, but I disgress), and whenever something changes I'd like to notify one or more instances of said changes. This is where &lt;code&gt;ThingyNotifier&lt;/code&gt; comes in; and as you can see, there's more than one thing to be notified of. This is like the delegate pattern, but as a &lt;code&gt;1-&amp;gt;n&lt;/code&gt; connection instead of a &lt;code&gt;1-&amp;gt;1&lt;/code&gt; connection.&lt;/p&gt;

&lt;p&gt;You'll also notice that there are 3 methods still left to be implemented: &lt;code&gt;addNotifier&lt;/code&gt;, &lt;code&gt;removeNotifier&lt;/code&gt; and &lt;code&gt;notifyAll&lt;/code&gt;. We'll cover these later.&lt;/p&gt;

&lt;p&gt;Additionally, I'd like to sprinkle some operator magic on top so that using these notifiers becomes more intuitive:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyManager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;ThingyManager&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addNotifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;left&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyManager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;ThingyManager&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;removeNotifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;left&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This just wraps our &lt;code&gt;addNotifier&lt;/code&gt; and &lt;code&gt;removeNotifier&lt;/code&gt; in &lt;code&gt;+=&lt;/code&gt; and &lt;code&gt;-=&lt;/code&gt; calls, and so I can use this class like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;ThatController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;thingyManager&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;thingyManager&lt;/span&gt;

  &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;thingyManager&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyManager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thingyManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thingyManager&lt;/span&gt;
    &lt;span class="n"&gt;thingyManager&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nf"&gt;deinit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thingyManager&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is nice (IMHO) and invokes some fond memories of using multicast delegates in my C# days.&lt;/p&gt;

&lt;h2&gt;// to be implemented&lt;/h2&gt;

&lt;p&gt;But now those three methods remain. Let's implement them.&lt;/p&gt;

&lt;p&gt;First of all, we need a place to store our &lt;code&gt;ThingyNotifier&lt;/code&gt; instances:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;notifiers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We'll just use an array of &lt;code&gt;ThingyNotifier&lt;/code&gt;. Easy.&lt;/p&gt;

&lt;p&gt;Now onto &lt;code&gt;notifyAll&lt;/code&gt;, which is just an iteration over said array to invoke the block on each notifier:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;notifyAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;notifier&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;notifiers&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, easy.&lt;/p&gt;

&lt;p&gt;Next up: &lt;code&gt;addNotifier&lt;/code&gt;. This is even easier, just add the notifier to our array:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;addNotifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;notifiers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally &lt;code&gt;removeNotifier&lt;/code&gt;. Here's where things get tricky (you felt this coming, right?).
A naive implementation could be:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;removeNotifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;notifiers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;notifiers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;removeAtIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But alas, the compiler disagrees:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/1b3f0W103t37/Image%202015-05-27%20at%207.48.13%20am.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;Now the error is a bit sparse on information, but looking at the (current) definition of &lt;code&gt;find&lt;/code&gt; gives us more information:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;C&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;CollectionType&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="kt"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Element&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Equatable&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It turns out that the element of the collection type we're trying to find something in must conform to &lt;code&gt;Equatable&lt;/code&gt;. That makes sense since how else would &lt;code&gt;find&lt;/code&gt; know if it has found the element it is looking for? There must be some kind of test for equality.&lt;/p&gt;

&lt;p&gt;So, the solution is easy, right? Just make &lt;code&gt;ThingyNotifier&lt;/code&gt; conform to &lt;code&gt;Equatable&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Equatable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didDoOneThingy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;thingyName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didDoOtherThingy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;thingyId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nope. This introduces a slew of new errors (of the same type):&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/1Z0b2L3M0v08/Image%202015-05-27%20at%207.58.20%20am.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;Looking at the definition of &lt;code&gt;Equatable&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;Equatable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the &lt;code&gt;Self&lt;/code&gt; type. This denotes that the method will use the actual type that's implementing the protocol. In this case, it makes sure we're comparing two objects of the same type with each other. This actually makes sense from a semantic standpoint: it's a pretty good assumption that objects need to be of the same type to be considered equal.&lt;/p&gt;

&lt;p&gt;But this doesn't help us: we can't use &lt;code&gt;Equatable&lt;/code&gt;, and thus we can't use &lt;code&gt;find&lt;/code&gt;. We'll have to find another way.&lt;/p&gt;

&lt;h2&gt;Our own ==&lt;/h2&gt;

&lt;p&gt;So let's declare the &lt;code&gt;==&lt;/code&gt; operator/func to be part of the &lt;code&gt;ThingyNotifier&lt;/code&gt; protocol itself:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didDoOneThingy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;thingyName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didDoOtherThingy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;thingyId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then we'll change our searching a bit to do a manual loop over the array instead of using &lt;code&gt;find&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;removeNotifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;notifiers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;notifiers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;notifier&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;notifiers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;removeAtIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, that doesn't work either: we get back to the same problem as before, kind of:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/3K0a2i2y0k1k/Image%202015-05-27%20at%208.35.57%20am.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;And while you can make that error go away by providing an implementation of that &lt;code&gt;==&lt;/code&gt; operator, like this...&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// UWOTM8&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;... it's kind of useless since you still need to do comparing of ThingyNotifier instances and always returning &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; isn't going to do that. Since we have nothing else to work with, we're stuck.&lt;/p&gt;

&lt;h3&gt;A solution&lt;/h3&gt;

&lt;p&gt;Since we can't do this in pure-pure Swift, let's include &lt;em&gt;Foundation&lt;/em&gt; into the party. How about we declare &lt;code&gt;ThingyNotifier&lt;/code&gt; to have to conform to &lt;code&gt;NSObjectProtocol&lt;/code&gt;? In my use case, this wasn't a problem since the notifier instances would be &lt;code&gt;UIViewController&lt;/code&gt; instances anyway, but I guess this puts a bit of a limitation on what target objects you can use in the more general case.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;NSObjectProtocol&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didDoOneThingy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;thingyName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didDoOtherThingy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;thingyId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But it does introduce &lt;code&gt;isEqual()&lt;/code&gt; into the equation. So now our &lt;code&gt;removeNotifier&lt;/code&gt; implementation will become:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;removeNotifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;notifiers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;notifiers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;isEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;notifiers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;removeAtIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that works as expected. Like I said before, this introduces an extra requirement to conform to the &lt;code&gt;NSObject&lt;/code&gt; protocol, which might be problematic depending on how you want to use this. But in practice, it's likely that the objects you're using as &lt;code&gt;ThingyNotifiers&lt;/code&gt; are a subclass of &lt;code&gt;NSObject&lt;/code&gt; anyway.&lt;/p&gt;

&lt;p&gt;I can hear you think: "&lt;em&gt;but what if I just add an equality method myself?&lt;/em&gt;". Let's just copy the &lt;code&gt;isEqual&lt;/code&gt; method signature from &lt;code&gt;NSObjectProtocol&lt;/code&gt; and we're good, right?&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didDoOneThingy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;thingyName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didDoOtherThingy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;thingyId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;isEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;AnyObject&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/39081y3E1C1T/nope.gif"&gt;&lt;/p&gt;

&lt;p&gt;Why? Objects conforming to &lt;code&gt;ThingyNotifier&lt;/code&gt; now have to implement this method too and on top of it you cannot freeload on the &lt;code&gt;NSObjectProtocol&lt;/code&gt; implementation anyway:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/3w0P3p0a2I41/Image%202015-05-27%20at%209.16.19%20am.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;And! Our equality check doesn't work anymore:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/2Y082Z3v3S2q/Image%202015-05-27%20at%209.16.05%20am.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;So, all in all, this &lt;code&gt;NSObjectProtocol&lt;/code&gt; approach isn't too bad.&lt;/p&gt;

&lt;h3&gt;A Real Pure™ Swift solution?&lt;/h3&gt;

&lt;p&gt;So, as far as I know, there's no pure Swift solution to this. &lt;a href="https://twitter.com/jckarter"&gt;Joe Groff&lt;/a&gt; of the Swift team at Apple provided a trampoline to a solution which I tried to implement. Alas, his solution – while clever – caused other problems. For example: you can't have the &lt;code&gt;+=&lt;/code&gt; and &lt;code&gt;-=&lt;/code&gt; operators (or any operator) operating on protocol instances if the protocol somehow employs the &lt;code&gt;Self&lt;/code&gt; type, causing us to get back to the same error as mentioned before. Which leaves us empty handed yet again. 😉&lt;/p&gt;

&lt;p&gt;This reminds me to mention how I love how the Swift team reaches out to us for problems like this. They cannot solve them all but they are very helpful and even getting these problems noticed by them makes me feel like there's a good chance they'll be actually solved in the future. Who knows, right?&lt;/p&gt;

&lt;p&gt;Anyway, thanks to Joe (and the team) for the help. Much appreciated! 👍&lt;/p&gt;

&lt;h3&gt;Example code&lt;/h3&gt;

&lt;p&gt;You can find a playground with the code included in this post on &lt;a href="https://github.com/Inferis/ThingyNotifier"&gt;Github&lt;/a&gt;, if you care to play with it some more.&lt;/p&gt;

&lt;p&gt;And oh, if there's another approach, I'd love to hear it!&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-05-11:/blog/2015/05/11/watchkit-app-versions/</id>
    <title type="html">Watchkit app versions</title>
    <published>2015-05-11T16:15:28Z</published>
    <updated>2015-05-11T16:15:28Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/05/11/watchkit-app-versions/"/>
    <content type="html">

&lt;p&gt;I came across &lt;a href="http://ikennd.ac/blog/2015/05/build-time-cfbundleversion-values-in-watchkit-apps/"&gt;this article&lt;/a&gt; by Daniel Kennett this morning. I had seen him tweet about it too, but checking my feeds (yeah, I still do that, albeit not daily) I noticed he also made a post about it.&lt;/p&gt;

&lt;p&gt;Having toyed a lot with build configurations and their associated settings configuration, I was curious how he solved the issue.&lt;/p&gt;

&lt;p&gt;I'd have to concur with Daniel: the solution is horrible. 8 Steps to get this working, with aggregate targets and disabling of parallelization of the project: Not Good™.&lt;/p&gt;

&lt;p&gt;But my interest was piqued, and so I tried to recreate his problem (not hard) and find a better solution. I assumed it would still be hacky, but less hacky than Daniel's "Horrible" solution.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2&gt;Step 0&lt;/h2&gt;

&lt;p&gt;Create iPhone app, add Watchkit extension. In this case, just an empty app that displays the version of the app in a label (both on the watch and the phone). Or use existing iPhone + Watch apps.&lt;/p&gt;

&lt;h2&gt;Step 1&lt;/h2&gt;

&lt;p&gt;In the root of your project, add a shell script that we'll use to define the version settings:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/2J2p3L1Q2o30/Image%202015-05-11%20at%207.05.55%20pm.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;The contents of the scripts are similar to the script Daniel creates:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-sh highlight"&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date &lt;span class="s2"&gt;"+%S"&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;M&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date &lt;span class="s2"&gt;"+%M"&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;D&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;GENERATED_BUNDLE_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;GENERATED_BUNDLE_SHORTVERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;M&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;SRCROOT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SRCROOT&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"// Generated: &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;D&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &amp;gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SRCROOT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/Version.xcconfig"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"GENERATED_BUNDLE_VERSION = &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GENERATED_BUNDLE_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SRCROOT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/Version.xcconfig"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"GENERATED_BUNDLE_SHORTVERSION = &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GENERATED_BUNDLE_SHORTVERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SRCROOT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/Version.xcconfig"&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Generated: &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GENERATED_BUNDLE_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp; &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GENERATED_BUNDLE_SHORTVERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This script generates a file &lt;code&gt;Version.xcconfig&lt;/code&gt; in the root of the project, containing two build settings: &lt;code&gt;GENERATED_BUNDLE_VERSION&lt;/code&gt; and &lt;code&gt;GENERATED_BUNDLE_SHORTVERSION&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is slightly different since we use the date of the system here to generate the version numbers, and Daniel's approach is more &lt;em&gt;real life&lt;/em&gt; than mine using the git commit hash, but I wanted something that would change regularly for testing purposes. You'll obviously want to change the source for &lt;code&gt;GENERATED_BUNDLE_VERSION&lt;/code&gt; and &lt;code&gt;GENERATED_BUNDLE_SHORTVERSION&lt;/code&gt; to something more sensible.&lt;/p&gt;

&lt;h2&gt;Step 2&lt;/h2&gt;

&lt;p&gt;Integrate the script to your project, not as a &lt;em&gt;Build Phase&lt;/em&gt;, but as a &lt;em&gt;Build Pre-Action&lt;/em&gt;. You can find these under the schemes of your project:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/161A0v25191W/Image%202015-05-11%20at%207.14.59%20pm.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;You can define pre-actions and post-actions for every "Product Action" of the project. This is defined in the scheme, so you'll have to do this for all schemes defined in the project where you want this to happen. In our case, this is twice since Xcode creates a default scheme for the app and a scheme for the watchkit app (basically because it's a lot easier to run them that way).&lt;/p&gt;

&lt;p&gt;This is also why we made a script; you could also paste the code right into the action window textarea like Daniel did. That works as good, but then you'd have to change the code for every scheme when you want a change (which is at least twice in our case), so I prefer to put scripts in their own file. It's also easier to edit them this way.&lt;/p&gt;

&lt;p&gt;Don't forget to specify to "take the buildsettings" from the appropriate target, otherwise the &lt;code&gt;$SRCROOT&lt;/code&gt; variable we use in the script (and to invoke it) is not set.&lt;/p&gt;

&lt;h2&gt;Step 3&lt;/h2&gt;

&lt;p&gt;Build the project. This should generate a &lt;code&gt;Version.xcconfig&lt;/code&gt; along side the &lt;code&gt;Version.sh&lt;/code&gt; file. Add this xcconfig file to the project:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/1g1L1B0k0w0e/Image%202015-05-11%20at%207.23.24%20pm.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;Don't add it to a target (uncheck all the boxes); we don't want it included in a build product, but it needs to be in the project... because we want to use it as base setting for our project's configurations:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/07153B0F1Y25/Image%202015-05-11%20at%207.28.28%20pm.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;This makes sure that the settings defined in the config file are usable in our project. Since we add them at project level, they will be present for &lt;em&gt;every target&lt;/em&gt; which is &lt;strong&gt;exactly&lt;/strong&gt; what we want. You can verify this by looking at user defined settings in &lt;em&gt;Build Settings&lt;/em&gt; (all the way to the bottom):&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/3r0a3s1h1Z3g/Image%202015-05-11%20at%207.49.08%20pm.png" width="675"&gt;&lt;/p&gt;

&lt;h2&gt;Step 4&lt;/h2&gt;

&lt;p&gt;Now we need to incorporate the generated settings into the Info.plist files. By default, the &lt;em&gt;Expand Build Settings in Info.plist File&lt;/em&gt; is set to &lt;code&gt;YES&lt;/code&gt;, so we don't have to take precautions for this like Daniel did, because his version settings were in a header file. I had no clue that you could do this, by the way, and it allows for interesting approaches for other problems. 😍&lt;/p&gt;

&lt;p&gt;So for every &lt;code&gt;Info.plist&lt;/code&gt; file, change the hardcoded &lt;code&gt;CFBundleVersion&lt;/code&gt; and &lt;code&gt;CFBundleShortVersionString&lt;/code&gt; values to the values we get from the settings, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-xml highlight"&gt;&lt;span class="nt"&gt;&amp;lt;plist&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
   ...
   &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleShortVersionString&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;$(GENERATED_BUNDLE_SHORTVERSION)&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleVersion&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;$(GENERATED_BUNDLE_VERSION)&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
   ...
&lt;span class="nt"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will look like this in when you inspect the project:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/2R383y10101i/Image%202015-05-11%20at%207.57.25%20pm.png" width="400"&gt;&lt;/p&gt;

&lt;h2&gt;Step 5&lt;/h2&gt;

&lt;p&gt;There is no step 5. Well, except for: build your app (I have no Watch yet so I can't show you a fancy hairy wrist with the demo app running), and continue developing.&lt;/p&gt;

&lt;h2&gt;Caveat&lt;/h2&gt;

&lt;p&gt;Now once in a while you might get the original error because thanks to (what I presume to be) Xcode caching things: it seems the changes to the Version.xcconfig file aren't picked up right away or Xcode doesn't notice it was changed.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/2s270O1i462K/Image%202015-05-11%20at%208.06.53%20pm.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;It seems that this also has to do with the parallelized builds: it looks like Xcode is running the pre-action scripts for each run it can parallellize, causing slight changes in the resulting values.&lt;/p&gt;

&lt;p&gt;Now, this is more an obvious problem for this demo project since the values change so often but in a real world case this won't happen as much (see Daniel's script, for example). And when this occurs, you can clean the project and rebuild in which case all plist files will be updated. But still, this does not make me happy and for larger project can cause quite a bit of delay.&lt;/p&gt;

&lt;p&gt;Additionally, the updated values sometimes aren't picked up directly due to the same caching playing its role. So most of the time you don't see the updated version inside the app unless you clean or reopen the project. This is usually not a problem since the use case for these versions are only applicable for release builds, but it's not pretty.&lt;/p&gt;

&lt;h2&gt;Step 1 (🙈)&lt;/h2&gt;

&lt;p&gt;But both problems can be remedied pretty simple by augmenting our script with 2 lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-sh highlight"&gt;&lt;span class="c"&gt;# finishing touch&lt;/span&gt;
find &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$SRCROOT&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; -name Info.plist -exec touch &lt;span class="s2"&gt;"{}"&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt;

&lt;span class="c"&gt;# haste makes waste&lt;/span&gt;
sleep 0.5&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first line looks for all Info.plist files under the source root and &lt;em&gt;touches&lt;/em&gt; them. Xcode will pick them up as changed and incorporate the updated version settings into the build.&lt;/p&gt;

&lt;p&gt;The second line waits a bit before continuing. This adds an extra half second to your build but this fixes the problem with the parallellized builds: by waiting a bit before continuing, we make sure the last change is picked up nicely for all build runs.&lt;/p&gt;

&lt;p&gt;Now, these two lines are the icing on the cake and shouldn't be really necessary for a real world scenario where the versions don't change often. But in case these issues do bite you, here's a solution.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There's still no "out of the box" solution for this version numbering issue. I don't know why you need to set the version of each extension manually while Xcode could be doing this itself since it's mandatory anyway. The steps above make it a bit simpler to have a general system of version numbers for your app and your (WatchKit) extensions, using tools we have to our disposal anyway.&lt;/p&gt;

&lt;p&gt;Having access to the build steps like Daniel asks would be nice but I don't think it's necessary for this problem, because we can fix it with plain old configuration. The only downside is that you need to add the script for each scheme you have in your project, but that's (IMHO) a small price to pay.&lt;/p&gt;

&lt;p&gt;Thanks again to Daniel for the original post which I thought was very interesting, and by which I learned that you can use preprocessing for &lt;code&gt;Info.plist&lt;/code&gt; files too: something I hadn't discovered before. It's always nice to learn something new. 🌟&lt;/p&gt;

&lt;p&gt;Oh yeah: you can find &lt;a href="https://github.com/Inferis/WatchVersionThingy"&gt;the demo project&lt;/a&gt; on Github.&lt;/p&gt;

&lt;h2&gt;&lt;em&gt;Update&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;After posting this, Daniel mentions on Twitter that he considered a config file, but he didn't want to spoil the repo with changing version file:&lt;/p&gt;

&lt;div class="embed tweet"&gt;
&lt;blockquote class="twitter-tweet" align="center" width="350"&gt;
&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/Inferis"&gt;@Inferis&lt;/a&gt; I considered a config file, but updating it would dirty the repo. Since my numbers are based on commits, it’s be an infinite loop.&lt;/p&gt;— Daniel Kennett (@iKenndac) &lt;a href="https://twitter.com/iKenndac/status/597843683132755968"&gt;May 11, 2015&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;I can see that's not what you want, and the easy solution is that you can put the file in your &lt;code&gt;.gitignore&lt;/code&gt; settings so that it doesn't get pushed to the repo. However, this might cause the Version.xcconfig file to go red in your project explorer, which doesn't look as nice:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/3u2N3i250S06/Image%202015-05-12%20at%207.06.02%20am.png" width="276"&gt;&lt;/p&gt;

&lt;p&gt;But to me, it's no real problem anyway: you can either put it in a folder where you don't see it (like the build products), or just build the project and it's fine. The red is only there when initially checking out the repo.&lt;/p&gt;

&lt;p&gt;But then Daniel Tull (ALL THE DANIELS) chimed in:&lt;/p&gt;

&lt;div class="embed tweet"&gt;
&lt;blockquote class="twitter-tweet" align="center" width="350"&gt;
&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/iKenndac"&gt;@iKenndac&lt;/a&gt; &lt;a href="https://twitter.com/Inferis"&gt;@Inferis&lt;/a&gt; I generate a header for the plist in the scheme pre-build script. The middle ground between your methods. ☺️&lt;/p&gt;— Daniel Tull (@danielctull) &lt;a href="https://twitter.com/danielctull/status/597871444429774849"&gt;May 11, 2015&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;Indeed, you can use the header approach as a sort of middle ground: you don't get the pesky missing file (sometimes) because the generated header is not included in the project (which &lt;strong&gt;is&lt;/strong&gt; necessary for the config file), but it requires you to do more setup up front. Depending on what you like, you can choose whatever approach you'd like, since their net effect is the same.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-04-30:/blog/2015/04/30/nanoc/</id>
    <title type="html">Nanoc</title>
    <published>2015-04-30T07:30:03Z</published>
    <updated>2015-04-30T07:30:03Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/04/30/nanoc/"/>
    <content type="html">

&lt;p&gt;The current iteration of this blog runs on an "engine" called &lt;a href="http://nanoc.ws"&gt;Nanoc&lt;/a&gt;. Nanoc, you say?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;nanoc is a static site generator, fit for building anything from a small personal blog to a large corporate web site.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The keywords here is "static site generator". This means that I build/generate the site locally on my machine, and then push it to a server on the internets for all you to see. There's no dynamic site running, built in PHP or ruby or whatever. Just plain HTML files, some CSS, a bit of Javascript and some images or videos.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2&gt;Why nanoc?&lt;/h2&gt;

&lt;p&gt;The previous iteration of my blog was built on Octopress. The principle was the same: Octopress is built on Jekyll, and Jekyll is also a static site generator (there are &lt;a href="https://staticsitegenerators.net"&gt;many others&lt;/a&gt;, by the way). But I felt constrained by using Octopress. I don't know why exactly, but I think it started when I wanted to put a new theme on my blog; the current one at the time was a quick-n-dirty job to get started, and after a year on the blog I felt it was time to put some more personalized paint on it. I did not have to time build a full new theme from scratch so I was looking for an "almost there" theme which I could then modify.&lt;/p&gt;

&lt;p&gt;I guess I was put off by the (seeming) complexity of the Octopress themes. I did not directly find my way around them, and installing/maintaining them felt like too much work for what it was worth. But even apart from that, due to the out-of-the-box nature of Octopress, trying to change it to fit your own needs was not straightforward. Might be good for starting off quickly, but not for more advanced use.&lt;/p&gt;

&lt;p&gt;So started putting off revamping the blog, either until I found the courage to get the work done, or until I found something new.&lt;/p&gt;

&lt;p&gt;And then I saw &lt;a href="http://ikennd.ac"&gt;Daniel Kennett&lt;/a&gt; doing a &lt;a href="http://ikennd.ac/blog/2015/02/rebrand/"&gt;post&lt;/a&gt; about switching to Nanoc and I knew I was "in love" immediately. This was what I needed. Raw but malleable, ruby, and at first sight: not &lt;em&gt;too&lt;/em&gt; complicated.&lt;/p&gt;

&lt;h2&gt;Start over&lt;/h2&gt;

&lt;p&gt;The next steps were:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-sh highlight"&gt;sudo gem install nanoc
nanoc create-site blog.inferis.org&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And off I was. To be honest: the bare-bones site that &lt;code&gt;create-site&lt;/code&gt; creates is &lt;em&gt;really&lt;/em&gt; bare-bones. But I felt this was good, because there's not to much to worry about. You can learn from your site's source and the generated html how things work. Now don't understand me wrong: this took some time and wasn't an easy task. But it wasn't complex either, and the most important part: it was fun exploring how everything worked. You take baby steps here, moving from one issue to another, building up gradually.&lt;/p&gt;

&lt;p&gt;Sometimes I hit some brick walls, taking wrong approaches, being stuck for no apparent reason. But it felt like programming, not like configuring. Those brick walls became challenges, and I was eager to find a solution for them. Given that, the &lt;a href="http://nanoc.ws/docs/"&gt;Nanoc documentation&lt;/a&gt; is really good, but as usual the guides only cover the basic things. Once you go deeper it becomes harder to find good information. There's a few other people tinkering with Nanoc, and blogging about it, and those blogposts were helpful (I'll probably do some more technical posts on my nanoc ventures later on). Also, since everything is open source, you can just consult the source code to see what's going on and work with that.&lt;/p&gt;

&lt;h2&gt;NSConference&lt;/h2&gt;

&lt;p&gt;So I was almost done when &lt;a href="http://nsconference.com"&gt;NSConference 7&lt;/a&gt; came. I wanted to blog about my move to Apple during NSConference, so I started a final sprint to finish the blog so I could switch to nanoc and ditch Octopress. Turned out it was more work than expected (e.g. the code blocks issue -- see below -- took quite a bit of messing around to fix). But by the end of the first day of the conf I felt I was finished and published the site.&lt;/p&gt;

&lt;p&gt;I've been happy with it ever since, fine-tuning things here and there, adding initial non-necessary features back in (categories, for example). I feel I have a robust and easy to augment codebase now, and that makes the developer in me very happy.&lt;/p&gt;

&lt;h2&gt;Current setup&lt;/h2&gt;

&lt;p&gt;Some details about my current nanoc setup?&lt;/p&gt;

&lt;h4&gt;Markdown&lt;/h4&gt;

&lt;p&gt;My posts are all written in Markdown and parsed using the redcarpet gem, using the following configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby highlight"&gt;&lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="ss"&gt;:redcarpet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="ss"&gt;:options&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;:fenced_code_blocks&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:smartypants&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:tables&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I love using Markdown to write content. It's great for embedding code (especially with the fenced code blocks), and you don't get distracted about the layout too much. And if I'm every inclined to do so, it's easy to generate a paper version of this blog; there's enough tools out there to generate PDFs from Markdown.&lt;/p&gt;

&lt;h4&gt;Theme&lt;/h4&gt;

&lt;p&gt;I'm using a variation of the &lt;a href="http://startbootstrap.com/template-overviews/clean-blog/"&gt;Clean Blog Theme&lt;/a&gt; (thanks, &lt;a href="http://ashfurrow.com"&gt;Ash Furrow&lt;/a&gt; for the inspiration). I modified it slighly to personalise it a bit. There's more I want to do but that's for another time.&lt;/p&gt;

&lt;p&gt;The theme is made up from a bunch of static files compromising the base of the theme; these are stored in a separate folder which is merged in when generating the site:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby highlight"&gt;&lt;span class="o"&gt;-&lt;/span&gt;
  &lt;span class="ss"&gt;type: &lt;/span&gt;&lt;span class="n"&gt;static&lt;/span&gt;
  &lt;span class="ss"&gt;items_root: &lt;/span&gt;&lt;span class="sr"&gt;/
  allow_periods_in_identifiers: true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works because nanoc has support for multiple data sources, and nanoc combines the "dynamic" source (the posts) and the static source together to generate the final result. This also means that you could have your posts in an Oracle database if you wanted. 😜&lt;/p&gt;

&lt;h4&gt;Custom filters&lt;/h4&gt;

&lt;p&gt;Filters are nanoc's way of transforming your source content to content that you view in the site. As mentioned before, I'm using the &lt;em&gt;redcarpet&lt;/em&gt; filter to transform the Markdown posts into HTML.&lt;/p&gt;

&lt;p&gt;Nanoc comes with a bunch of filters, and there are another set of them out on the internet. You can use plain &lt;em&gt;erb&lt;/em&gt; if you wanted, or use a different Markdown parser (e.g. &lt;em&gt;Kramdown&lt;/em&gt;). But it's very easy to come up with your own filters too.&lt;/p&gt;

&lt;p&gt;I wrote a couple for my blog specifically:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;fixcodeblocks.rb&lt;/code&gt; fixes the redcarpet generated codeblocks (using Nokogiri) to conform to the HTML that the code highlighter filter expected (took me some time to find out why that was, by the way).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;octopress_img_tags.rb&lt;/code&gt; is a filter I ported from the Octopress install which supports the {% img %} syntax from Jekyll.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tweet_tag.rb&lt;/code&gt; is another Octopress style filter that filters {% tweet %} tags into an embedded tweet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There's probably more to come as I expand the blog, but that's it for now.&lt;/p&gt;

&lt;h4&gt;Niceties&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;I added categories/tags because that's what you do.&lt;/li&gt;
&lt;li&gt;I added a &lt;code&gt;published&lt;/code&gt; metadata item for posts, which you can set to false so that the post is excluded when generating the site. Very handy for WIP posts.&lt;/li&gt;
&lt;li&gt;I also added a &lt;code&gt;preview&lt;/code&gt; metadata item for posts; setting this to true does generate the page with the article itself, but it omits the same article in the rest of the site. It won't appear on the homepage, in the archives or category browsers or in the atom feed. I did this so I could publish posts for proofreading (just pass the link to proofreaders) but without alerting the Rest-Of-The-World.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Pros/cons&lt;/h2&gt;

&lt;h4&gt;Cons&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;steep learning curve&lt;/li&gt;
&lt;li&gt;you need a Mac to deploy your site (generation + cli tools)&lt;/li&gt;
&lt;li&gt;requires knowledge of Ruby&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also be thrown off by the not-to-obvious error messages when something goes wrong:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-text highlight"&gt;$&amp;gt; nanoc
Loading site data… done
Compiling site…

Captain! We’ve been hit!

Message:

NoMethodError: undefined method `encoding' for nil:NilClass

Compilation stack:

  - [item]   /posts/2015-04-30-nanoc/ (rep default)

Stack trace:

  0. /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/cgi/util.rb:7:in `escape'
  1. lib/filters/tweet_tag.rb:65:in `block in url_params_for'
  2. lib/filters/tweet_tag.rb:64:in `map'
  3. lib/filters/tweet_tag.rb:64:in `url_params_for'
  4. lib/filters/tweet_tag.rb:70:in `cache_file_for'
  5. lib/filters/tweet_tag.rb:59:in `cached_response'
  6. lib/filters/tweet_tag.rb:44:in `html_output_for'
  7. lib/filters/tweet_tag.rb:39:in `run_octopress'
  8. lib/filters/OctopressFilter.rb:11:in `block in run'
  9. lib/filters/OctopressFilter.rb:9:in `gsub'
  ... 36 more lines omitted. See full crash log for details.

If you believe this is a bug in nanoc, please do report it at
-&amp;gt; https://github.com/nanoc/nanoc/issues/new &amp;lt;-

A detailed crash log has been written to ./crash.log.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But then again, it's just parsing the throw error correctly, find the culprit and continue.&lt;/p&gt;

&lt;h4&gt;Pros&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;very, very flexible&lt;/li&gt;
&lt;li&gt;static: no fear of performance problems or server breakdowns - it's just files&lt;/li&gt;
&lt;li&gt;well documented&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But above all: once you get the hang of it, it's so much fun to hack on it. If you know how it works, it's pretty easy to set it to your hand and modify it as you see fit. It almost feels like an app/program you're working on.&lt;/p&gt;

&lt;p&gt;I'm currently using Nanoc 3.7.5, and they're working on 4.0. Judging from the &lt;a href="http://nanoc.ws/docs/nanoc-4-upgrade-guide/"&gt;upgrade guide&lt;/a&gt; a lot of the peculiarities I found a bit daunting at first are smoothed out. This will probably make it easier to start with Nanoc.&lt;/p&gt;

&lt;h2&gt;Open Source&lt;/h2&gt;

&lt;p&gt;So &lt;a href="http://nanoc.ws"&gt;check it out&lt;/a&gt; if you're looking for something new. It's &lt;a href="https://github.com/nanoc"&gt;open source&lt;/a&gt;, so there's no excuse not to dive in or to contribute. 😊&lt;/p&gt;

&lt;p&gt;Speaking of contribute: the complete source of this blog is open source (thanks again to &lt;a href="http://ashfurrow.com"&gt;Ash Furrow&lt;/a&gt; for the inspiration). You can see all the code I wrote or changed at &lt;a href=""&gt;http://github.com/inferis/inferis.github.io&lt;/a&gt; (the &lt;code&gt;nanoc&lt;/code&gt; branch contains the source code, the &lt;code&gt;master&lt;/code&gt; branch is the generated site). The cool thing about this is that people send pull requests to fix typos: it hasn't happened often, but when it happens, I love it. 😘&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-04-27:/blog/2015/04/27/ios8-and-interfaceorientation/</id>
    <title type="html">Using interfaceOrientation with iOS8 transitions</title>
    <published>2015-04-26T23:43:30Z</published>
    <updated>2015-04-26T23:43:30Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/04/27/ios8-and-interfaceorientation/"/>
    <content type="html">

&lt;p&gt;Working on an app last week, I needed a way to respond to rotation events in a view controller. Since iOS8, the rotation APIs in &lt;code&gt;UIViewController&lt;/code&gt; are deprecated:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;willRotateToInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;UIInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;toInterfaceOrientation&lt;/span&gt; &lt;span class="nf"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;NSTimeInterval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;duration&lt;/span&gt; &lt;span class="n"&gt;NS_DEPRECATED_IOS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;_0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;_0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Implement viewWillTransitionToSize:withTransitionCoordinator: instead"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;didRotateFromInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;UIInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;fromInterfaceOrientation&lt;/span&gt; &lt;span class="n"&gt;NS_DEPRECATED_IOS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;_0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;_0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;willAnimateRotationToInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;UIInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;toInterfaceOrientation&lt;/span&gt; &lt;span class="nf"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;NSTimeInterval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;duration&lt;/span&gt; &lt;span class="n"&gt;NS_DEPRECATED_IOS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;_0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;_0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Implement viewWillTransitionToSize:withTransitionCoordinator: instead"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, they want you to use &lt;code&gt;viewWillTransitionToSize:withTransitionCoordinator:&lt;/code&gt; instead.
So, no problem, we'll just implement that method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;em&gt;I'd like to stress this a little more: the reason they've changed these behaviors is for a reason. Your app mostly likely is way better off using adaptive layout using size classes, Auto Layout and manual corrections using the new transition callbacks.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, the only thing is: what if you need to know those "toInterfaceOrientation" or "fromInterfaceOrientation" value from the old APIs?&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Because: what if you do want the old behavior? Not everybody has the luxury of going iOS8 only; sure, you can still use the old callbacks - for now. They won't get called once you implement &lt;code&gt;viewWillTransitionToSize:withTransitionCoordinator:&lt;/code&gt;, but you might want fallback behavior in addition to the new behavior.&lt;/p&gt;

&lt;p&gt;And anyhow, I thought it would be a good exercise to see how we could use this new callback to derive our new interface orientation. Adaptive UI and all, but sometimes is just darn handy to know how your device is held.&lt;/p&gt;

&lt;p&gt;Turns out, it's not very hard, but it's not a trivial amount of code.&lt;/p&gt;

&lt;p&gt;I looked up session 214 of WWDC 2014: &lt;em&gt;View Controller Advancements in iOS8&lt;/em&gt; by Bruce Nilo (📹 &lt;a href="http://devstreaming.apple.com/videos/wwdc/2014/214xxq2mdbtmp23/214/214_hd_view_controller_advancements_in_ios_8.mov"&gt;video&lt;/a&gt; &amp;amp; 📈 &lt;a href="http://devstreaming.apple.com/videos/wwdc/2014/214xxq2mdbtmp23/214/214_view_controller_advancements_in_ios_8.pdf"&gt;slides&lt;/a&gt;). It's a very interesting talk since he goes into all of the changes they've made, including the changes in rotation behavior.&lt;/p&gt;

&lt;p&gt;A particular slide peaked my interest:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="https://s3.amazonaws.com/f.cl.ly/items/0r1R2E132l3n2P1O472S/rotation.jpg" width="750"&gt;&lt;/p&gt;

&lt;p&gt;Notice the &lt;code&gt;[self orientationFromTransform:[t targetTransform]]&lt;/code&gt;. He doesn't go into it (obviously), but I knew what to do.&lt;/p&gt;

&lt;p&gt;With some experimentation, it looks like the transform you get via &lt;code&gt;targetTransform&lt;/code&gt; is the rotation transform resulting from rotating your device. So if you turn from portrait to landscape it will be a 90º (or &lt;code&gt;π/2&lt;/code&gt; or even &lt;code&gt;M_PI_2&lt;/code&gt;) rotation, and if you go from landscape left to landscape right it will a 180º rotation. Depending on the direction of the rotation, the angle will be either positive or negative.&lt;/p&gt;

&lt;p&gt;So we can use this &lt;code&gt;targetTransform&lt;/code&gt; to go from the current interface orientation to the target interfaceorientation: we just need to "add" the rotation to the interface orientation value.&lt;/p&gt;

&lt;h2&gt;Some work, some math&lt;/h2&gt;

&lt;p&gt;The approach we'll be taking will be somewhat generic. Generic because we'll calculate the number of 90º "segments" we'll have to go through, and switch to the "next" interfaceorientation for each segment. In the end, we'll have the correct orientation.&lt;/p&gt;

&lt;p&gt;This sounds easier than it proved to be. The first problem is calculating how many segments we need from the transform. We can calculate this from the &lt;a href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CGAffineTransform/index.html#//apple_ref/c/tdef/CGAffineTransform"&gt;affine transform&lt;/a&gt;, which is - and you may or may not know this - a struct representing a matrix. In code, this looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;CGAffineTransform&lt;/span&gt; &lt;span class="n"&gt;CGAffineTransform&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;CGAffineTransform&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;CGFloat&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;CGFloat&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a representation of this matrix:&lt;/p&gt;

&lt;p&gt;$$\begin{bmatrix}
  a &amp;amp; b &amp;amp; 0 \\
  c &amp;amp; d &amp;amp; 0 \\
  tx &amp;amp; ty &amp;amp; 1
 \end{bmatrix}$$&lt;/p&gt;

&lt;p&gt;This transformation matrix is used to transform the coordinates of the source point &lt;code&gt;(x,y)&lt;/code&gt; to a target point &lt;code&gt;(x',y')&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;$$\begin{bmatrix}
  x' &amp;amp; y' &amp;amp; 1
 \end{bmatrix} = \begin{bmatrix}
   x &amp;amp; y &amp;amp; 1
  \end{bmatrix} \times \begin{bmatrix}
   a &amp;amp; b &amp;amp; 0 \\
   c &amp;amp; d &amp;amp; 0 \\
   tx &amp;amp; ty &amp;amp; 1
  \end{bmatrix}$$&lt;/p&gt;

&lt;p&gt;For those not well versed in matrix algebra: you traverse each item of the source 1x3 matrix and multiply it with the corresponding row, and then adding these results together. You do this for each column so that you end up with a new 1x3 matrix.&lt;/p&gt;

&lt;p&gt;Which results in the following equations:&lt;/p&gt;

&lt;p&gt;$$x' = ax + cy + tx$$
$$y' = bx + dy + ty$$
$$1 = 0x + 0y + 1$$&lt;/p&gt;

&lt;p&gt;That last one is useless, so we can ignore it.&lt;/p&gt;

&lt;p&gt;CGAffineTransform is merely a struct representing the useful values of this matrix, and the transforms you use in your code are just representations of this matrix which is used &lt;a href="https://developer.apple.com/library/mac/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/dq_affine/dq_affine.html"&gt;by Quartz&lt;/a&gt; to perform the calculations using the equations above. In effect: the matrix &lt;em&gt;links&lt;/em&gt; two coordinate systems — it specifies how points in one coordinate system map to points in another.&lt;/p&gt;

&lt;p&gt;So back to our rotation: how does the &lt;a href="http://en.wikipedia.org/wiki/Rotation_matrix"&gt;matrix for a rotation&lt;/a&gt; look like? Like this (where &lt;code&gt;α&lt;/code&gt; is the angle of the rotation) (for Quartz):&lt;/p&gt;

&lt;p&gt;$$\begin{bmatrix}
 cos \alpha &amp;amp; sin \alpha &amp;amp; 0 \\
 -sin \alpha &amp;amp; cos \alpha &amp;amp; 0 \\
 0 &amp;amp; 0 &amp;amp; 1
\end{bmatrix}$$&lt;/p&gt;

&lt;p&gt;So when we want the angle from this matrix, we'd need to reverse the the matrix calculations. This is as simple as taking any of the a/b/c/d matrix elements and reverse it:&lt;/p&gt;

&lt;p&gt;$$\alpha = acos(a) = acos(d)$$
$$\alpha = asin(b) = -asin(c)$$&lt;/p&gt;

&lt;p&gt;Now using &lt;code&gt;acos&lt;/code&gt; or &lt;code&gt;asin&lt;/code&gt; to get the angle has a tiny problem: each input can result in 2 solutions (this is due to how sine and cosine functions work, of course). The &lt;code&gt;atan2&lt;/code&gt; function doesn't have this problem since it uses two inputs to calculate the result. It's also better in our case since an affine transform can also contain a scale transform, which has no impact on the result if we use &lt;code&gt;atan2&lt;/code&gt;. So here we go:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="n"&gt;angle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;atan2f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;atan2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Watch out, the atan2 function takes the &lt;code&gt;y&lt;/code&gt; parameter first -&amp;gt; RTFM!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you want to know more about the maths behind this, check out &lt;a href="http://en.wikipedia.org/wiki/Euler_angles"&gt;Euler angles&lt;/a&gt; and &lt;a href="http://staff.city.ac.uk/%7Esbbh653/publications/euler.pdf"&gt;this paper&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Back to our calculations: we actually don't want the angle, but the number of 90º segments of our rotation:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="n"&gt;CGFloat&lt;/span&gt; &lt;span class="n"&gt;angle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;atan2f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;NSInteger&lt;/span&gt; &lt;span class="n"&gt;multiplier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;roundf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;angle&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;M_PI_2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We explicitly round the division by &lt;code&gt;π/2&lt;/code&gt;; relying on the implicit &lt;em&gt;CGFloat&lt;/em&gt; to &lt;em&gt;NSInteger&lt;/em&gt; conversion isn't good enough since it just takes the integral part of the float (in effect &lt;code&gt;floorf(...)&lt;/code&gt;) which is &lt;em&gt;not&lt;/em&gt; what you want.&lt;/p&gt;

&lt;p&gt;Note that the angle of rotation will be the inverse of how you rotate the device: if you rotate the device clockwise, the angle of the transform will be negative (and thus counter-clockwise): the transform "counters" the rotation to get back to where we were before the rotation (albeit with other dimensions).&lt;/p&gt;

&lt;h2&gt;interfaceOrientation: from ➢ to&lt;/h2&gt;

&lt;p&gt;Now that we know the angle and multiplier, it's time to transform our interface orientation according to this angle. This isn't hard, but it is cumbersome due to how the &lt;code&gt;UIInterfaceOrientation&lt;/code&gt; enum is defined:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="c1"&gt;// Note that UIInterfaceOrientationLandscapeLeft is equal to
// UIDeviceOrientationLandscapeRight (and vice versa). This is because rotating
// the device to the left requires rotating the content to the right.
&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="nf"&gt;NS_ENUM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;UIInterfaceOrientationUnknown&lt;/span&gt;            &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIDeviceOrientationUnknown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;UIInterfaceOrientationPortrait&lt;/span&gt;           &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIDeviceOrientationPortrait&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;UIInterfaceOrientationPortraitUpsideDown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIDeviceOrientationPortraitUpsideDown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;UIInterfaceOrientationLandscapeLeft&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIDeviceOrientationLandscapeRight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;UIInterfaceOrientationLandscapeRight&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIDeviceOrientationLandscapeLeft&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, it's just a mapping of the corresponding &lt;code&gt;UIDeviceOrientation&lt;/code&gt; values, which are defined like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="nf"&gt;NS_ENUM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UIDeviceOrientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;UIDeviceOrientationUnknown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;UIDeviceOrientationPortrait&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="c1"&gt;// Device oriented vertically, home btn -&amp;gt; bottom
&lt;/span&gt;    &lt;span class="n"&gt;UIDeviceOrientationPortraitUpsideDown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Device oriented vertically, home btn -&amp;gt; top
&lt;/span&gt;    &lt;span class="n"&gt;UIDeviceOrientationLandscapeLeft&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="c1"&gt;// Device oriented horizontally, home btn -&amp;gt; right
&lt;/span&gt;    &lt;span class="n"&gt;UIDeviceOrientationLandscapeRight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// Device oriented horizontally, home btn -&amp;gt; left
&lt;/span&gt;    &lt;span class="n"&gt;UIDeviceOrientationFaceUp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          &lt;span class="c1"&gt;// Device oriented flat, face up
&lt;/span&gt;    &lt;span class="n"&gt;UIDeviceOrientationFaceDown&lt;/span&gt;         &lt;span class="c1"&gt;// Device oriented flat, face down
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;As an aside: You'll notice that there's no equivalent interface orientation for the &lt;code&gt;UIDeviceOrientationFaceUp&lt;/code&gt; and &lt;code&gt;UIDeviceOrientationFaceDown&lt;/code&gt;, because they make no sense for the interface orientation: it remains the same whether you have the device face up or face down.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I show this because my first idea was to &lt;em&gt;cycle&lt;/em&gt; through the orientation values by adding or substracting 1 from each value, wrapping around at the minimum and maximum values of the enum. But looking at these definitions: this is not possible. First of all, the interface orientation values are based on the device orientation values, which have 2 more values we don't care about. And secondly, even if we could use the natural order of the device orientation values, they are shuffled around in the &lt;code&gt;UIInterfaceOrientationLandscapeLeft&lt;/code&gt; and &lt;code&gt;UIInterfaceOrientationLandscapeRight&lt;/code&gt; switcharoo in the definition of &lt;code&gt;UIInterfaceOrientation&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The net result is that we need to resort to an ugly switch statement:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiplier&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// clockwise rotation
&lt;/span&gt;    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiplier&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortrait&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeLeft&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeLeft&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortraitUpsideDown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortraitUpsideDown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeRight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortrait&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiplier&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// counter-clockwise rotation
&lt;/span&gt;    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiplier&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortrait&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeRight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortraitUpsideDown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortraitUpsideDown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeLeft&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeLeft&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortrait&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I said ugly, I meant ugly. 😭 But there's no real other way to do this, I guess: if there is, please let me know.
I initially thought this would also be a bit more robust future wise (you never know when Apple adds another interface orientation), but this code is just as brittle as the &lt;em&gt;addition based&lt;/em&gt; code I intentionally wanted to use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;a href="https://twitter.com/cooliopenguin"&gt;Joerg Schwieder&lt;/a&gt; gives a more consise and thus probably better approach:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;relativeInterfaceOrientationFromRotationAngle&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;CGFloat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;angle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;conversionMatrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIInterfaceOrientationPortrait&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIInterfaceOrientationLandscapeRight&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIInterfaceOrientationPortraitUpsideDown&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIInterfaceOrientationMaskLandscapeLeft&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;

    &lt;span class="n"&gt;NSInteger&lt;/span&gt; &lt;span class="n"&gt;oldIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;conversionMatrix&lt;/span&gt; &lt;span class="nf"&gt;indexOfObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oldIndex&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;NSNotFound&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationUnknown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;NSInteger&lt;/span&gt; &lt;span class="n"&gt;newIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oldIndex&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;roundf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;angle&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;M_PI_2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;newIndex&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;conversionMatrix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;newIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nf"&gt;intValue&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This uses the round robin approach that I intentionally wanted to use, but of course within a self-constrained array. Pretty smart, and I've should have probably thought of this myself. 😰😉&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(This code is also available as &lt;a href="https://gist.github.com/coolio107/f843789e5225c1f6fc9b"&gt;a gist&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Finally&lt;/h2&gt;

&lt;p&gt;The final resulting function:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;orientationByTransforming&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;CGAffineTransform&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;transform&lt;/span&gt; &lt;span class="nf"&gt;fromOrientation&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;UIInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;CGFloat&lt;/span&gt; &lt;span class="n"&gt;angle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;atan2f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;NSInteger&lt;/span&gt; &lt;span class="n"&gt;multiplier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;roundf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;angle&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;M_PI_2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;UIInterfaceOrientation&lt;/span&gt; &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiplier&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// clockwise rotation
&lt;/span&gt;        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiplier&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortrait&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeLeft&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeLeft&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortraitUpsideDown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortraitUpsideDown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeRight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortrait&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nl"&gt;default:&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiplier&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// counter-clockwise rotation
&lt;/span&gt;        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiplier&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortrait&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeRight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortraitUpsideDown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortraitUpsideDown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeLeft&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeLeft&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortrait&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nl"&gt;default:&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;orientation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It's also available as &lt;a href="https://gist.github.com/Inferis/26ded6e1e8e625b3cd67"&gt;a gist&lt;/a&gt;, by the way. And I'll leave the Swift version as an exercise to the reader. 😉&lt;/p&gt;

&lt;h2&gt;Postscriptum&lt;/h2&gt;

&lt;p&gt;I later refactored the code not to rely on the interface orientation, which is probably better anyway; but having done the exercise I did want to share it with the world. I googled it, but not find an 'out-of-the-box' solution right away, which either shows that it's a hard problem to tackle or that it's not really a problem needed to be tackled. But here I am, having tackled it, so sharing it for anyone else to use wouldn't hurt anyone, right?&lt;/p&gt;

&lt;p&gt;And finally, I'll admit this: I learned a lot of the math behind this in high school and university, but had to actively relearn it all when researching this code and blogpost. Not using these mathematics (apart from the obvious ones you'd use in daily life I guess), resulted in the knowledge either being gone or stuck somewhere in the outback of my brain. However, it was fun to get reacquainted with this knowledge anyway. And while I found an actual usable code solution before diving into the maths myself, I'd really like to understand what I'm actually doing instead of just relying on a copy-paste solution.&lt;/p&gt;

&lt;p&gt;So yeah: learning for fun &lt;strong&gt;and&lt;/strong&gt; profit. Who knew?&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-04-22:/blog/2015/04/22/scripts-in-your-app-bundle/</id>
    <title type="html">Scripts in your app bundle</title>
    <published>2015-04-22T13:02:23Z</published>
    <updated>2015-04-22T13:02:23Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/04/22/scripts-in-your-app-bundle/"/>
    <content type="html">

&lt;p&gt;It appears Apple changed something in the iOS bundle upload : it now requires that all executables in your app bundle are signed (this might be applicable for Mac uploads too, but I haven't tried). I hear you think: isn't this the case anyway, but there might be more executables in your bundle than you expect.&lt;/p&gt;

&lt;p&gt;Of course, there's the binary for your app, which obviously is executable. But there could be more too: if you include shell scripts, for example, which are marked executable (&lt;code&gt;chmod u+x script.sh&lt;/code&gt;) then iTunes Connect now considers them as actual executables and now requires them to be codesigned.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;This is evidenced by an error like this one:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.stack.imgur.com/KzOct.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Taken from a &lt;a href="http://stackoverflow.com/questions/29788601/error-itms-90035-xcode"&gt;Stack Overflow post on the error&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Problem solving&lt;/h2&gt;

&lt;p&gt;So there's two options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://developer.apple.com/library/mac/documentation/Security/Conceptual/CodeSigningGuide/Introduction/Introduction.html"&gt;codesign&lt;/a&gt; your included scripts&lt;/li&gt;
&lt;li&gt;remove your scripts from the bundle&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Option 2 will most likely always be the thing you'll want to do, unless you actually want to run the script in your app (to be honest: I'm not even sure that's even possible on iOS given the security issues).&lt;/p&gt;

&lt;p&gt;Getting rid of the scripts is easy: find the script in Xcode and make sure it's not included in any of your targets. If it's not there, you're probably safe. If you still get errors, it might end up in your bundle through another way than Xcode. This can be an external script including the file in your bundle, for example. Which brings me to the harder part of the problem... Namely, when you're using CocoaPods that include executable scripts as a resource (for god knows what reason). An example of this is the &lt;a href="https://github.com/willowtreeapps/Crittercism-iOS"&gt;Crittercism pod&lt;/a&gt;: they include a &lt;code&gt;dsym_upload.sh&lt;/code&gt; as a resource, probably as an easy way to distribute the file. If you look at the project file, you won't see the file marked as included in any target:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="https://s3.amazonaws.com/f.cl.ly/items/3f1v3s251p1M2W1M3O3S/Image%202015-04-22%20at%203.32.19%20pm.png"&gt;&lt;/p&gt;

&lt;p&gt;But it &lt;strong&gt;does&lt;/strong&gt; get copied into your bundle by the &lt;code&gt;Copy Pods Resources&lt;/code&gt; build phase, which has no reference at all to the culprit in question (because it generically copies all pod resources into the app bundle):&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="https://s3.amazonaws.com/f.cl.ly/items/0k3Y131w0q0h3E2A2H04/Image%202015-04-22%20at%203.34.01%20pm.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;So that's kind of non-obvious.&lt;/p&gt;

&lt;p&gt;The tricky part here is that the inclusion of this file is a bit out of your reach. The author of the Podspec decided to include it for some reason and all you asked for was &lt;code&gt;pod 'CrittercismSDK'&lt;/code&gt;. There is no way of manually excluding the file, not even by unticking a box even if that meant you had to do this after every &lt;code&gt;pod install&lt;/code&gt;. So you're stuck waiting until the authors update their Podspec file, or you could do it yourself (for now).&lt;/p&gt;

&lt;h2&gt;Fixing the podspec, temporarily&lt;/h2&gt;

&lt;p&gt;How? By duplicating the offending podspec locally and fix it. In the case of the Crittercism spec this means omitting the .sh file from resources:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby highlight"&gt;&lt;span class="no"&gt;Pod&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="nf"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;resources&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'CrittercismSDK-crashonly/Resources/*'&lt;/span&gt;

  &lt;span class="c1"&gt;# add this line below&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;exclude_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"**/*.sh"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;According to the &lt;a href="http://guides.cocoapods.org/syntax/podspec.html#exclude_files"&gt;Podspec syntax reference&lt;/a&gt; &lt;code&gt;exclude_files&lt;/code&gt; defines "A list of file patterns that should be excluded from the other file patterns.". Which is exactly what we need. There might already be a line like this in the podspec, so you might need to append to it instead of adding it, so take a good look first.&lt;/p&gt;

&lt;p&gt;Now that you fixed your local copy of the podspec, use that one in your podfile. Which is as easy as adding a &lt;code&gt;podspec&lt;/code&gt; reference for the pod:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby highlight"&gt;&lt;span class="n"&gt;pod&lt;/span&gt; &lt;span class="s1"&gt;'CrittercismSDK'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:podspec&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'CrittercismSDK.podspec'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, you'll only want to do this if this blocks your release. You'll need to keep monitoring the offending podspec(s) for actual fixes so that you can continue using the version you want. By capturing the podspec and storing it locally, you effectively use the version of a pod at the moment of capture, also in the future.&lt;/p&gt;

&lt;p&gt;But it's a good compromise to make to get that app out of the door, which is what counts at the end of the day. Just ship it. 😎&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-04-20:/blog/2015/04/20/gliding/</id>
    <title type="html">Gliding</title>
    <published>2015-04-20T05:52:07Z</published>
    <updated>2015-04-20T05:52:07Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/04/20/gliding/"/>
    <content type="html">

&lt;p&gt;I went gliding! And it was awesome.&lt;/p&gt;

&lt;p&gt;My friend and co-worker &lt;a href="http://twitter.com/fousa"&gt;Jelle Vandebeeck&lt;/a&gt; has been a glider pilot for (what he claims - and I have no reason to doubt it) 15 years now. Last year, just for fun, I mentioned I would like to get off the ground with him (in a glider, of course). He wasn't dismissive of it, so we went to search for a good date.&lt;/p&gt;

&lt;p&gt;Unfortunately, due to scheduling conflicts and weather conditions I didn't get the chance to actually go flying. No worries, there would be other moments.&lt;/p&gt;

&lt;p&gt;And so, now that flying season started again, there were no races to be flown yet, the weather looked good and I was able to free some time (there's always so much to do, but it's about setting priorities), which meant that this weekend &lt;strong&gt;we were on&lt;/strong&gt;!&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class="center" src="https://farm8.staticflickr.com/7704/17009720487_a3d3f30621_z.jpg"&gt;&lt;/p&gt;

&lt;p&gt;And so I arrived at the airfield in Brasschaat at around 14:45. First thing Jelle warned me about: there would be a lot of waiting. There's only so many (twin) gliders in the club, and there are quite a bit of people wanting to go in the air, and so we had to wait our turn. I was very much fine with that. The weather was good: blue skies, sun was out but it wasn't too hot yet; a light breeze helped cool us from the spring sun. And so we waited until it was our turn.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="https://farm8.staticflickr.com/7633/17029598880_74bf022f5c_z.jpg"&gt;&lt;/p&gt;

&lt;p&gt;Then, we geared up ("so how does this parachute work exactly?", "don't touch this or we'll lose the cockpit", ...), they sat me down in the second seat of the glider and Jelle explained what dial was used for what purpose. To be honest: I'm not the stupidest guy in the pack, but it was a lot of information to take in, even though I wasn't going to do any flying myself. But then again, it was the first time I set foot in a glider, or in a small airplane all together: all the other planes I've flown along with were quite a bit bigger. 😅 My gear - I had my camera with me - was tucked away by my side, because I was told that the ride may be a bit bumpy.&lt;/p&gt;

&lt;p&gt;This apparently had to do with the weather: the sky was virtually clear except for a few patches of clouds here and there and the sun was out. This meant a lot of heat was generated at ground level. Heat means rising air which is good for a glider but this also meant a lot of agitation: the forces of nature helping us up could also be a bit quirky at times. They would also have effect on my feeling of balance: I was given a small puking bag just in case. I wouldn't have been the first to throw up in the back seat of a twin glider, I've been told.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="https://farm9.staticflickr.com/8764/16594680834_a69f415c11_z.jpg"&gt;&lt;/p&gt;

&lt;p&gt;And then, then we got hooked up to a pulling plane, which revved up its engines and off we went. The funny thing is that because the glider has more natural lift, it goes up in the air sooner: there's a few seconds of hovering a few meters above the tarmac when the other plane was still speeding up on the ground. But then you're both off and before you know it, you're at 500m and it's time to let go of the umbilical cord attaching the glider to the plane. And then you're free.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="https://farm6.staticflickr.com/5449/17215420612_36f248dde8_z.jpg"&gt;&lt;/p&gt;

&lt;p&gt;I have to say: it was an incredible experience. I've always loved flying even though I don't do it that much, and most planes I've flown in were big boys. But I love a seat near the window to peak outside, even during landing and takeoff. I guess it's a typical boyhood fascination that never receded. But being in such a small plane, having a great view all around, watching objects on the ground go larger and smaller as you drop or rise, and being able to see so much farther away than on the ground: it's awesome. Also, the noise was not to hard: there's no motor noise but you do hear the wind around the plane, and when you're going up you can hear the plane creak due to the forces the thermal rising applies to the plane. Nothing to be afraid of and all in all very peaceful.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="https://farm8.staticflickr.com/7586/16596911623_aa2f5f5cf9_z.jpg"&gt;&lt;/p&gt;

&lt;p&gt;We spent about 30 minutes in the air, which was - to be honest - more than enough. The stories of throwing up sounded so incredulous before start ("Nah, I'll be fine, I've got a strong stomach") felt very real towards the end of the flight. I felt like I had a real knot in my stomach near the end, and I think its contents would have spilled out if we had flow for another half hour. But we didn't and I made it to the ground&lt;/p&gt;

&lt;p&gt;I'm pretty sure I also have to thank Jelle for that because he really is an expert flyer (at least, to my n00b experiences). I was never scared or anxious; all in all I found the ride to be very smooth, even though he claimed it was quite bumpy (due to the good weather). There were intense moments, of course: when you fly into a pocket of hot air you feel the forces pulling on the plane and on you which results in funny feelings in your stomach. But those are part of the deal and once you get a bit used to them and try to anticipate them they become easier to stomach (pun intended).&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="https://farm6.staticflickr.com/5469/16594642524_4bf5a3e4da_z.jpg"&gt;&lt;/p&gt;

&lt;p&gt;So yeah: a very nice afternoon indeed. I'd gladly do it again, even though my stomach wouldn't agree now. I'm thinking that once you get used to it and know what to expect, I might become less "unpleasant". We'll see, there might be another time.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="https://farm9.staticflickr.com/8690/17029545180_fb463338ed_z.jpg"&gt;&lt;/p&gt;

&lt;p&gt;Thanks again Jelle, for the wonderful experience. 😎&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(you can find all photos I took - the whopping 21 of them - on &lt;a href="https://www.flickr.com/photos/inferis/sets/72157649752540144/"&gt;Flickr&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-04-14:/blog/2015/04/14/early-bird-catches-the-worm/</id>
    <title type="html">The early bird catches the worm</title>
    <published>2015-04-14T07:01:41Z</published>
    <updated>2015-04-14T07:01:41Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/04/14/early-bird-catches-the-worm/"/>
    <content type="html">

&lt;p&gt;I'm starting to become an early-morning person.&lt;/p&gt;

&lt;p&gt;This is a big change for me. I used to be a "late night" person. My day used to consist of 2 parts: the day(job) part and the night part. Going home after work (or whatever) meant there were at least a few hours left in the day to be (even more) productive. And so I spent countless nights behind my computer's screen (because "being productive" equals "coding", that &lt;em&gt;is&lt;/em&gt; imperative), coding away into the wee hours of night. The morning after would prove difficult but nothing that coffee couldn't solve. And the weekend usually gave good opportunities for sleeping in to catch up on some sleep. And so I was no morning person at all, meaning that "get up at 8am" was usually a very difficult task. Also, I had no fixed schedule in my life back then. I woke up when needed, I went to sleep when I felt like it, I rarely had breakfast/lunch/dinner at relatively fixed times.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;But then you have kids, and they have to go to school eventually, and your life starts to fall into a more regular schedule. Not that that changed my at-night habits a lot. Although it did mean that there was no slacking possible in the morning (getting 4 kids to school can be, eh, daunting), I continued to try to be productive at night. But I had to admit that those long hours would take their toll eventually, and I wasn't as productive as I used to be. I started to spend nights before my computer, doing nothing more than &lt;a href="http://www.urbandictionary.com/define.php?term=Wilfing"&gt;wilfing&lt;/a&gt; around, not doing anything useful at all. Not good, and a waste of time.&lt;/p&gt;

&lt;h2&gt;Switch&lt;/h2&gt;

&lt;p&gt;&lt;img class="right" src="https://igcdn-photos-d-a.akamaihd.net/hphotos-ak-xaf1/t51.2885-15/11116903_1575156929405611_575215853_n.jpg" width="350"&gt;&lt;/p&gt;

&lt;p&gt;Last summer I switched to a completely different schedule: I was tech lead for a large iOS project at the time, and my job consistent of both guiding the dev team (7 devs) and doing some "high level" coding. I found that that first part would be taking up all of my time, and that finding time for the coding part was becoming harder. Additionally, I was so drained after coming home from work that I rarely got to doing some more work. And so I thought: let's try this morning thing.&lt;/p&gt;

&lt;p&gt;And so I started to get up at 5:30 in the morning so that I could be at work at around 7am. That would give me 2 hours of coding/preparation time before the rest of the team would come in at around 9am. It was hard at first. I wasn't used to these hours at all, and my body protested.&lt;/p&gt;

&lt;p&gt;But I got used to it. The hardest part was going to bed early enough in order to be able to get up early enough. Being used to not going to bed before midnight, early on in the process this required some willpower to get to bed at around 10pm. But once I got into &lt;em&gt;the early rhythm&lt;/em&gt;, this became easier. I simply started shutting down at 10pm, so going to bed then felt more "natural".&lt;/p&gt;

&lt;h2&gt;Helping factors&lt;/h2&gt;

&lt;p&gt;A big factor of this early rising thing is limiting coffee/caffeine intake. I used to drink coffee all day through, which had a clear effect on my sleeping pattern. I tried a few times going off coffee completely, which worked initially (OHAI COLD TURKEY) but I always eventually started drinking coffee again (it's just too good). But I found that limiting intake in the early hours of the day works wonderfully well. It helps you be alert in the morning -- that first coffee really helps -- and because I don't drink any caffeinated beverages after midday the effects are gone by the time I get to bed. So I get the best of both worlds. Moderation, it's a good thing.&lt;/p&gt;

&lt;p&gt;Another factor in this story is my bike: getting to/from work, I have to bike to the nearest train station, which is about 20/25 minutes away. These bike rides are invigourating: they provide a much needed rest from working all day, giving your body some exercise (a welcome change from sitting all day) and your mind some relaxation (a welcome change from thinking all day). The net effect is that you're well awake once you're at work, even when you start off with a sleepy head. You get the same effect when coming back from work: you feel more relaxed once you're home. It's easier to put work behind you if you feel like it.&lt;/p&gt;

&lt;p&gt;And so I spent the summer working early mornings. And sometimes late nights. My days were usually longer than the usual 8 hours. But that was okay: the project was exciting to work on, and there was a lot of work to do too. We met our deadlines, and we delivered quality software. I felt better with my regained time, even if that meant that I wasn't usually worth a lot at those evenings/nights.&lt;/p&gt;

&lt;h2&gt;One year later&lt;/h2&gt;

&lt;p&gt;So this system worked wonderfully well last summer. The long days help a lot getting up - early natural daylight is awesome! And so when winter came keeping this schedule started to become harder. Also, the project came to an end, and my day-to-day planning changed. The net result was that I was back to my more regular schedule. Get up to prepare kids for school, get into a more regular "9 to 5" schedule. Also, biking to work in the biting cold at 6:15, I can tell you that's not the most motivating factor to get up. I don't mind rain much -- you can dress for it -- but cold + rain is a bad combination. 😰&lt;/p&gt;

&lt;p&gt;Another thing to consider were school days. These were not really an issue in the summer due to the holidays, but once the kids had to go back to school it meant that I had to get up half an hour earlier, because part of the "get up early" deal with my wife is that I had to take care of preparing their schoolbags (lunch, ...), and her part was breakfast and getting them to school. And so in winter, I started not to bother getting up early and doing joint mornings with my wife, bringing the kids to school together and biking to the station from school (a lot closer).&lt;/p&gt;

&lt;h2&gt;Back to early&lt;/h2&gt;

&lt;p&gt;&lt;img class="right" src="https://igcdn-photos-a-a.akamaihd.net/hphotos-ak-xaf1/t51.2885-15/11084974_844591128947976_1060421944_n.jpg" width="350"&gt;&lt;/p&gt;

&lt;p&gt;But I kinda missed those early mornings. And so with the days getting longer now, and starting project in Brussels leading a team of devs, I decide to try to get back into the rhythm. I'm not there yet: some days are harder to get up than others, and because work is not as pressing as it is last year and the team is smaller there's no real need to actually having to get up early. But I enjoy the wee hours. So much nicer to get to work, so much quieter early hours. And when I want I'm home at a reasonable time to spend some time with my kids.&lt;/p&gt;

&lt;p&gt;Summer's only beginning, and I'm looking forward to some early mornings. Not all of them, depending on schedule and needs. But it's good to be up early and feel productive.  &lt;/p&gt;

&lt;p&gt;Overall, I'd say I feel better as a morning person than as a night person. And that's a strange thing for me to claim. 😕&lt;/p&gt;

&lt;h2&gt;Future&lt;/h2&gt;

&lt;p&gt;Finally, and here's the naive me speaking, I'm hoping to continue this once I move to California. The better weather there will probably have a benefical effect on being able to get up early (although winter days will be as short as in Belgium). I also have the crazy idea of biking to work there (no idea if that it's actually feasible, though), to keep the "wake up exercise" effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: &lt;a href="https://twitter.com/arepty"&gt;Alex Repty&lt;/a&gt; mentions that Cupertino has about a hour extra daylight at the winter solstice than Belgium:&lt;/p&gt;

&lt;div class="embed tweet"&gt;
&lt;blockquote class="twitter-tweet"&gt;
&lt;p&gt;&lt;a href="https://twitter.com/Inferis"&gt;@Inferis&lt;/a&gt; On the day of the Winter solstice, Cupertino actually should have over an hour more daylight than Belgium.&lt;/p&gt;— Alexander Repty (@arepty) &lt;a href="https://twitter.com/arepty/status/587900199693058049"&gt;April 14, 2015&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;As evidenced by: &lt;a href="http://cloud.alexrepty.com/0F1F08051t2O"&gt;Belgium&lt;/a&gt; vs &lt;a href="http://cloud.alexrepty.com/051K3O1F0934"&gt;Cupertino&lt;/a&gt;. So that's good. 😊&lt;/p&gt;

&lt;p&gt;But we'll see about that when we get there. ¯\_(ツ)_/¯  &lt;/p&gt;

</content>
  </entry>
</feed>

