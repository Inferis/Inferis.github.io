<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://blog.inferis.org/</id>
  <title>Inferical Writings</title>
  <updated>2015-04-26T23:43:30Z</updated>
  <link rel="alternate" href="http://blog.inferis.org/"/>
  <link rel="self" href="http://blog.inferis.org/feed.atom"/>
  <author>
    <name>Tom Adriaenssen</name>
    <uri>http://inferis.org</uri>
  </author>
  <entry>
    <id>tag:blog.inferis.org,2015-04-27:/blog/2015/04/27/ios8-and-interfaceorientation/</id>
    <title type="html">Using interfaceOrientation with iOS8 transitions</title>
    <published>2015-04-26T23:43:30Z</published>
    <updated>2015-04-26T23:43:30Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/04/27/ios8-and-interfaceorientation/"/>
    <content type="html">

&lt;p&gt;Working on an app last week, I needed a way to respond to rotation events in a view controller. Since iOS8, the rotation APIs in &lt;code&gt;UIViewController&lt;/code&gt; are deprecated:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;willRotateToInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;UIInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;toInterfaceOrientation&lt;/span&gt; &lt;span class="nf"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;NSTimeInterval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;duration&lt;/span&gt; &lt;span class="n"&gt;NS_DEPRECATED_IOS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;_0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;_0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Implement viewWillTransitionToSize:withTransitionCoordinator: instead"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;didRotateFromInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;UIInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;fromInterfaceOrientation&lt;/span&gt; &lt;span class="n"&gt;NS_DEPRECATED_IOS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;_0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;_0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;willAnimateRotationToInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;UIInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;toInterfaceOrientation&lt;/span&gt; &lt;span class="nf"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;NSTimeInterval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;duration&lt;/span&gt; &lt;span class="n"&gt;NS_DEPRECATED_IOS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;_0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;_0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Implement viewWillTransitionToSize:withTransitionCoordinator: instead"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, they want you to use &lt;code&gt;viewWillTransitionToSize:withTransitionCoordinator:&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;So, no problem, we'll just implement that method. The only thing is: what if you need to know those "toInterfaceOrientation" or "fromInterfaceOrientation" value from the old APIs?&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Because: what if you do want the old behavior? Not everybody has the luxury of going iOS8 only; sure, you can still use the old callbacks - for now. They won't get called once you implement &lt;code&gt;viewWillTransitionToSize:withTransitionCoordinator:&lt;/code&gt;, but you might want fallback behavior in addition to the new behavior.&lt;/p&gt;

&lt;p&gt;And anyhow, I thought it would be a good exercise to see how we could use this new callback to derive our new interface orientation. Adaptive UI and all, but sometimes is just darn handy to know how your device is held.&lt;/p&gt;

&lt;p&gt;Turns out, it's not very hard, but it's not a trivial amount of code.&lt;/p&gt;

&lt;p&gt;I looked up session 214 of WWDC 2014: &lt;em&gt;View Controller Advancements in iOS8&lt;/em&gt; by Bruce Nilo (ðŸ“¹ &lt;a href="http://devstreaming.apple.com/videos/wwdc/2014/214xxq2mdbtmp23/214/214_hd_view_controller_advancements_in_ios_8.mov"&gt;video&lt;/a&gt; &amp;amp; ðŸ“ˆ &lt;a href="http://devstreaming.apple.com/videos/wwdc/2014/214xxq2mdbtmp23/214/214_view_controller_advancements_in_ios_8.pdf"&gt;slides&lt;/a&gt;). It's a very interesting talk since he goes into all of the changes they've made, including the changes in rotation behavior.&lt;/p&gt;

&lt;p&gt;A particular slide peaked my interest:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="https://s3.amazonaws.com/f.cl.ly/items/0r1R2E132l3n2P1O472S/rotation.jpg" width="750"&gt;&lt;/p&gt;

&lt;p&gt;Notice the &lt;code&gt;[self orientationFromTransform:[t targetTransform]]&lt;/code&gt;. He doesn't go into it (obviously), but I knew what to do.&lt;/p&gt;

&lt;p&gt;With some experimentation, it looks like the transform you get via &lt;code&gt;targetTransform&lt;/code&gt; is the rotation transform resulting from rotating your device. So if you turn from portrait to landscape it will be a 90Âº (or &lt;code&gt;Ï€/2&lt;/code&gt; or even &lt;code&gt;M_PI_2&lt;/code&gt;) rotation, and if you go from landscape left to landscape right it will a 180Âº rotation. Depending on the direction of the rotation, the angle will be either positive or negative.&lt;/p&gt;

&lt;p&gt;So we can use this &lt;code&gt;targetTransform&lt;/code&gt; to go from the current interface orientation to the target interfaceorientation: we just need to "add" the rotation to the interface orientation value.&lt;/p&gt;

&lt;h2&gt;Some work, some math&lt;/h2&gt;

&lt;p&gt;The approach we'll be taking will be somewhat generic. Generic because we'll calculate the number of 90Âº "segments" we'll have to go through, and switch to the "next" interfaceorientation for each segment. In the end, we'll have the correct orientation.&lt;/p&gt;

&lt;p&gt;This sounds easier than it proved to be. The first problem is calculating how many segments we need from the transform. We can calculate this from the &lt;a href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CGAffineTransform/index.html#//apple_ref/c/tdef/CGAffineTransform"&gt;affine transform&lt;/a&gt;, which is - and you may or may not know this - a struct representing a matrix. In code, this looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;CGAffineTransform&lt;/span&gt; &lt;span class="n"&gt;CGAffineTransform&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;CGAffineTransform&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;CGFloat&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;CGFloat&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a representation of this matrix:&lt;/p&gt;

&lt;p&gt;$$\begin{bmatrix}
  a &amp;amp; b &amp;amp; 0 \\
  c &amp;amp; d &amp;amp; 0 \\
  tx &amp;amp; ty &amp;amp; 1
 \end{bmatrix}$$&lt;/p&gt;

&lt;p&gt;This transformation matrix is used to transform the coordinates of the source point &lt;code&gt;(x,y)&lt;/code&gt; to a target point &lt;code&gt;(x',y')&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;$$\begin{bmatrix}
  x' &amp;amp; y' &amp;amp; 1
 \end{bmatrix} = \begin{bmatrix}
   x &amp;amp; y &amp;amp; 1
  \end{bmatrix} \times \begin{bmatrix}
   a &amp;amp; b &amp;amp; 0 \\
   c &amp;amp; d &amp;amp; 0 \\
   tx &amp;amp; ty &amp;amp; 1
  \end{bmatrix}$$&lt;/p&gt;

&lt;p&gt;For those not well versed in matrix algebra: you traverse each item of the source 1x3 matrix and multiply it with the corresponding row, and then adding these results together. You do this for each column so that you end up with a new 1x3 matrix.&lt;/p&gt;

&lt;p&gt;Which results in the following equations:&lt;/p&gt;

&lt;p&gt;$$x' = ax + cy + tx$$
$$y' = bx + dy + ty$$
$$1 = 0x + 0y + 1$$&lt;/p&gt;

&lt;p&gt;That last one is useless, so we can ignore it.&lt;/p&gt;

&lt;p&gt;CGAffineTransform is merely a struct representing the useful values of this matrix, and the transforms you use in your code are just representations of this matrix which is used &lt;a href="https://developer.apple.com/library/mac/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/dq_affine/dq_affine.html"&gt;by Quartz&lt;/a&gt; to perform the calculations using the equations above. In effect: the matrix &lt;em&gt;links&lt;/em&gt; two coordinate systems â€” it specifies how points in one coordinate system map to points in another.&lt;/p&gt;

&lt;p&gt;So back to our rotation: how does the &lt;a href="http://en.wikipedia.org/wiki/Rotation_matrix"&gt;matrix for a rotation&lt;/a&gt; look like? Like this (where &lt;code&gt;Î±&lt;/code&gt; is the angle of the rotation) (for Quartz):&lt;/p&gt;

&lt;p&gt;$$\begin{bmatrix}
 cos \alpha &amp;amp; sin \alpha &amp;amp; 0 \\
 -sin \alpha &amp;amp; cos \alpha &amp;amp; 0 \\
 0 &amp;amp; 0 &amp;amp; 1
\end{bmatrix}$$&lt;/p&gt;

&lt;p&gt;So when we want the angle from this matrix, we'd need to reverse the the matrix calculations. This is as simple as taking any of the a/b/c/d matrix elements and reverse it:&lt;/p&gt;

&lt;p&gt;$$\alpha = acos(a) = acos(d)$$
$$\alpha = asin(b) = -asin(c)$$&lt;/p&gt;

&lt;p&gt;Now using &lt;code&gt;acos&lt;/code&gt; or &lt;code&gt;asin&lt;/code&gt; to get the angle has a tiny problem: each input can result in 2 solutions (this is due to how sine and cosine functions work, of course). The &lt;code&gt;atan2&lt;/code&gt; function doesn't have this problem since it uses two inputs to calculate the result. It's also better in our case since an affine transform can also contain a scale transform, which has no impact on the result if we use &lt;code&gt;atan2&lt;/code&gt;. So here we go:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="n"&gt;angle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;atan2f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;atan2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Watch out, the atan2 function takes the &lt;code&gt;y&lt;/code&gt; parameter first -&amp;gt; RTFM!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you want to know more about the maths behind this, check out &lt;a href="http://en.wikipedia.org/wiki/Euler_angles"&gt;Euler angles&lt;/a&gt; and &lt;a href="http://staff.city.ac.uk/%7Esbbh653/publications/euler.pdf"&gt;this paper&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Back to our calculations: we actually don't want the angle, but the number of 90Âº segments of our rotation:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="n"&gt;CGFloat&lt;/span&gt; &lt;span class="n"&gt;angle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;atan2f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;NSInteger&lt;/span&gt; &lt;span class="n"&gt;multiplier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;roundf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;angle&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;M_PI_2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We explicitly round the division by &lt;code&gt;Ï€/2&lt;/code&gt;; relying on the implicit &lt;em&gt;CGFloat&lt;/em&gt; to &lt;em&gt;NSInteger&lt;/em&gt; conversion isn't good enough since it just takes the integral part of the float (in effect &lt;code&gt;floorf(...)&lt;/code&gt;) which is &lt;em&gt;not&lt;/em&gt; what you want.&lt;/p&gt;

&lt;p&gt;Note that the angle of rotation will be the inverse of how you rotate the device: if you rotate the device clockwise, the angle of the transform will be negative (and thus counter-clockwise): the transform "counters" the rotation to get back to where we were before the rotation (albeit with other dimensions).&lt;/p&gt;

&lt;h2&gt;interfaceOrientation: from âž¢ to&lt;/h2&gt;

&lt;p&gt;Now that we know the angle and multiplier, it's time to transform our interface orientation according to this angle. This isn't hard, but it is cumbersome due to how the &lt;code&gt;UIInterfaceOrientation&lt;/code&gt; enum is defined:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="c1"&gt;// Note that UIInterfaceOrientationLandscapeLeft is equal to
// UIDeviceOrientationLandscapeRight (and vice versa). This is because rotating
// the device to the left requires rotating the content to the right.
&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="nf"&gt;NS_ENUM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;UIInterfaceOrientationUnknown&lt;/span&gt;            &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIDeviceOrientationUnknown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;UIInterfaceOrientationPortrait&lt;/span&gt;           &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIDeviceOrientationPortrait&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;UIInterfaceOrientationPortraitUpsideDown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIDeviceOrientationPortraitUpsideDown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;UIInterfaceOrientationLandscapeLeft&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIDeviceOrientationLandscapeRight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;UIInterfaceOrientationLandscapeRight&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIDeviceOrientationLandscapeLeft&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, it's just a mapping of the corresponding &lt;code&gt;UIDeviceOrientation&lt;/code&gt; values, which are defined like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="nf"&gt;NS_ENUM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UIDeviceOrientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;UIDeviceOrientationUnknown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;UIDeviceOrientationPortrait&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="c1"&gt;// Device oriented vertically, home btn -&amp;gt; bottom
&lt;/span&gt;    &lt;span class="n"&gt;UIDeviceOrientationPortraitUpsideDown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Device oriented vertically, home btn -&amp;gt; top
&lt;/span&gt;    &lt;span class="n"&gt;UIDeviceOrientationLandscapeLeft&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="c1"&gt;// Device oriented horizontally, home btn -&amp;gt; right
&lt;/span&gt;    &lt;span class="n"&gt;UIDeviceOrientationLandscapeRight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// Device oriented horizontally, home btn -&amp;gt; left
&lt;/span&gt;    &lt;span class="n"&gt;UIDeviceOrientationFaceUp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          &lt;span class="c1"&gt;// Device oriented flat, face up
&lt;/span&gt;    &lt;span class="n"&gt;UIDeviceOrientationFaceDown&lt;/span&gt;         &lt;span class="c1"&gt;// Device oriented flat, face down
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;As an aside: You'll notice that there's no equivalent interface orientation for the &lt;code&gt;UIDeviceOrientationFaceUp&lt;/code&gt; and &lt;code&gt;UIDeviceOrientationFaceDown&lt;/code&gt;, because they make no sense for the interface orientation: it remains the same whether you have the device face up or face down.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I show this because my first idea was to &lt;em&gt;cycle&lt;/em&gt; through the orientation values by adding or substracting 1 from each value, wrapping around at the minimum and maximum values of the enum. But looking at these definitions: this is not possible. First of all, the interface orientation values are based on the device orientation values, which have 2 more values we don't care about. And secondly, even if we could use the natural order of the device orientation values, they are shuffled around in the &lt;code&gt;UIInterfaceOrientationLandscapeLeft&lt;/code&gt; and &lt;code&gt;UIInterfaceOrientationLandscapeRight&lt;/code&gt; switcharoo in the definition of &lt;code&gt;UIInterfaceOrientation&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The net result is that we need to resort to an ugly switch statement:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiplier&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// clockwise rotation
&lt;/span&gt;    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiplier&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortrait&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeLeft&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeLeft&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortraitUpsideDown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortraitUpsideDown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeRight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortrait&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiplier&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// counter-clockwise rotation
&lt;/span&gt;    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiplier&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortrait&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeRight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortraitUpsideDown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortraitUpsideDown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeLeft&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeLeft&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortrait&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I said ugly, I meant ugly. ðŸ˜­ But there's no real other way to do this, I guess: if there is, please let me know.
I initially thought this would also be a bit more robust future wise (you never know when Apple adds another interface orientation), but this code is just as brittle as the &lt;em&gt;addition based&lt;/em&gt; code I intentionally wanted to use.&lt;/p&gt;

&lt;h2&gt;Finally&lt;/h2&gt;

&lt;p&gt;The final resulting function:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;orientationByTransforming&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;CGAffineTransform&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;transform&lt;/span&gt; &lt;span class="nf"&gt;fromOrientation&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;UIInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;CGFloat&lt;/span&gt; &lt;span class="n"&gt;angle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;atan2f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;NSInteger&lt;/span&gt; &lt;span class="n"&gt;multiplier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;roundf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;angle&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;M_PI_2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;UIInterfaceOrientation&lt;/span&gt; &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiplier&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// clockwise rotation
&lt;/span&gt;        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiplier&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortrait&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeLeft&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeLeft&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortraitUpsideDown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortraitUpsideDown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeRight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortrait&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nl"&gt;default:&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiplier&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// counter-clockwise rotation
&lt;/span&gt;        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiplier&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortrait&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeRight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortraitUpsideDown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortraitUpsideDown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeLeft&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationLandscapeLeft&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIInterfaceOrientationPortrait&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nl"&gt;default:&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;orientation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It's also available as &lt;a href="https://gist.github.com/Inferis/26ded6e1e8e625b3cd67"&gt;a gist&lt;/a&gt;, by the way. And I'll leave the Swift version as an exercise to the reader. ðŸ˜‰&lt;/p&gt;

&lt;h2&gt;Postscriptum&lt;/h2&gt;

&lt;p&gt;I later refactored the code not to rely on the interface orientation, which is probably better anyway; but having done the exercise I did want to share it with the world. I googled it, but not find an 'out-of-the-box' solution right away, which either shows that it's a hard problem to tackle or that it's not really a problem needed to be tackled. But here I am, having tackled it, so sharing it for anyone else to use wouldn't hurt anyone, right?&lt;/p&gt;

&lt;p&gt;And finally, I'll admit this: I learned a lot of the math behind this in high school and university, but had to actively relearn it all when researching this code and blogpost. Not using these mathematics (apart from the obvious ones you'd use in daily life I guess), resulted in the knowledge either being gone or stuck somewhere in the outback of my brain. However, it was fun to get reacquainted with this knowledge anyway. And while I found an actual usable code solution before diving into the maths myself, I'd really like to understand what I'm actually doing instead of just relying on a copy-paste solution.&lt;/p&gt;

&lt;p&gt;So yeah: learning for fun &lt;strong&gt;and&lt;/strong&gt; profit. Who knew?&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-04-22:/blog/2015/04/22/scripts-in-your-app-bundle/</id>
    <title type="html">Scripts in your app bundle</title>
    <published>2015-04-22T13:02:23Z</published>
    <updated>2015-04-22T13:02:23Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/04/22/scripts-in-your-app-bundle/"/>
    <content type="html">

&lt;p&gt;It appears Apple changed something in the iOS bundle upload : it now requires that all executables in your app bundle are signed (this might be applicable for Mac uploads too, but I haven't tried). I hear you think: isn't this the case anyway, but there might be more executables in your bundle than you expect.&lt;/p&gt;

&lt;p&gt;Of course, there's the binary for your app, which obviously is executable. But there could be more too: if you include shell scripts, for example, which are marked executable (&lt;code&gt;chmod u+x script.sh&lt;/code&gt;) then iTunes Connect now considers them as actual executables and now requires them to be codesigned.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;This is evidenced by an error like this one:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.stack.imgur.com/KzOct.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Taken from a &lt;a href="http://stackoverflow.com/questions/29788601/error-itms-90035-xcode"&gt;Stack Overflow post on the error&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Problem solving&lt;/h2&gt;

&lt;p&gt;So there's two options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://developer.apple.com/library/mac/documentation/Security/Conceptual/CodeSigningGuide/Introduction/Introduction.html"&gt;codesign&lt;/a&gt; your included scripts&lt;/li&gt;
&lt;li&gt;remove your scripts from the bundle&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Option 2 will most likely always be the thing you'll want to do, unless you actually want to run the script in your app (to be honest: I'm not even sure that's even possible on iOS given the security issues).&lt;/p&gt;

&lt;p&gt;Getting rid of the scripts is easy: find the script in Xcode and make sure it's not included in any of your targets. If it's not there, you're probably safe. If you still get errors, it might end up in your bundle through another way than Xcode. This can be an external script including the file in your bundle, for example. Which brings me to the harder part of the problem... Namely, when you're using CocoaPods that include executable scripts as a resource (for god knows what reason). An example of this is the &lt;a href="https://github.com/willowtreeapps/Crittercism-iOS"&gt;Crittercism pod&lt;/a&gt;: they include a &lt;code&gt;dsym_upload.sh&lt;/code&gt; as a resource, probably as an easy way to distribute the file. If you look at the project file, you won't see the file marked as included in any target:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="https://s3.amazonaws.com/f.cl.ly/items/3f1v3s251p1M2W1M3O3S/Image%202015-04-22%20at%203.32.19%20pm.png"&gt;&lt;/p&gt;

&lt;p&gt;But it &lt;strong&gt;does&lt;/strong&gt; get copied into your bundle by the &lt;code&gt;Copy Pods Resources&lt;/code&gt; build phase, which has no reference at all to the culprit in question (because it generically copies all pod resources into the app bundle):&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="https://s3.amazonaws.com/f.cl.ly/items/0k3Y131w0q0h3E2A2H04/Image%202015-04-22%20at%203.34.01%20pm.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;So that's kind of non-obvious.&lt;/p&gt;

&lt;p&gt;The tricky part here is that the inclusion of this file is a bit out of your reach. The author of the Podspec decided to include it for some reason and all you asked for was &lt;code&gt;pod 'CrittercismSDK'&lt;/code&gt;. There is no way of manually excluding the file, not even by unticking a box even if that meant you had to do this after every &lt;code&gt;pod install&lt;/code&gt;. So you're stuck waiting until the authors update their Podspec file, or you could do it yourself (for now).&lt;/p&gt;

&lt;h2&gt;Fixing the podspec, temporarily&lt;/h2&gt;

&lt;p&gt;How? By duplicating the offending podspec locally and fix it. In the case of the Crittercism spec this means omitting the .sh file from resources:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby highlight"&gt;&lt;span class="no"&gt;Pod&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="nf"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;resources&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'CrittercismSDK-crashonly/Resources/*'&lt;/span&gt;

  &lt;span class="c1"&gt;# add this line below&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;exclude_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"**/*.sh"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;According to the &lt;a href="http://guides.cocoapods.org/syntax/podspec.html#exclude_files"&gt;Podspec syntax reference&lt;/a&gt; &lt;code&gt;exclude_files&lt;/code&gt; defines "A list of file patterns that should be excluded from the other file patterns.". Which is exactly what we need. There might already be a line like this in the podspec, so you might need to append to it instead of adding it, so take a good look first.&lt;/p&gt;

&lt;p&gt;Now that you fixed your local copy of the podspec, use that one in your podfile. Which is as easy as adding a &lt;code&gt;podspec&lt;/code&gt; reference for the pod:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby highlight"&gt;&lt;span class="n"&gt;pod&lt;/span&gt; &lt;span class="s1"&gt;'CrittercismSDK'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:podspec&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'CrittercismSDK.podspec'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, you'll only want to do this if this blocks your release. You'll need to keep monitoring the offending podspec(s) for actual fixes so that you can continue using the version you want. By capturing the podspec and storing it locally, you effectively use the version of a pod at the moment of capture, also in the future.&lt;/p&gt;

&lt;p&gt;But it's a good compromise to make to get that app out of the door, which is what counts at the end of the day. Just ship it. ðŸ˜Ž&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-04-20:/blog/2015/04/20/gliding/</id>
    <title type="html">Gliding</title>
    <published>2015-04-20T05:52:07Z</published>
    <updated>2015-04-20T05:52:07Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/04/20/gliding/"/>
    <content type="html">

&lt;p&gt;I went gliding! And it was awesome.&lt;/p&gt;

&lt;p&gt;My friend and co-worker &lt;a href="http://twitter.com/fousa"&gt;Jelle Vandebeeck&lt;/a&gt; has been a glider pilot for (what he claims - and I have no reason to doubt it) 15 years now. Last year, just for fun, I mentioned I would like to get off the ground with him (in a glider, of course). He wasn't dismissive of it, so we went to search for a good date.&lt;/p&gt;

&lt;p&gt;Unfortunately, due to scheduling conflicts and weather conditions I didn't get the chance to actually go flying. No worries, there would be other moments.&lt;/p&gt;

&lt;p&gt;And so, now that flying season started again, there were no races to be flown yet, the weather looked good and I was able to free some time (there's always so much to do, but it's about setting priorities), which meant that this weekend &lt;strong&gt;we were on&lt;/strong&gt;!&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img class="center" src="https://farm8.staticflickr.com/7704/17009720487_a3d3f30621_z.jpg"&gt;&lt;/p&gt;

&lt;p&gt;And so I arrived at the airfield in Brasschaat at around 14:45. First thing Jelle warned me about: there would be a lot of waiting. There's only so many (twin) gliders in the club, and there are quite a bit of people wanting to go in the air, and so we had to wait our turn. I was very much fine with that. The weather was good: blue skies, sun was out but it wasn't too hot yet; a light breeze helped cool us from the spring sun. And so we waited until it was our turn.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="https://farm8.staticflickr.com/7633/17029598880_74bf022f5c_z.jpg"&gt;&lt;/p&gt;

&lt;p&gt;Then, we geared up ("so how does this parachute work exactly?", "don't touch this or we'll lose the cockpit", ...), they sat me down in the second seat of the glider and Jelle explained what dial was used for what purpose. To be honest: I'm not the stupidest guy in the pack, but it was a lot of information to take in, even though I wasn't going to do any flying myself. But then again, it was the first time I set foot in a glider, or in a small airplane all together: all the other planes I've flown along with were quite a bit bigger. ðŸ˜… My gear - I had my camera with me - was tucked away by my side, because I was told that the ride may be a bit bumpy.&lt;/p&gt;

&lt;p&gt;This apparently had to do with the weather: the sky was virtually clear except for a few patches of clouds here and there and the sun was out. This meant a lot of heat was generated at ground level. Heat means rising air which is good for a glider but this also meant a lot of agitation: the forces of nature helping us up could also be a bit quirky at times. They would also have effect on my feeling of balance: I was given a small puking bag just in case. I wouldn't have been the first to throw up in the back seat of a twin glider, I've been told.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="https://farm9.staticflickr.com/8764/16594680834_a69f415c11_z.jpg"&gt;&lt;/p&gt;

&lt;p&gt;And then, then we got hooked up to a pulling plane, which revved up its engines and off we went. The funny thing is that because the glider has more natural lift, it goes up in the air sooner: there's a few seconds of hovering a few meters above the tarmac when the other plane was still speeding up on the ground. But then you're both off and before you know it, you're at 500m and it's time to let go of the umbilical cord attaching the glider to the plane. And then you're free.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="https://farm6.staticflickr.com/5449/17215420612_36f248dde8_z.jpg"&gt;&lt;/p&gt;

&lt;p&gt;I have to say: it was an incredible experience. I've always loved flying even though I don't do it that much, and most planes I've flown in were big boys. But I love a seat near the window to peak outside, even during landing and takeoff. I guess it's a typical boyhood fascination that never receded. But being in such a small plane, having a great view all around, watching objects on the ground go larger and smaller as you drop or rise, and being able to see so much farther away than on the ground: it's awesome. Also, the noise was not to hard: there's no motor noise but you do hear the wind around the plane, and when you're going up you can hear the plane creak due to the forces the thermal rising applies to the plane. Nothing to be afraid of and all in all very peaceful.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="https://farm8.staticflickr.com/7586/16596911623_aa2f5f5cf9_z.jpg"&gt;&lt;/p&gt;

&lt;p&gt;We spent about 30 minutes in the air, which was - to be honest - more than enough. The stories of throwing up sounded so incredulous before start ("Nah, I'll be fine, I've got a strong stomach") felt very real towards the end of the flight. I felt like I had a real knot in my stomach near the end, and I think its contents would have spilled out if we had flow for another half hour. But we didn't and I made it to the ground&lt;/p&gt;

&lt;p&gt;I'm pretty sure I also have to thank Jelle for that because he really is an expert flyer (at least, to my n00b experiences). I was never scared or anxious; all in all I found the ride to be very smooth, even though he claimed it was quite bumpy (due to the good weather). There were intense moments, of course: when you fly into a pocket of hot air you feel the forces pulling on the plane and on you which results in funny feelings in your stomach. But those are part of the deal and once you get a bit used to them and try to anticipate them they become easier to stomach (pun intended).&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="https://farm6.staticflickr.com/5469/16594642524_4bf5a3e4da_z.jpg"&gt;&lt;/p&gt;

&lt;p&gt;So yeah: a very nice afternoon indeed. I'd gladly do it again, even though my stomach wouldn't agree now. I'm thinking that once you get used to it and know what to expect, I might become less "unpleasant". We'll see, there might be another time.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="https://farm9.staticflickr.com/8690/17029545180_fb463338ed_z.jpg"&gt;&lt;/p&gt;

&lt;p&gt;Thanks again Jelle, for the wonderful experience. ðŸ˜Ž&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(you can find all photos I took - the whopping 21 of them - on &lt;a href="https://www.flickr.com/photos/inferis/sets/72157649752540144/"&gt;Flickr&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-04-14:/blog/2015/04/14/early-bird-catches-the-worm/</id>
    <title type="html">The early bird catches the worm</title>
    <published>2015-04-14T07:01:41Z</published>
    <updated>2015-04-14T07:01:41Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/04/14/early-bird-catches-the-worm/"/>
    <content type="html">

&lt;p&gt;I'm starting to become an early-morning person.&lt;/p&gt;

&lt;p&gt;This is a big change for me. I used to be a "late night" person. My day used to consist of 2 parts: the day(job) part and the night part. Going home after work (or whatever) meant there were at least a few hours left in the day to be (even more) productive. And so I spent countless nights behind my computer's screen (because "being productive" equals "coding", that &lt;em&gt;is&lt;/em&gt; imperative), coding away into the wee hours of night. The morning after would prove difficult but nothing that coffee couldn't solve. And the weekend usually gave good opportunities for sleeping in to catch up on some sleep. And so I was no morning person at all, meaning that "get up at 8am" was usually a very difficult task. Also, I had no fixed schedule in my life back then. I woke up when needed, I went to sleep when I felt like it, I rarely had breakfast/lunch/dinner at relatively fixed times.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;But then you have kids, and they have to go to school eventually, and your life starts to fall into a more regular schedule. Not that that changed my at-night habits a lot. Although it did mean that there was no slacking possible in the morning (getting 4 kids to school can be, eh, daunting), I continued to try to be productive at night. But I had to admit that those long hours would take their toll eventually, and I wasn't as productive as I used to be. I started to spend nights before my computer, doing nothing more than &lt;a href="http://www.urbandictionary.com/define.php?term=Wilfing"&gt;wilfing&lt;/a&gt; around, not doing anything useful at all. Not good, and a waste of time.&lt;/p&gt;

&lt;h2&gt;Switch&lt;/h2&gt;

&lt;p&gt;&lt;img class="right" src="https://igcdn-photos-d-a.akamaihd.net/hphotos-ak-xaf1/t51.2885-15/11116903_1575156929405611_575215853_n.jpg" width="350"&gt;&lt;/p&gt;

&lt;p&gt;Last summer I switched to a completely different schedule: I was tech lead for a large iOS project at the time, and my job consistent of both guiding the dev team (7 devs) and doing some "high level" coding. I found that that first part would be taking up all of my time, and that finding time for the coding part was becoming harder. Additionally, I was so drained after coming home from work that I rarely got to doing some more work. And so I thought: let's try this morning thing.&lt;/p&gt;

&lt;p&gt;And so I started to get up at 5:30 in the morning so that I could be at work at around 7am. That would give me 2 hours of coding/preparation time before the rest of the team would come in at around 9am. It was hard at first. I wasn't used to these hours at all, and my body protested.&lt;/p&gt;

&lt;p&gt;But I got used to it. The hardest part was going to bed early enough in order to be able to get up early enough. Being used to not going to bed before midnight, early on in the process this required some willpower to get to bed at around 10pm. But once I got into &lt;em&gt;the early rhythm&lt;/em&gt;, this became easier. I simply started shutting down at 10pm, so going to bed then felt more "natural".&lt;/p&gt;

&lt;h2&gt;Helping factors&lt;/h2&gt;

&lt;p&gt;A big factor of this early rising thing is limiting coffee/caffeine intake. I used to drink coffee all day through, which had a clear effect on my sleeping pattern. I tried a few times going off coffee completely, which worked initially (OHAI COLD TURKEY) but I always eventually started drinking coffee again (it's just too good). But I found that limiting intake in the early hours of the day works wonderfully well. It helps you be alert in the morning -- that first coffee really helps -- and because I don't drink any caffeinated beverages after midday the effects are gone by the time I get to bed. So I get the best of both worlds. Moderation, it's a good thing.&lt;/p&gt;

&lt;p&gt;Another factor in this story is my bike: getting to/from work, I have to bike to the nearest train station, which is about 20/25 minutes away. These bike rides are invigourating: they provide a much needed rest from working all day, giving your body some exercise (a welcome change from sitting all day) and your mind some relaxation (a welcome change from thinking all day). The net effect is that you're well awake once you're at work, even when you start off with a sleepy head. You get the same effect when coming back from work: you feel more relaxed once you're home. It's easier to put work behind you if you feel like it.&lt;/p&gt;

&lt;p&gt;And so I spent the summer working early mornings. And sometimes late nights. My days were usually longer than the usual 8 hours. But that was okay: the project was exciting to work on, and there was a lot of work to do too. We met our deadlines, and we delivered quality software. I felt better with my regained time, even if that meant that I wasn't usually worth a lot at those evenings/nights.&lt;/p&gt;

&lt;h2&gt;One year later&lt;/h2&gt;

&lt;p&gt;So this system worked wonderfully well last summer. The long days help a lot getting up - early natural daylight is awesome! And so when winter came keeping this schedule started to become harder. Also, the project came to an end, and my day-to-day planning changed. The net result was that I was back to my more regular schedule. Get up to prepare kids for school, get into a more regular "9 to 5" schedule. Also, biking to work in the biting cold at 6:15, I can tell you that's not the most motivating factor to get up. I don't mind rain much -- you can dress for it -- but cold + rain is a bad combination. ðŸ˜°&lt;/p&gt;

&lt;p&gt;Another thing to consider were school days. These were not really an issue in the summer due to the holidays, but once the kids had to go back to school it meant that I had to get up half an hour earlier, because part of the "get up early" deal with my wife is that I had to take care of preparing their schoolbags (lunch, ...), and her part was breakfast and getting them to school. And so in winter, I started not to bother getting up early and doing joint mornings with my wife, bringing the kids to school together and biking to the station from school (a lot closer).&lt;/p&gt;

&lt;h2&gt;Back to early&lt;/h2&gt;

&lt;p&gt;&lt;img class="right" src="https://igcdn-photos-a-a.akamaihd.net/hphotos-ak-xaf1/t51.2885-15/11084974_844591128947976_1060421944_n.jpg" width="350"&gt;&lt;/p&gt;

&lt;p&gt;But I kinda missed those early mornings. And so with the days getting longer now, and starting project in Brussels leading a team of devs, I decide to try to get back into the rhythm. I'm not there yet: some days are harder to get up than others, and because work is not as pressing as it is last year and the team is smaller there's no real need to actually having to get up early. But I enjoy the wee hours. So much nicer to get to work, so much quieter early hours. And when I want I'm home at a reasonable time to spend some time with my kids.&lt;/p&gt;

&lt;p&gt;Summer's only beginning, and I'm looking forward to some early mornings. Not all of them, depending on schedule and needs. But it's good to be up early and feel productive.  &lt;/p&gt;

&lt;p&gt;Overall, I'd say I feel better as a morning person than as a night person. And that's a strange thing for me to claim. ðŸ˜•&lt;/p&gt;

&lt;h2&gt;Future&lt;/h2&gt;

&lt;p&gt;Finally, and here's the naive me speaking, I'm hoping to continue this once I move to California. The better weather there will probably have a benefical effect on being able to get up early (although winter days will be as short as in Belgium). I also have the crazy idea of biking to work there (no idea if that it's actually feasible, though), to keep the "wake up exercise" effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: &lt;a href="https://twitter.com/arepty"&gt;Alex Repty&lt;/a&gt; mentions that Cupertino has about a hour extra daylight at the winter solstice than Belgium:&lt;/p&gt;

&lt;div class="embed tweet"&gt;
&lt;blockquote class="twitter-tweet"&gt;
&lt;p&gt;&lt;a href="https://twitter.com/Inferis"&gt;@Inferis&lt;/a&gt; On the day of the Winter solstice, Cupertino actually should have over an hour more daylight than Belgium.&lt;/p&gt;â€” Alexander Repty (@arepty) &lt;a href="https://twitter.com/arepty/status/587900199693058049"&gt;April 14, 2015&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;As evidenced by: &lt;a href="http://cloud.alexrepty.com/0F1F08051t2O"&gt;Belgium&lt;/a&gt; vs &lt;a href="http://cloud.alexrepty.com/051K3O1F0934"&gt;Cupertino&lt;/a&gt;. So that's good. ðŸ˜Š&lt;/p&gt;

&lt;p&gt;But we'll see about that when we get there. Â¯\_(ãƒ„)_/Â¯  &lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-03-25:/blog/2015/03/25/swiftyas/</id>
    <title type="html">SwiftyAs</title>
    <published>2015-03-25T05:53:38Z</published>
    <updated>2015-03-25T05:53:38Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/03/25/swiftyas/"/>
    <content type="html">

&lt;p&gt;Let me introduce: &lt;a href="https://github.com/inferis/SwiftyAs"&gt;SwiftyAs&lt;/a&gt;. It's a tiny little library to provide sort of the same functionality as &lt;code&gt;as?&lt;/code&gt; from Swift in Objective-C. Let me explain...&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2&gt;The gist&lt;/h2&gt;

&lt;p&gt;In Swift, you can use the &lt;code&gt;as?&lt;/code&gt; operator to safely cast a variable to another type (albeit Optional). If the actual type at runtime doesn't match, Swift turns it into a &lt;code&gt;nil&lt;/code&gt;, and otherwise you just get the variable as an optional. Pretty handy:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;AnyObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;NSDictionary&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;array&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kt"&gt;NSArray&lt;/span&gt;
&lt;span class="c1"&gt;// array = nil&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kt"&gt;NSDictionary&lt;/span&gt;
&lt;span class="c1"&gt;// dict = source&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now with &lt;strong&gt;SwiftyAs&lt;/strong&gt; you can do kind of the same in Objective-C:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="n"&gt;NSObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSDictionary&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="n"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// array = nil
&lt;/span&gt;&lt;span class="n"&gt;NSDictionary&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSDictionary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There's nothing new under the sun here, and you can do exactly the same with an if statement and a &lt;code&gt;isKindOfClass:&lt;/code&gt; check:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="n"&gt;NSObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSDictionary&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="nf"&gt;isKindOfObject&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="nf"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but that's more cumbersome and I think the SwiftyAs way is a lot more readable.&lt;/p&gt;

&lt;h3&gt;Innards&lt;/h3&gt;

&lt;p&gt;So how does this work?&lt;/p&gt;

&lt;p&gt;SwiftyAs introduces a category on &lt;code&gt;NSObject&lt;/code&gt;, providing a readonly block property taking a &lt;code&gt;Class&lt;/code&gt; and returning an &lt;code&gt;id&lt;/code&gt;. The class represents the desired type.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;readonly&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;as&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;Class&lt;/span&gt; &lt;span class="n"&gt;ofClass&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The implementation does nothing more than aforementioned &lt;code&gt;isKindOfClass:&lt;/code&gt; check, but in a block (since that is what the property represents):&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;__unsafe_unretained&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;__weak&lt;/span&gt; &lt;span class="n"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;welf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Class&lt;/span&gt; &lt;span class="n"&gt;ofClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;welf&lt;/span&gt; &lt;span class="nf"&gt;isKindOfClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ofClass&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;welf&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to do some trickery with passing self as weak, because there's no assurance (or obligation) that the &lt;code&gt;as&lt;/code&gt; property block is going to used right away. You could take the block, store it somewhere else and call it later if you wanted. Although that's not the intended and common case use, we do have to cater for it.&lt;/p&gt;

&lt;p&gt;And so we reference self as weak inside the block, so that any lingering &lt;code&gt;as&lt;/code&gt; references won't cause the parent object to remain retained. And if the object's gone, we just return &lt;code&gt;nil&lt;/code&gt; anyway which is kinda the intended behavior.&lt;/p&gt;

&lt;h3&gt;Tiny but easy&lt;/h3&gt;

&lt;p&gt;So it's a really tiny library (if you even could call it that?). It's just category on NSObject providing the &lt;code&gt;as&lt;/code&gt; "keyword" in Objective-C. You can't use it on objects of type &lt;code&gt;id&lt;/code&gt; because that's how categories work in Objective-C, but hey, I can live with that.&lt;/p&gt;

&lt;p&gt;So there. Available as a CocoaPod, of course:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod 'SwiftyAs', '~&amp;gt; 1.0'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-03-19:/blog/2015/03/19/the-last-nsconference/</id>
    <title type="html">The Last NSConference</title>
    <published>2015-03-18T23:00:00Z</published>
    <updated>2015-03-18T23:00:00Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/03/19/the-last-nsconference/"/>
    <content type="html">

&lt;p&gt;The last &lt;a href="http://nsconference.com"&gt;NSConference&lt;/a&gt;. I'm happy to say I was there. I'm sad to see it go.&lt;/p&gt;

&lt;p&gt;I attended three editions of NSConf. The first one was in 2013: due to scheduling reasons, I couldn't attend WWDC and so I was on the lookout for a replacement. NSConf seemed to be it, and I bought a ticket. I had known about NSConf before (given I'm relatively new to the Cocoa community, having only started in 2011), but I never got around to going. But buying that ticket was one of the best decisions ever made.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2&gt;Friends &amp;amp; Community&lt;/h2&gt;

&lt;p&gt;Because I came back for seconds and now thirds. And by doing that, I made a lot of new friends. People I otherwise wouldn't have met. People who share similar values, people who do similar work. Each in their own way, all in familiar ways. And while all of us are introverts and hate to talk to strangers, NSConf did provide for a welcoming enough atmosphere to make meetups with other people happen.&lt;/p&gt;

&lt;p&gt;I mean, you spend the day at a table with other people, so it's bound to happen that you'll be talking to each other. You stand in the queue for lunch, and you can't but start a conversation with the people around you. You go for coffee and talk to the guy next to you who's also getting coffee &lt;em&gt;(I thought about writing "girl" here - diversity and all - but alas the chance for that is unfortunately still too small in our community)&lt;/em&gt;. But there's more life outside the conference venue too. You can have breakfast with people staying at your hotel, or go for a nice curry with a group of people you hardly know. And the bar nearby is a fertile breeding ground for new acquaintances and friendships. One caveat though: for all these things, I'm assuming that you know to tear your eyes away from that iPhone screen for a few minutes here and there.&lt;/p&gt;

&lt;p&gt;So the value of NSConference is not only the excellent talks that are given there, it's also the social aspect that's so important. The fact that the conference schedule is geared for social interaction makes it so interesting to attend: first you listen to a talk (talks which most of the time make you stop and think about the things said), and afterward you can reflect on that talk with your neighbors. Or not, and just show them that app your working on or that problem you're stuck with. Or tell them how hard it is combining a happy family life with a challenging job.&lt;/p&gt;

&lt;p&gt;This is also why I was intent to share the news of my new job at Apple over there. Taking the job was a hard decision to make, and by making the news public I could talk to people about it, which helped to put things into perspective (and thanks for the support, everyone).&lt;/p&gt;

&lt;p&gt;These are the reasons why I think that NSConference is a very valuable instrument in our community.&lt;/p&gt;

&lt;h2&gt;Gone, but not forgotten&lt;/h2&gt;

&lt;p&gt;But, it's also gone. &lt;em&gt;NSConference 7&lt;/em&gt; was the last NSConference.&lt;/p&gt;

&lt;p&gt;It's a pity to see it go, and I can see why &lt;a href="http://twitter.com/macdevnet"&gt;Scotty&lt;/a&gt; and his team are stopping the "franchise". It might have grown beyond its bounds, and it's probably grown beyond a safe enough feeling of control. Perhaps it's also time for a new format.&lt;/p&gt;

&lt;p&gt;I'm pretty confident that Scotty will come up with something new. Don't know where, don't know when, but it felt like it would happen eventually in one form or another.&lt;/p&gt;

&lt;p&gt;And so I hope there will be an "NSConferenceTNG", a conference which will be even more inclusive than this last edition. We need more non-white, non-male people at events like these (and, in a broader way, also in our industry). We need to reach people who are hard to reach, might even not be aware that there's a beautiful and warm community out there. It will not only allow us to make better software, it will also allow us to better ourselves. And last but not least, through our better software and better self, we'll be able make a better world for everybody. And while that might sound cheesy, I feel it's an applaudable goal.&lt;/p&gt;

&lt;p&gt;Thanks for the great time, my friends. Thank you Scotty and your team for the time you put into this. It has changed me and I'll never forget that.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/472v1L3W4217/post-38521-wiserhood-slow-clap-gif-Imgur-7gXf.gif" title='"Cheers!"' alt='"Cheers!"'&gt;&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-03-17:/blog/2015/03/17/new-horizons/</id>
    <title type="html">New Horizons</title>
    <published>2015-03-16T23:00:00Z</published>
    <updated>2015-03-16T23:00:00Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/03/17/new-horizons/"/>
    <content type="html">

&lt;p&gt;A tweet, 2 FaceTime interviews, a trip to Cupertino for 5 two-person interviews lasting a whole day (including lunch at the CaffÃ© Macs), a bucketload of mails and 2 handfuls of international phonecalls.&lt;/p&gt;

&lt;p&gt;That's what got me a job in the UIKit team at Apple.&lt;/p&gt;

&lt;p&gt;It's safe to say it's been a crazy ride so far, and it's about to get even better.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;This tweet by &lt;a href="http://twitter.com/olg"&gt;Olivier Gutknecht&lt;/a&gt; started it all:&lt;/p&gt;

&lt;div class="embed tweet"&gt;
&lt;blockquote class="twitter-tweet"&gt;
&lt;p&gt;Discovering great new APIs at WWDC is cool.
But you know what's -really- cool? Creating these APIs.

UIKit is hiring: &lt;a href="https://twitter.com/search?q=%24me&amp;amp;src=ctag"&gt;$me&lt;/a&gt; @ apple&lt;/p&gt;â€” Olivier Gutknecht (@olg) &lt;a href="https://twitter.com/olg/status/482759679877984256"&gt;June 28, 2014&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;h2&gt;And so it started...&lt;/h2&gt;

&lt;p&gt;5 days later I sent Olivier a mail with my resume. At the time I assumed I'd get stuck somewhere along the process. It would be no more than an interesting exercise in seeing how good I was deemed. I had heard the process had multiple steps, of which the last being onsite interviews in California. And so I would have been happy to get invited to Cupertino, get rejected in the last round and be done with it.&lt;/p&gt;

&lt;p&gt;It didn't quite turn out that way.&lt;br&gt;
It actually landed me a job on the other side of the world, in a company and team I'd love to work in.&lt;/p&gt;

&lt;p&gt;I'm not going to go into the details of the process. Other people have blogged about it, and my experience was largely the same. The FaceTime calls were mostly technical and not really easy (although I think now they really weren't that hard). And about the onsite interviews: I felt those were mostly for probing my personality (and a bit about my technical skills, of course). All in all, while it was a very tiring day, it was one of the most interesting experiences I've had. After that day, I knew I wanted to do this job. All in all, the whole interviewing process was very comfortable; I never had the feeling to be part of an "elite".&lt;/p&gt;

&lt;p&gt;Because "working on frameworks", it's a job I've always wanted to do. Even in my .Net days I wanted to work for Microsoft, creating APIs or making tools for developers. I've spent a few years for a client building an internal (.Net based) RAD framework, and I enjoyed doing that a lot. The last 18 months working for &lt;a href="http://icapps.com"&gt;iCapps&lt;/a&gt; as technical lead for the &lt;a href="https://www.bolero.be/nl/platformen/mobile"&gt;Bolero&lt;/a&gt; project enforced that even more as part of my job was building internal frameworks for the rest of the team. It was so much fun building generic stuff, clear enough for (junior) developers to use.&lt;/p&gt;

&lt;p&gt;And so when that tweet came, I decided to take the plunge. It was "now or never": I'll be turning 40 this summer, my kids are still young enough to move to the other side of the world (my eldest just turned 9). My experience gained after this wouldn't really matter after this point in time, so there was no point in waiting.&lt;/p&gt;

&lt;p&gt;So 258 days after that tweet, I came to a final agreement with Apple about working for them. That's a long time. The fact that there was no hurry due to the H1-B visa process didn't really help. On the other hand: there were a lot of decisions to make. Moving a family of 6 to the US is no easy feat for all parties involved.&lt;/p&gt;

&lt;h2&gt;Family&lt;/h2&gt;

&lt;p&gt;And speaking about family: the hard part about this decision was moving there... by myself. The further I got in the process, the more reluctant my wife became about moving us over there. So currently, the plan is that I'll be moving there by myself to start the job, with my family coming later (we're talking about at least a few months). I feel this is both a good and a bad thing. The job is going to take a lot of effort, moving there is going to ask a lot of my resources, and being there by myself will not burden my family directly, apart from me not being there. It does mean that they'll have to miss their husband/father for weeks at a time (and I will have to miss my wife and kids) but at least they'll still be in their own social network of family and friends. I've heard enough stories of similar career moves with the spouse burning out overseas due to a lack of social network, so I'm going to be pretty cautious about this. And so we're making arrangements to alleviate the issues arising from the fact that we'll be split up. Nevertheless, it remains a big gamble, but I'm confident that it'll work out. Hopefully, once my wife experiences how nice California is, she will change her mind, and there's plenty of time to work on that.&lt;/p&gt;

&lt;h2&gt;Yes or no?&lt;/h2&gt;

&lt;p&gt;Making the decision between this job and my family was the hardest part in this whole "ordeal". Is a job worth leaving your wife and kids behind on another continent? Is declining an exceptional chance in your career because of your family a viable option, knowing that you really want to do this job, and that you'll suffer from it when turning it down?&lt;/p&gt;

&lt;p&gt;So I thought about this &lt;em&gt;a lot&lt;/em&gt;. A lot of my waking time was spent thinking about what I should do. My mood was like a pendulum, going from "w00t THIS IS SO AWESOME!" to "OMG WTF AM I DOING?" all the time.&lt;/p&gt;

&lt;p&gt;In the end I went for the positive choice, in my opinion. I could say "no" and things would safely stay the same as they were. I could say "yes", causing a lot of change, but giving a lot of new chances in a future I have no idea how it will pan out. So I decided to take the gamble. It might be a mistake, it might be the start of wonderful things.&lt;/p&gt;

&lt;h2&gt;Go for it&lt;/h2&gt;

&lt;p&gt;And so I posted my signed offer back to Apple while being here in Leicester at NSConference (luckily, there's a Fedex dropoff point in the middle of the city). There's no way back now. I'm terribly excited to be working at Apple. I'm looking forward to doing wonderful things, to experience living and working in the United States, to learn, to grow.&lt;/p&gt;

&lt;h2&gt;Last hurdle: that H1-B&lt;/h2&gt;

&lt;p&gt;The last hurdle is the H1-B visa. My application is in the works, but there's no guarantee that I'll get accepted. There are so many applications for so few available visas, so we'll have to see how it goes. I know one thing: I'm going to be so pissed off if I don't get in.&lt;/p&gt;

&lt;p&gt;I don't know how it will work out. I'm just going to have to seize the day, every day.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2014-11-30:/blog/2014/11/30/easy-revealing/</id>
    <title type="html">Easy Revealing</title>
    <published>2014-11-30T22:34:09Z</published>
    <updated>2014-11-30T22:34:09Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2014/11/30/easy-revealing/"/>
    <content type="html">

&lt;p&gt;I have a confession to make: I like &lt;a href="http://revealapp.com"&gt;Reveal&lt;/a&gt;. It's such a great tool to discover why your UI doesn't appear as it should be. It's such a great way to get a decent look at the view hierarchy in your iOS app.&lt;/p&gt;

&lt;p&gt;Initially, loading Reveal required you to add the reveal framework to your project before running. While not a hassle, it was rather suboptimal because you had to remove it again before shipping the app.&lt;/p&gt;

&lt;p&gt;But when you run your project in the simulator, there's an easier way. Have it automatically start up the Reveal server, so that you don't have to connect manually, and don't have to pollute your project with a debugging lib. Why only in the Simulator? Well, the technique requires the dynamic loading of &lt;code&gt;libReveal.dylib&lt;/code&gt;. This is possible on your Mac but not on your iOS device. And the Simulator runs on your Mac, so we can use this trick to load the Reveal lib at runtime without prerequiring it in the project (to be fair, you can dynamically load libs on the device, but you'd still need to add them to your project).&lt;/p&gt;

&lt;p&gt;So let's do that. First on: some LLDB tricks.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2&gt;Making custom LLDB commands&lt;/h2&gt;

&lt;p&gt;You might not know this, but you can extend LLDB by loading Python scripts. In those scripts you can define functions which can be used directly when you're debugging. That's pretty handy! So we'll use this to create some shortcuts to load the&lt;/p&gt;

&lt;p&gt;So create a folder somewhere that can contain your LLDB scripts. I created a &lt;code&gt;lldb&lt;/code&gt; folder in my home folder, but you can place it anywhere you want.&lt;/p&gt;

&lt;p&gt;Then, create a &lt;code&gt;reveal.py&lt;/code&gt; in that folder, and give it the following contents:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-python highlight"&gt;&lt;span class="c"&gt;# require the lldb lib to interact with LLDB&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;lldb&lt;/span&gt;

&lt;span class="c"&gt;# this is called when the file is added to the script runtime&lt;/span&gt;
&lt;span class="c"&gt;# we'll invoke a lldb command that links the python functions to actual LLDB commands&lt;/span&gt;
&lt;span class="c"&gt;# in this case, we're adding reveal_start_sim and reveal_stop&lt;/span&gt;
&lt;span class="c"&gt;# note: the other functions in this file are no accessible from LLDB.&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__lldb_init_module&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debugger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;debugger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'command script add -f reveal.reveal_start_sim reveal_start_sim'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;debugger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'command script add -f reveal.reveal_stop reveal_stop'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# This is the main entry point. This will load the reveal lib and then send a notification so that it will start&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reveal_start_sim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debugger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;internal_dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Installing reveal in the simulator"&lt;/span&gt;
  &lt;span class="n"&gt;reveal_load_sim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debugger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;reveal_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debugger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Loads the libReveal.dylib from the Reveal app.&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reveal_load_sim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debugger&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;debugger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'expr (void*)dlopen("/Applications/Reveal.app/Contents/SharedSupport/iOS-Libraries/libReveal.dylib", 0x2);'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Sends a notification to the reveal server so that it actually starts&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reveal_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debugger&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;debugger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'expr [(NSNotificationCenter*)[NSNotificationCenter defaultCenter] postNotificationName:@"IBARevealRequestStart" object:nil];'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c"&gt;# Sends a notification to the reveal server so that it stops (if you'd want that)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reveal_stop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debugger&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;debugger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'expr [(NSNotificationCenter*)[NSNotificationCenter defaultCenter] postNotificationName:@"IBARevealRequestStop" object:nil];'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There's nothing more to it. We expose two new commands &lt;code&gt;reveal_start_sim&lt;/code&gt; and &lt;code&gt;reveal_stop&lt;/code&gt;. Commands we can actually use during debugging.&lt;/p&gt;

&lt;p&gt;Let's try this. Fire up your favorite iOS project - be sure to select to run on the Simulator. Run the app. Now break the app by pressing &lt;code&gt;^âŒ˜Y&lt;/code&gt;. This will give you the &lt;code&gt;(lldb)&lt;/code&gt; prompt. Now load your python script by invoking the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;command script import ~/lldb/reveal.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will tell LLDB that we'd like the &lt;code&gt;reveal.py&lt;/code&gt; script loaded into LLDB. The module will be loaded and thanks to the init there, we've just added two commands to use. There won't be any feedback, but now you can try and load the reveal lib:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reveal_start_sim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will give you something like this:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://cl.ly/image/062A1a230h35/Image%202014-12-11%20at%2012.29.05%20am.png" width="600"&gt;&lt;/p&gt;

&lt;p&gt;After that, hit &lt;code&gt;^âŒ˜Y&lt;/code&gt; to continue the app (or just type &lt;code&gt;continue&lt;/code&gt;). Now you can try to fire up the Reveal Client app, and connect to your app:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://cl.ly/image/2M2m0j1u0p1O/Image%202014-12-11%20at%2012.25.57%20am.png" width="600"&gt;&lt;/p&gt;

&lt;p&gt;Success!&lt;/p&gt;

&lt;h2&gt;Loading the script by default&lt;/h2&gt;

&lt;p&gt;Now always having to load the python script is a bit cumbersome. Luckily for us, LLDB has a mechanism to do this by default. So we can always load our reveal script so that we can have it readily available when we need it.&lt;/p&gt;

&lt;p&gt;So how do you do this?&lt;/p&gt;

&lt;p&gt;It's pretty simple: make an &lt;code&gt;.lldbinit&lt;/code&gt; file in your home folder. This file is read by LLDB when it is started (thus: everytime you debug an app). As an aside: you can also make an &lt;code&gt;.lldbinit-Xcode&lt;/code&gt; which will only be read when debugging in Xcode.&lt;/p&gt;

&lt;p&gt;In this &lt;code&gt;.lldbinit&lt;/code&gt;, you can place any regular LLDB commands. In this case, we'll use this to import the python script as we did above. So the file basically looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;command script import ~/lldb/reveal.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save the file, and now restart the debugger for your app. Try entering &lt;code&gt;reveal_start_sim&lt;/code&gt; again and you'll see that it works. No need to manually load the python file again.&lt;/p&gt;

&lt;h2&gt;Starting reveal at startup&lt;/h2&gt;

&lt;p&gt;Now wouldn't it be even better if we could have the Reveal server start by default? No need to break the app, run the command and continue. Xcode can do this for us, with a breakpoint.&lt;/p&gt;

&lt;p&gt;Go to your app delegate file (or any other class you'll know that runs early in your app lifecycle), and add a new breakpoint. Then edit the breakpoint:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://cl.ly/image/0Q3m0Z1i0223/Image%202014-12-11%20at%2012.37.25%20am.png" width="600"&gt;&lt;/p&gt;

&lt;p&gt;Basically:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add an action of type 'debugger command'. In the textfield below, enter &lt;code&gt;reveal_start_sim&lt;/code&gt; (which, thanks to the magic above, is present).&lt;/li&gt;
&lt;li&gt;tick on "automatically continue after evaluating actions"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This breakpoint will be hit when you start your app but won't halt. It will execute the command specified, starting the Reveal server and then just continue running along.&lt;/p&gt;

&lt;p&gt;After you tried this, rerun your app. Switch back to Reveal and you'll see that it can connect to your app running in the Simulator. Great success!&lt;/p&gt;

&lt;h2&gt;Finally&lt;/h2&gt;

&lt;p&gt;You can now use this technique in every project. Either using the breakpoint approach for regular Reveal debugging, or just break the app, run the &lt;code&gt;start_reveal_sim&lt;/code&gt; command and continue for occasional debugging. Up to you.&lt;/p&gt;

&lt;p&gt;You can also use the techniques described about to extend LLDB to your own needs. You can leverage &lt;code&gt;.lldbinit&lt;/code&gt; by providing custom aliases or load external scripts. You can use those external scripts to do more complex debugging should you require to.&lt;/p&gt;

&lt;p&gt;For example, &lt;a href="https://github.com/facebook/chisel"&gt;Facebook's Chisel&lt;/a&gt; uses these techniques to extend LLDB with a load of commands (highly recommended).&lt;/p&gt;

&lt;p&gt;On a related note, it might be worthwhile to read up on LLDB techniques by reading &lt;a href="http://www.objc.io/issue-19/lldb-debugging.html"&gt;this article&lt;/a&gt; in objc.io's &lt;a href="http://www.objc.io/issue-19/"&gt;19th installment&lt;/a&gt; (which is all about debugging). Some neat tricks in there.&lt;/p&gt;

&lt;p&gt;And finally, thanks to Reveal for an awesome app. Xcode6's Debug View Hierarchy is interesting but more limited than Reveal (and it doesn't always yield the correct results). Reveal rocks.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2014-10-28:/blog/2014/10/28/hunting-for-change/</id>
    <title type="html">Hunting for change</title>
    <published>2014-10-28T22:24:28Z</published>
    <updated>2014-10-28T22:24:28Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2014/10/28/hunting-for-change/"/>
    <content type="html">

&lt;p&gt;&lt;em&gt;(This blogpost expands on a number of tweets I published this evening)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I've been looking for change all my life I think. Not actively. Or sometimes more active than at other moments. I've never been somebody who values status quo or who gets stuck in habits. I rarely get up at the time each morning, I'm not bothered when I get to lunch at 1pm instead of 12:30. I don't have to take the car to work each day, or I have no problem with skipping my daily train routine for another route or transportation option.&lt;/p&gt;

&lt;p&gt;Not sure where this comes from, but I'm kinda always on the lookout for new things. For example, I quite abruptly switched from .Net consultancy and programming to iOS development. This wasn't easy, you know. A whole new platform, a new language, a new way of doing things. But at the time I was given the opportunity to do this, and I took it with two hands. It was time for something new. Time to learn new things, time for change.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;The downside seems to be that my head is almost always full of ideas, things to think about or stuff that I want to do. The additional downside is that these ideas/things/stuff are very personal (and most of the time related to coding, to be honest). The hard part is that it's hard to apply the same virtuosity to other areas which might be able to use it. For example, I find it hard to put any time in improving our house, or even think about it. It's not that I don't want to (who doesn't want a nice house to live in?) but it feels like most of the time I cannot be bothered. A sort of apathy which I have for certain things but not for (a few) specific others.&lt;/p&gt;

&lt;p&gt;By the way, this also happens in conversations. I can genuinely start a conversion, but get "bored" in the middle of it. It's absolutely not intentional and it (most of the time) is not even the fault of the people I'm talking to. But it is entirely possible to enter a "looking for a fuck to give" state without even knowing it myself. And then the conversion ends, and then I'm left thinking: I could have asked that or that. But I didn't. It's not that I don't like the conversation. My mind just wanders off and then I'm fucked. (Told you I'm strange. Didn't I?)&lt;/p&gt;

&lt;p&gt;And so my head seems awful full. It's not easy to find peace and quiet on the inside. This tweet by &lt;a href="http://twitter.com/bluecrowbar"&gt;@bluecrowbar&lt;/a&gt; quite nailed it:&lt;/p&gt;

&lt;div class="embed tweet"&gt;
&lt;blockquote class="twitter-tweet" align="center" width="350"&gt;
&lt;p&gt;Relaxing makes me nervous.&lt;/p&gt;â€” Steven Vandeweghe (@bluecrowbar) &lt;a href="https://twitter.com/bluecrowbar/status/520630884769488896"&gt;October 10, 2014&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;I feel like that all the time. It's not like I'm actually always working. I can spend the whole night on the couch trying to get anything done, which doesn't work out except for browsing Facebook or Twitter, telling myself I'll be doing this or that in 5 minutes (ah yes, procrastination, my friend). But I just don't do relaxing very good. I hardly make time to go out for drinks. I never go see a movie. We don't have a TV in our house and while I can watch TV on my iPad I hardly ever do (except for occasionaly binge watching of some Netflix series). I've tried gaming too. Mostly can't be bothered apart from the occasional spikes. I've been meaning to brew some beer but found no way to make some time for it. The little bit of intentional relaxing can be - wait for it - coding. Not because I have to, but because I can. Try things out, learn new stuff. But don't put me on a couch with a beer to watch some telly: no sir. I tend to try to play a game of squash every week. That works, most of the time. I have to force myself to stop the thinking and focus on the game, but in busy times I found even that hard.&lt;/p&gt;

&lt;p&gt;There's just so many things I want to do or try or see. And people to meet, talk to, learn from. But then there's life which comes interfering with any plans you make trying to make that possible. So many dreams to chase, so many opportunities to twart those plans.&lt;/p&gt;

&lt;p&gt;So I've thought: maybe I should embrace life as it is. Just go along. Take it easy, just go to work, get it done, get back home and enjoy my wife and kids. Follow the flow. Do as &lt;a href="http://www.twitter.com/bmf"&gt;Mike Lee&lt;/a&gt; apparently did, get off the interwebs for a little while or at least cut back. Find your own tempo in the context of your family and friends.&lt;/p&gt;

&lt;p&gt;I'm afraid that won't work for me. So easily bored, so hungry to learn more (in my limited field of work, to be honest. I haven't found the need to learn music, for example). So trying to do my job like it should. So trying to be likeable for who I am. Wanting to share the things I learn with other people (blogposts, teaching, sharing with coworkers) to make the world a better place even if it's only that little bit.&lt;/p&gt;

&lt;p&gt;So yeah, always looking for change. Stay hungry, stay foolish, I guess. But sometimes, you're full. And the hard part is when to stop in time to clear your metaphorical stomach. I usually fail at that.&lt;/p&gt;

&lt;p&gt;Now if you'll excuse me, I have a new version of OSX to install because this current one is getting stale.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2014-09-23:/blog/2014/09/23/explicitly-implemented-protocols/</id>
    <title type="html">Explicitly implemented protocols</title>
    <published>2014-09-23T14:07:27Z</published>
    <updated>2014-09-23T14:07:27Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2014/09/23/explicitly-implemented-protocols/"/>
    <content type="html">

&lt;p&gt;While traveling home from NSSpain yesterday, I got an idea for a new app. Nothing groundbreaking, and more on that later, but it required the use of health kit. I also decided to write this one in Swift, for fun and profit but mostly for fun (and perhaps also because practice makes perfect).&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2&gt;The problem&lt;/h2&gt;

&lt;p&gt;I soon stumbled on the "you need to authorize HealthKit access" mess. It's even more an issue in HealthKit than with the other APIs since you have to ask permission to read and/or write &lt;em&gt;for each type&lt;/em&gt; of object you want to access.&lt;/p&gt;

&lt;p&gt;So I decided to write a sort of proxy class that would handle the requesting, shielding off that hassle (since I would be needing access in several parts of the code). A pattern I've used for this kind of APIs before is that you have the class with the public API, which have an "access" call (for example). That call takes a block with one parameter: the "priviledged" part of the API. When the block is called, you can be sure to have the proper permissions making your code simpler and more obvious. Something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;HealthKitAccessorReader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;someReadOperation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;someValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;AnyObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;AnyObject&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;accessor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;HealthKitAccessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;neededObjectType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;accessor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;HealthKitAccessorReader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
    &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;someReadOperation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I've made APIs like these before in C#, because I think it's an interesting and useful pattern. You're able to restrict access to certain parts of the API depending on the context the user of your API needs. In the example above, the &lt;code&gt;read&lt;/code&gt; method only provides access to read operations. We could have a &lt;code&gt;write&lt;/code&gt; method that only provides access to write operations (or even a &lt;code&gt;readwrite&lt;/code&gt; which does both).&lt;/p&gt;

&lt;p&gt;And the way I'd do this in C# is using private interface implementations. This is a technique which allows you to  specify that an implementation of an interface method is only usable if you use the class which implements it &lt;em&gt;as an interface&lt;/em&gt;. For example, given this declarations:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-csharp highlight"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="n"&gt;IHealthKitAccessorReader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;someReadOperation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;someValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HealthKitAccessor&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IHealthKitAccessorReader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;HKHealthKitStore&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...;&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Action&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IHealthKitAccessor&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;makeSureYouHaveAccess&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nf"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;IHealthKitAccessorReader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;someReadOperation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;someValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;somethingSomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you can do:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-csharp highlight"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;accessor&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;HealthKitAccessor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;accessor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;someReadOperation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but you can't do:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-csharp highlight"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;accessor&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;HealthKitAccessor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;accessor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;someReadOperation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;even though &lt;code&gt;HealthKitAccessor&lt;/code&gt; implements &lt;code&gt;IHealthKitAccessorReader&lt;/code&gt;. This is because we explictly implemented the interface method, and so it's only available if we approach accessor as an instance of &lt;code&gt;IHealthKitAccessorReader&lt;/code&gt;. So technically, you can do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-csharp highlight"&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;accessor&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;HealthKitAccessor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;accessor&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;IHealthKitAccessorReader&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;someReadOperation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which will work, even though it's not the intention of the API.&lt;/p&gt;

&lt;p&gt;I've found this technique pretty useful in the past to have a class implement an API but shield direct access to it without using the specialized calls. The interface calls do not show up in intellisense/autocompletion when using the class, so it's pretty obvious in use.&lt;/p&gt;

&lt;p&gt;And maybe this wasn't clear, but you can choose which of the interface methods to implement implicitly or explictly. So some methods could be available on the class, some couldn't. Also, this way you can have more than one method of the same name if more than one interface implements those methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-csharp highlight"&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="n"&gt;IFirstLine&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Halp&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="n"&gt;ISecondLine&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Halp&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Support&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IFirstLine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ISecondLine&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Halp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// default to first line, this implements IFirstLine help, and exposes Halp on Support.
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;ISecondLine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Halp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// second line
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now in Swift (and this ends the C# interlude), this isn't possible. Having the same structure like before but in Swift gives us this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;HealthKitAccessorReader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;someReadOperation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;someValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;AnyObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;AnyObject&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;HealthKitAccessor&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;HealthKitAccessorReader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;HKHealthKitStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;HealthKitAccessorReader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;makeSureYouHaveAccess&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nf"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;someReadOperation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;someValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;AnyObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;AnyObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;somethingSomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But this allows us to call both &lt;code&gt;read&lt;/code&gt; and &lt;code&gt;someReadOperation&lt;/code&gt; on any instance of the class, which is not what we want:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;accessor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;HealthKitAccessor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;accessor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
    &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;someReadOperation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// but this also works&lt;/span&gt;
&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;someReadOperation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;The fix&lt;/h2&gt;

&lt;p&gt;This does not mean we cannot use this pattern in Swift. We just need an inner proxy struct that implements the methods of the protocol:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;HealthKitAccessor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;HKHealthKitStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;HealthKitAccessorReader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;makeSureYouHaveAccess&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nf"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;Reader&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;HealthKitAccessorReader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;accessor&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;HealthKitAccessor&lt;/span&gt;

    &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;accessor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;HealthKitAccessor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accessor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;accessor&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;someReadOperation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;someValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;AnyObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;AnyObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;accessor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;somethingSomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is not bad, of course. The code is a bit less obvious because you need to have this inner class (which might implement more than one protocol, of course). And in the implementation of that inner class you always need to deference the original object first before using it. But that's just that. In effect you're moving the gist of your implementation to the inner class instead of in the class itself. When writing more complex APIs (like fluent APIs), this might become a bit cumbersome. But again, that's just than and mostly a minor inconvenience. In a way the code is a little more correct that using the explicitly implemented interface, but I've found in the past that being able to use the root class directly is more clean codewise anyway. So it's a bit of a tradeoff between the-academic-way-to-do-it and code clarity.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I think that explictly implemented protocol methods would be a valuable addition to Swift. I think they'd be handy (the same for abstract classes, but that's another discussion) for the points given above. The benefit of being able to use all internals of the class directly without dereferencing the original object makes the implementation more clear and there's no need for an internal proxy class. While the pattern is possible to use in Swift is required a bit more code and thus maintenance when changing the API in the future. But I guess that's a reasonable price to pay (until they add explicitly implemented protocol methods).&lt;/p&gt;

</content>
  </entry>
</feed>

