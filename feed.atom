<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://blog.inferis.org/</id>
  <title>Inferical Writings</title>
  <updated>2015-10-01T07:15:24Z</updated>
  <link rel="alternate" href="http://blog.inferis.org/"/>
  <link rel="self" href="http://blog.inferis.org/feed.atom"/>
  <author>
    <name>Tom Adriaenssen</name>
    <uri>http://inferis.org</uri>
  </author>
  <entry>
    <id>tag:blog.inferis.org,2015-10-01:/blog/2015/10/01/and-so-it-begins/</id>
    <title type="html">And so it begins</title>
    <published>2015-10-01T07:15:24Z</published>
    <updated>2015-10-01T07:15:24Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/10/01/and-so-it-begins/"/>
    <content type="html">

&lt;p&gt;I've been a developer for while now... 18 years, to be exact. &lt;/p&gt;

&lt;p&gt;I started in 1997, fresh out of university - without carrying any kind of degree, to be honest. I had learnt a lot there though: I had my first tastes of the internet there, and saw the web in its infancy, growing to a budding communication tool for a wide variety of people. And so I started in October 1997 as a web developer in an Antwerp-based company called iM@Gic. It was a fun place to work at, and we made some great sites there given the technology we had to our disposal (all coded in Perl, baby). &lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;But after a year or 2 I felt that I was stuck in the job, not learning enough, hitting some kind of ceiling. And so I moved companies and joined Evisor in 1999. Evisor was a "new media" company, focusing on e-business solutions, growing like cabbage in the dotcom era. It was an even more fun place to work; I guess it had a bit of a startup mentality even though we mostly did client work. I spent some time in the Microsoft Compentence Center, jumping on the freshly booted dot-net bandwagon, and later switched to the Mobile Competence Center. Doing mobile in 2001 was, eh, not like it was today. We mostly had Palm Pilots to play with, or Nokia 6510's with a super duper WAP browser. Incredibly cool things at the time, but so limited now. &lt;/p&gt;

&lt;p&gt;But alas, those good times also came to an end: Evisor was acquired by PwC Consulting (which subsequently was acquired by IBM, just a year later). The subsequent change in company culture bothered me, and the home-work distance surely didn't help either. I looked for a new job nearby, and by the middle of 2002 I had found a new job at Frontline, back in Antwerp where I lived. My work there consisted of web development and application development. Again, it was a fun place to work at (I never regretted career choices in that regard). Unfortunately, a series of events caused the company to go bankrupt not 6 months after I started working there. So by the end of 2002, I was out of a job.&lt;/p&gt;

&lt;p&gt;It was then that I decided I'd go "indie". The expierence with Frontline's demise bothered me in that I had absolutely no control over what had happened. I wanted that control for myself, to find my own direction. If it went wrong, it would be my own fault.&lt;/p&gt;

&lt;h2&gt;That Indie Life&lt;/h2&gt;

&lt;p&gt;And so I became a freelancing developer, immediately joining a jumpstarted continuation of Frontline called Frontlink (yeah, ¯\_(ツ)_/¯). It was not an easy time. My rates were too low (I discovered too late), and the work was not as challenging as it had been at Frontline. And so after half a year or so, I moved on to other projects. As an indie, I've done several types of work. Small projects, on a pretty casual basis working with or through former collegues. But also larger projects, more formal ones, with important bid phases before actual work. I also worked on "time and material" stints for companies, doing all kinds of work for them and their clients. &lt;/p&gt;

&lt;p&gt;I've been doing that indie/freelancing work for almost 13 years now. I think I've done well. There were times where growth was an option, but I never looked forward to managing people (well, not doing the paperwork and stuff). There were times where I hit rock bottom, a few times even pretty hard. Those times were not easy. There were so many cool interesting projects, but also a lot of miscalculations. &lt;/p&gt;

&lt;p&gt;&lt;img class="fullwidth" src="http://c.inferis.org/image/0P1n1t1G3m1L/work_2.jpg"&gt;&lt;/p&gt;

&lt;p&gt;I've worked for a number of very cool companies (who treated me like one of their own, and I likewise acted like I was one of their own). The most interesting that come to mind are iPASoftware, 10to1 and last but not least iCapps. iPASoftware offered me a taste of developing your own frameworks (I built a large part of their internal RAD framework, which was pretty extensive), and the first taste of leading a team. 10to1 offered me the chance to join them as an iOS developer, even though I had no experience at all in that field (I would not be where I am now without them, of that I am sure). The people I met there I still consider to be amongst my best friends. And at iCapps I could better myself as a team lead, first leading the Bolero iOS team, later in a more general role in the company (such a fruitful environment to work in, by the way). &lt;/p&gt;

&lt;p&gt;I learned a lot at those companies, and I am very grateful to them for their confidence in my abilities. &lt;/p&gt;

&lt;h2&gt;Apple&lt;/h2&gt;

&lt;p&gt;Today, October 1st, I start my new job as a UIKit Frameworks Engineer. It certainly feels like starting a new chapter. So many things to close off since I'm terminating my freelancing life. Additionally, this job at Apple is like something I have never done before, it is novel on so many levels. &lt;/p&gt;

&lt;p&gt;&lt;img class="fullwidth" src="http://c.inferis.org/image/3m0G1u0g1M0T/20141103_095233__IMG_0316.jpg"&gt;&lt;/p&gt;

&lt;p&gt;Certain things haven't exactly turned out as planned, so when I'm stepping on the plane to SFO this Saturday my relocation will be temporary. After about a month of bootcamp in the US with the UIKit team, I'm coming back home to continue my work from Belgium. I'd like to stress that this is a temporary situation: I will only work here for about a year after which I will still move to the US to join the team in Cupertino (on a somewhat less stressful visa process). However, I am very grateful to Apple that I still get the possibility to actually do this job: I am well aware of the extra effort this requires.&lt;/p&gt;

&lt;p&gt;Monday, October 5th is my &lt;em&gt;real&lt;/em&gt; start date in Cupertino (coincidentally on the date Steve Jobs died, which is going to be an, eh, interesting experience I think). I look incredibly forward to it (jetlagged as I will be).&lt;/p&gt;

&lt;h2&gt;Finally&lt;/h2&gt;

&lt;p&gt;And in closing, a small fun fact: &lt;strong&gt;all&lt;/strong&gt; jobs/projects I have had since 2008 were via an (indirect) Twitter link. Somebody I knew on Twitter had a job for me, or knew somebody who had. Or people who knew me via Twitter passed on my credentials to companies looking for a job. And even this new job started out with a reply to a tweet, albeit via email. So yeah: you can say a lot about Twitter (as a tool), but it surely facilitated a lot of my career. &lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-09-25:/blog/2015/09/25/xcodeghost-verify-your-xcode/</id>
    <title type="html">XcodeGhost: verify your Xcode</title>
    <published>2015-09-25T13:23:09Z</published>
    <updated>2015-09-25T13:23:09Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/09/25/xcodeghost-verify-your-xcode/"/>
    <content type="html">

&lt;p&gt;&lt;em&gt;Update Sept 28th: this article is now also &lt;a href="http://www.icapps.com/xcodeghost/"&gt;cross-posted&lt;/a&gt; on the &lt;a href="http://www.icapps.com/blog/"&gt;iCapps&lt;/a&gt; blog, as part of their &lt;a href="https://twitter.com/hashtag/iCappsiOSMonth"&gt;#iCappsiOSMonth&lt;/a&gt; series in September 2015&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Recently a malware issue for the iOS app store (which is a rarity in itself) called &lt;a href="http://www.macrumors.com/2015/09/20/xcodeghost-chinese-malware-faq/"&gt;XcodeGhost&lt;/a&gt; made its appearance. I'm not going to go into the &lt;a href="http://researchcenter.paloaltonetworks.com/2015/09/novel-malware-xcodeghost-modifies-xcode-infects-apple-ios-apps-and-hits-app-store/"&gt;gory&lt;/a&gt; &lt;a href="http://researchcenter.paloaltonetworks.com/2015/09/more-details-on-the-xcodeghost-malware-and-affected-ios-apps/"&gt;details&lt;/a&gt;, but it boils down to a malware injection through a patched version of Xcode. When building iOS apps with such an Xcode, the app binary is modified transparantly, injecting malware into your app at runtime. Nothing is downloaded from the internet, the malware just gets compiled into your app.&lt;/p&gt;

&lt;p&gt;There's not a lot you can do about this, except to make sure that you're using a legit Xcode. You can do this by &lt;strong&gt;never-ever&lt;/strong&gt; downloading a version of Xcode from a location other than Apple's, which is either from the Mac App Store, or from &lt;a href="http://developer.apple.com"&gt;http://developer.apple.com&lt;/a&gt;) (I know this is easier said than done, saying this from my chair in the middle of super-connected Europe).&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;But, once you have an Xcode installed, it doesn't hurt to verify its authenticity once in a while, especially if you use a build server to deliver your products.&lt;/p&gt;

&lt;p&gt;In the &lt;a href="https://developer.apple.com/news/?id=09222015a"&gt;communication&lt;/a&gt; Apple released about XcodeGhost, they mention a simple tool to verify your Xcode. Fire up the command line and enter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spctl --assess --verbose /Applications/Xcode.app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;spctl&lt;/code&gt; is a command that manages the security assessment policy subsystem of OSX, which is used to define the system software policy (what you can install -- think &lt;em&gt;GateKeeper&lt;/em&gt;) and code signing requirements.&lt;/p&gt;

&lt;p&gt;If you get back a response which includes &lt;code&gt;accepted&lt;/code&gt; (e.g. &lt;code&gt;/Applications/Xcode.app: accepted source=Mac App Store&lt;/code&gt; or &lt;code&gt;/Applications/Xcode.app: accepted source=Apple&lt;/code&gt;) you're in the safe zone and Xcode is not compromised. If you get back something else, chances are that your Xcode is compromised. It doesn't necessarily means that: if you accidentally edited a header file in the .app bundle, the assessment tool will also notice this and will report an error. 
However, if you see a mention of &lt;code&gt;CoreServices&lt;/code&gt; passing by in the output of &lt;code&gt;spctl&lt;/code&gt;, you're probably going to have a problem. By the way, the command can take a while so don't worry if it doesn't pony up an answer right away.&lt;/p&gt;

&lt;p&gt;In any case, if you get an error it's a good idea to download a fresh copy to be safe. Verify the downloaded app again, to make sure you updated it correctly.&lt;/p&gt;

&lt;h2&gt;Jenkins&lt;/h2&gt;

&lt;p&gt;Now, you don't want to be doing this manually on a regular basis, especially on a build server. At &lt;a href="http://icapps.com"&gt;iCapps&lt;/a&gt;, we have more than one Xcode version on the server in order to support older projects (or until they are upgraded to newer versions of Xcode). So what we did was create a small shell script which fires off the &lt;code&gt;spctl&lt;/code&gt; command. That script takes a path to any Xcode.app as an argument. So we have that script run each morning to verify all of our Xcode versions. The script terminates with a faulty exit code if the &lt;code&gt;spctl&lt;/code&gt; output doesn't contain &lt;code&gt;accepted&lt;/code&gt;, causing that job to fail. The failed job sends of an email to the development team so we get notified pretty quick in case something would go wrong.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/1x2M1L2u2O3J/Untitled-1.png"&gt;&lt;/p&gt;

&lt;p&gt;The script itself is pretty simple, like I said:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-sh highlight"&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Validating '&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;'. This can take a while."&lt;/span&gt;
&lt;span class="nv"&gt;OUTPUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;spctl --assess --verbose &lt;span class="nv"&gt;$1&lt;/span&gt; 2&amp;gt;&amp;amp;1&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$OUTPUT&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$OUTPUT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ accepted &lt;span class="o"&gt;]]&lt;/span&gt;; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"'&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;' validates just fine."&lt;/span&gt;
    &lt;span class="nb"&gt;exit &lt;/span&gt;0
&lt;span class="k"&gt;fi&lt;/span&gt;;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"'&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;' does not validate."&lt;/span&gt;
&lt;span class="nb"&gt;exit &lt;/span&gt;1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should be pretty obvious. There's one thing to point out: the &lt;code&gt;spctl&lt;/code&gt; command outputs it's assessment on &lt;em&gt;stderr&lt;/em&gt; so we need to pipe that output to &lt;em&gt;stdout&lt;/em&gt; for the backtick invocation to be able to grab it. You do this by adding &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; to your command invocation (standard error = file number 2, standard output = file number 1). If you don't do this, the script fails even though the command finds no problem.&lt;/p&gt;

&lt;p&gt;We added this script to a git repo, set up a jenkins job with that repo and had it run periodically, in our case each morning at 7am:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/2P3E1K2W030w/Image%202015-09-25%20at%204.00.51%20PM.png"&gt;&lt;/p&gt;

&lt;p&gt;But you could schedule this however you wanted, of course.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why use a repo and not install the script on the server directly&lt;/em&gt;, you ask? First of all it's a lot easier to keep track of any changes, and in case it needs changing you can do the changes locally, try them out and push to the repo. The server is updated automatically at the next validation job run.&lt;/p&gt;

&lt;p&gt;And that job, all it does is invoke the script:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/0P2k3Z2S3c1Y/Image%202015-09-25%20at%203.58.29%20PM.png"&gt;&lt;/p&gt;

&lt;p&gt;The parameter obviously changes for each Xcode install: just change the path to the Xcode.app you want to verify.&lt;/p&gt;

&lt;p&gt;Finally, set up a post build email notification so that you actually get a warning when something goes south:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/2b2l1W432O07/Image%202015-09-25%20at%204.02.57%20PM.png"&gt;&lt;/p&gt;

&lt;p&gt;And that's it. You're now a little bit safer in this cruel, cruel world. Not entirely safe though: if somebody gains access to your server and messes with your Xcodes they'll probably find and disable these jobs too (if only that: if they are resourceful enough, they might hack into spctl too). But this is better than nothing at all. &lt;/p&gt;

&lt;p&gt;The best part: if you 🌟&lt;em&gt;Do Things Right&lt;/em&gt;🌟 (which includes &lt;em&gt;Not Ever Turning GateKeeper Off&lt;/em&gt;), this should never bother you. 😉&lt;/p&gt;

&lt;h2&gt;Fastlane&lt;/h2&gt;

&lt;p&gt;And oh, the fabulous &lt;a href="http://fastlane.tools"&gt;Fastlane&lt;/a&gt; toolchain by &lt;a href="http://twitter.com/krausefx"&gt;Felix Krause&lt;/a&gt; also provides a &lt;code&gt;verify&lt;/code&gt; action that you can use in your Fastfiles, making sure that you verify the Xcode you're going to use for that build is valid. The build will take longer of course, but it's the price to pay for ensured security. So if you're using Fastlane and want to make sure your builds are "safe of malware" add this action to your Fastfile.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-09-14:/blog/2015/09/14/wanted-new-maintainer-for-viewdeck/</id>
    <title type="html">Wanted: new maintainer for ViewDeck</title>
    <published>2015-09-14T15:07:24Z</published>
    <updated>2015-09-14T15:07:24Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/09/14/wanted-new-maintainer-for-viewdeck/"/>
    <content type="html">

&lt;p&gt;I'm pretty sure that if you found this blog, you also know about a little piece of software I wrote a few years ago: &lt;a href="https://github.com/ViewDeck/ViewDeck"&gt;ViewDeck&lt;/a&gt;. The &lt;a href="https://github.com/ViewDeck/ViewDeck/commit/463324184a67a7fa24c9207352298e69da0d66b7"&gt;initial commit&lt;/a&gt; was on December 3rd, 2011. I'd been doing nearly a year of iOS development at that moment, and both the Facebook and Path apps came with this nifty new feature we now call "a hamburger menu". &lt;/p&gt;

&lt;p&gt;&lt;img class="right" src="http://cl.ly/063X412a1i2U2e3f3D02/Image%202012.01.26%2023:26:55.png" width="240"&gt; I remember finding it an interesting piece of user interaction and wondered how it was implemented, and so set out one night to try to recreate something like it myself. At that point, not an awful lot of libraries existed that recreated that UX, so I had no way to base my code on somebody elses creations. By the end of the night I had a mostly working prototype, and decided to continue working on it, and to share it with the world. After all it might come in handy for someone else and it was a fun way of showing of what I did (&lt;strong&gt;YEAH BABY&lt;/strong&gt;).&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;ViewDeck grew, more features were added, people started creating pull requests with some pretty cool stuff. It got to a point the library started to become a bit bloated with all the features it had gained (AFAIK, &lt;a href="https://github.com/mutualmobile/MMDrawerController"&gt;MMDrawerController&lt;/a&gt; was created as a sort of reaction against that, but I might be wrong). It required quite a bit of support to be honest, support for which I didn't always have the time.&lt;/p&gt;

&lt;p&gt;And then, a refactoring to fix a number of problems introduced more problems that it fixed, it seemed. Version 2.3 was "the bridge too far". Fixing this would prove to be a very timeconsuming problem due to the myriad of UI configurations possible. So I kind of abandoned development, not even bothering to retract 2.3 from CocoaPods but just left a notice that 2.2.11 should be used. A bit shameful, I admit. The fact that iOS7 had just arrived and introduced a number of additional complexities (A transparent status bar, for example, or translucent navigation bars) didn't help at all. That was the last update. I tried restarting work on it a few times, but I never retained the traction I had up till version 2.2. It's been a few years now since I touched the code.&lt;/p&gt;

&lt;p&gt;I never understood why it was and still is so popular. At the time of writing it has 4.416 stars on Github, 901 forks and gets cloned between 10 to 30 times per day. This means people still use it. Not by an immense number, but it's not a small forgotten library either. I fondly remember finding out that the Foursquare app used it, and have gotten several emails of people telling me that they used it in their app. It's great fun to have people use your "framework".&lt;/p&gt;

&lt;p&gt;But the time has come to let it go more formally. My future job at Apple interferes with maintaining open source (UIKit related) software (which I can understand), and even apart from that I have no intention to continue development or maintance for ViewDeck. &lt;/p&gt;

&lt;p&gt;So... I'm looking for one or more people to take over the library. It's going to be all yours, and I will not interfere with its future development. The one thing I ask is to be recognized and mentioned as its original author, but that's it. If you want to turn it into something completely else: fine by me. I have moved the repo from its original location under my Github account to a newly created ViewDeck organisation in order to "set it free". If nobody takes over: again, fine by me, the code won't go away. But if somebody wants to take the current code and do magic with it: I'd love that. I know I'm not leaving a perfectly maintained library behind, but setting the code free is the least I can do. &lt;/p&gt;

&lt;p&gt;Interested? Shoot me a message on &lt;a href="https://twitter.com/inferis"&gt;Twitter&lt;/a&gt; and we'll talk. And oh: I'm fine with adding more than one maintainer. :)&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-08-18:/blog/2015/08/18/sound-debugging/</id>
    <title type="html">Sound debugging</title>
    <published>2015-08-18T15:52:27Z</published>
    <updated>2015-08-18T15:52:27Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/08/18/sound-debugging/"/>
    <content type="html">

&lt;p&gt;I'd like to mention a trick I use often while debugging, a trick I learned from my good friend &lt;a href="https://twitter.com/qnoid"&gt;Markos Charatzas&lt;/a&gt;: triggering a sound when a breakpoint is hit. It's a pretty simple but useful trick, especially if you're debugging repeatable actions and you want to know when they happen.&lt;/p&gt;

&lt;p&gt;I'm talking about this:&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;center&gt;
&lt;iframe src="https://player.vimeo.com/video/96070920?color=aaafb3" width="600" height="338" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;&lt;sub&gt;&lt;a href="https://vimeo.com/96070920"&gt;Sound Debugging - Markos Charatzas&lt;/a&gt; from &lt;a href="https://vimeo.com/n%0Asconf"&gt;NSConference&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/sub&gt;
&lt;/center&gt;

&lt;p&gt;If you don't have 11 minutes to watch the video (but please do, it's interesting!), here's short recap.&lt;/p&gt;

&lt;p&gt;When setting a breakpoint in Xcode, you can set a number of options on the breakpoint:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/2E3f2n2k2q0k/Screen%20Shot%202015-08-18%20at%2015.49.17.png" width="520"&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;the condition&lt;/strong&gt;: an expression which is evaluated each time the breakpoint is hit; when the expression yields a truthy value, the breakpoint is actually hit. If it returns falsy, it's like nothing has happened.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;**Ignore((: the number of times the breakpoint should be ignored. This is useful when I know the code in a loop goes ok for let's say the first 100 times, but fails the 101st or 102nd time. You can set a breakpoint before the offending line of code, have it ignored 100 times and then trigger the 101st time. Saves you a lot of "continue"s. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Action: you can add one or more actions to the breakpoint. You've got the following options: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;run an apple script &lt;img class="right" src="http://c.inferis.org/image/3K3k2v0b0Y3n/Screen%20Shot%202015-08-18%20at%2015.55.54.png" width="183"&gt;
&lt;/li&gt;
&lt;li&gt;capture a GPU frame&lt;/li&gt;
&lt;li&gt;run an LLDB command&lt;/li&gt;
&lt;li&gt;Log a message to the console&lt;/li&gt;
&lt;li&gt;run a shell command&lt;/li&gt;
&lt;li&gt;play a sound&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;finally, you can specify if the breakpoint &lt;strong&gt;automatically continues&lt;/strong&gt; after it has evaluated all the actions. If you don't have any actions, this is a rather silly option since nothing will happen, but it's very useful when you do specify actions.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Sound&lt;/h2&gt;

&lt;p&gt;The ones I used most are &lt;code&gt;run an LLDB command&lt;/code&gt;, &lt;code&gt;log a message&lt;/code&gt; and &lt;code&gt;play a sound&lt;/code&gt;. The first two are pretty handy for adding ad-hoc logging to you app. No need to add manual &lt;code&gt;NSLog()&lt;/code&gt; or &lt;code&gt;print()&lt;/code&gt; statements: you can just log from a breakpoint you can set on the fly. &lt;/p&gt;

&lt;p&gt;Finally: there's &lt;code&gt;play a sound&lt;/code&gt;. There's a number of sounds you can choose from:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/2w1o213J020c/Screen%20Shot%202015-08-18%20at%2016.05.11.png" width="509"&gt;&lt;/p&gt;

&lt;p&gt;When setting a &lt;em&gt;sound&lt;/em&gt; action, it does exactly what you'd expect: it plays the sound you selected. Some of the sounds are long, some are short. There's one little caveat: it blocks your program while it plays the sound! So depending on where you place the sound, this action can have a serious "performance" impact on your app. That's why I usually go for short sounds (Morse, Tink, Bottle, Frog, Pop) for breakpoints which tend to get hit pretty frequently, and longer ones for "once in a while" breakpoints.&lt;/p&gt;

&lt;p&gt;The cool thing about this technique is that you can actually hear what your code is doing (much to annoyance of your coworkers, so put headphones one when using this). If some concurrent code is not doing what you are expecting it to do, place some sound breakpoints in strategically placed locations in your code and you can just hear what is happening. If you don't get the sound pattern you expected, something is not going how you planned it and you can investigate further from there (with more information, because you &lt;em&gt;do&lt;/em&gt; know now how the order of execution is). You can also log this to the console (remember, you can have more than 1 action per breakpoint) for later introspection, but I've found that the listening and analysing the &lt;em&gt;music&lt;/em&gt; you code plays is a very valuable debugging technique.&lt;/p&gt;

&lt;p&gt;I usually have one or more sound breakpoints in my concurrent "backend" code (when a network requests returns, for example, or after a long calculation), and then another one (or more) in UI facing code, so that you know that background piece of code has it's effect on the UI.&lt;/p&gt;

&lt;p&gt;Or you can set it in any view related code, for example in the &lt;code&gt;-updateConstraints&lt;/code&gt; or &lt;code&gt;-viewDidLayoutSubviews&lt;/code&gt; to know when what happens. &lt;/p&gt;

&lt;p&gt;Like I said, it's a very useful technique since it allows you to use another sensory trigger to gather information, which is always a good thing. &lt;/p&gt;

&lt;p&gt;Let's just hope Apple doesn't add a &lt;em&gt;smell&lt;/em&gt; action to that list. 😳&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-08-14:/blog/2015/08/14/imagenamed-and-multiple-bundles/</id>
    <title type="html">imageNamed: and multiple bundles</title>
    <published>2015-08-14T14:10:27Z</published>
    <updated>2015-08-14T14:10:27Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/08/14/imagenamed-and-multiple-bundles/"/>
    <content type="html">

&lt;p&gt;I've been working on a largeish project for a client for the last few months. We're have to modularized our code into several sections using CocoaPods (this is a post worth on itself, really). &lt;/p&gt;

&lt;p&gt;One of the problems you encounter with this approach is that for each pod, CocoaPods creates a bundle with resources for that pod (at least it does so when you tell it to do that). It's the only good way to package pod resources into the main app. This means that our resources do not all live in the main bundle but in seperate bundles (which themselves &lt;strong&gt;do&lt;/strong&gt; live in the main bundle). This is no problem in itself, but it can cause loading problems of resources in those bundles. It doesn't pose that much of an issue when you specify images in a nib since iOS will search in the nib's bundle too, but it's a bit harder to get resources from within your code&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Basically, you're going to be doing this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt; &lt;span class="nf"&gt;loadTheNeededBundle&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// funk that
&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="nf"&gt;pathForResource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nf"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="nf"&gt;imageWithContentsOfFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First of all, you need to know where the bundle is. I'm not going to add code for this, because you might already have a reference to this bundle. And otherwise you need to lookup the bundle within your main bundle. But we'll get to that later.&lt;/p&gt;

&lt;p&gt;Then, you need to find out if there's a file named just like the image name you're after. This poses a second hurdle: for &lt;code&gt;imageNamed:&lt;/code&gt; you can specify an image with or without the extension. That's not going to work here since we explicitly need the extension (either separately or in the resource name) otherwise the path cannot be found. And only then, when you have the actual physical path of the resource, you can load up the image.&lt;/p&gt;

&lt;p&gt;While not a lot of code, reusing these same lines of code becomes tedious and repetitive. And we don't like repetitive code, do we? &lt;/p&gt;

&lt;p&gt;So on to a better solution.&lt;/p&gt;

&lt;h2&gt;Resource bundles&lt;/h2&gt;

&lt;p&gt;First of all, we need to lookup all the bundles in our app. There's no built in way to do this, unfortunately. &lt;code&gt;NSBundle&lt;/code&gt; does not have facilities to search for all app bundles. Let's cook up our own, because it's relatively easy.&lt;/p&gt;

&lt;p&gt;Turns out that all "bundled" bundles are just living in your app's main bundle:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://c.inferis.org/image/1p3G2V0M0h1s/Image%202015-08-11%20at%209.46.46%20am.png"&gt;&lt;/p&gt;

&lt;p&gt;Let's find a way to enumerate them. Like I said: that's pretty easy:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;allAppBundles&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;_bundles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt; &lt;span class="nf"&gt;mainBundle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nf"&gt;pathsForResourcesOfType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@"bundle"&lt;/span&gt; 
                                                              &lt;span class="nf"&gt;inDirectory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@"."&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bundles&lt;/span&gt; &lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt; &lt;span class="nf"&gt;bundleWithPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}];&lt;/span&gt;

        &lt;span class="n"&gt;_bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt; &lt;span class="nf"&gt;mainBundle&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="nf"&gt;arrayByAddingObjectsFromArray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bundles&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_bundles&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;+allAppBundles&lt;/code&gt; returns an array of &lt;code&gt;NSBundle&lt;/code&gt; instances, all representing a resource bundle in your app (including the main app bundle). We get those bundles like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ask the main bundles for the paths of all resources of type "bundle". This gives us a bunch of strings with bundle paths.&lt;/li&gt;
&lt;li&gt;we try to load an NSBundle for each of those paths&lt;/li&gt;
&lt;li&gt;we tack the main bundle in front of our result&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;(The &lt;code&gt;map&lt;/code&gt; in that code sample does exactly what you expect it to do: it transforms an array into objects of a different type. This particular implementation automatically discards &lt;code&gt;nil&lt;/code&gt; result instances)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We don't need to use &lt;code&gt;dispatch_once()&lt;/code&gt; here since the data we're after is mostly static anyway. Even if you call this code simulanteously from 2 threads, it might execute twice but it won't ever introduce a race condition since we're just gathering data. You *&lt;/em&gt;can** use &lt;code&gt;dispatch_once()&lt;/code&gt; of course, but it's not necessary.*&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;+allAppBundles&lt;/code&gt; gives us an ordered array of &lt;code&gt;NSBundle&lt;/code&gt;s to work with. This solves the first hurdle in our original problem. You can add this method as a category on &lt;code&gt;NSBundle&lt;/code&gt; if you'd like.&lt;/p&gt;

&lt;h2&gt;Finding an image&lt;/h2&gt;

&lt;p&gt;Now that we have "easy" access to all app bundles, we can tackle the next hurdle: find the correct instance of the image. This again is relatively easy: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;for each bundle in &lt;code&gt;allAppBundles&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;try to load the image you want &lt;/li&gt;
&lt;li&gt;if found, return image, otherwise continue&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That might look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;imageNamedGlobally&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="nf"&gt;imageNamed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt; &lt;span class="nf"&gt;allAppBundles&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bundles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="nf"&gt;pathForResource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nf"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="nf"&gt;imageWithContentsOfFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, it first tries: &lt;code&gt;imageNamed&lt;/code&gt;. This makes sure that the default behavior is still present, before falling back to our &lt;em&gt;let's search all app bundles&lt;/em&gt; approach.&lt;/p&gt;

&lt;p&gt;Good, this works, but it has a downside: you need to fully quantify the image name with the extension, otherwise it won't be found. We can solve this by explicitly adding extra checks for known extensions:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;imageNamedGlobally&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="nf"&gt;imageNamed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt; &lt;span class="nf"&gt;allAppBundles&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bundles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="nf"&gt;pathForResource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nf"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="nf"&gt;imageWithContentsOfFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;extension&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;@"jpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@"png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@"tiff"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@"gif"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@"tif"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="nf"&gt;pathForResource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nf"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;extension&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="nf"&gt;imageWithContentsOfFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Surely, the added complexity comes at a cost, since if you now drop the extension from the name the code has to go searching for the correct file. If you do this, make sure the list of extensions is in the most appropriate order (if you have more jpgs, put &lt;code&gt;jpg&lt;/code&gt; first). But better still, just use a fully quantified name &lt;code&gt;image.jpg&lt;/code&gt; so you can leave the code out.&lt;/p&gt;

&lt;p&gt;One downside of this approach is that if a image is present in more than one bundle, only the first one (in the order of the bundles as returned by &lt;code&gt;allAppBundles&lt;/code&gt;) is returned. But this usually is not a problem unless you use multiple frameworks with similar embedded image names.&lt;/p&gt;

&lt;p&gt;So that that's: just use &lt;code&gt;+imageNamedGlobally:&lt;/code&gt; instead of &lt;code&gt;+imageNamed:&lt;/code&gt; and you're set. &lt;/p&gt;

&lt;h2&gt;Swizzling&lt;/h2&gt;

&lt;p&gt;But suppose you want this behavior everywhere, or you always seem to forgot to use the &lt;em&gt;Globally&lt;/em&gt; postfix (REALLY?)? In that case, you can swizzle &lt;code&gt;+imageNamed:&lt;/code&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Now, a big fair warning!&lt;/strong&gt; Since you are changing are core UIKit component, this will have effect in &lt;strong&gt;all&lt;/strong&gt; places in your app where &lt;code&gt;+imageNamed:&lt;/code&gt; is used. This includes not only your code, but all invocations of &lt;code&gt;+imageNamed:&lt;/code&gt; in any framework or component that's loaded into your app!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With that out of the way, let's find a way have &lt;code&gt;imageNamed:&lt;/code&gt; always do the &lt;em&gt;global&lt;/em&gt; search. We'll have to &lt;em&gt;swizzle&lt;/em&gt; the default implemenation with our own implementation. &lt;em&gt;/cue dramatic music&lt;/em&gt;&lt;br&gt;
I'm going to use &lt;a href="http://twitter.com/steipete"&gt;Peter Steinberger&lt;/a&gt;'s &lt;a href="http://petersteinberger.com/blog/2014/a-story-about-swizzling-the-right-way-and-touch-forwarding/"&gt;method swizzling&lt;/a&gt; code for that (not included here, you can get it from his post).&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;makeImageNamedActGlobally&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;__block&lt;/span&gt; &lt;span class="n"&gt;IMP&lt;/span&gt; &lt;span class="n"&gt;imageNamedImp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PSPDFReplaceMethodWithBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;objc_getMetaClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"UIImage"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
        &lt;span class="k"&gt;@selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageNamed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Class&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;UIImage&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;imageNamed&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SEL&lt;/span&gt; &lt;span class="n"&gt;sel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSString&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="n"&gt;imageNamedImp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;@selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageNamed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imageNamed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt; &lt;span class="nf"&gt;allAppBundles&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bundles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="nf"&gt;pathForResource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nf"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="nf"&gt;imageWithContentsOfFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code essentially does the same as the code above, but with a slight twist. As you can see, &lt;code&gt;PSPDFReplaceMethodWithBlock&lt;/code&gt; provides us with a block for the new implementation and it returns the original implementation. We need that implementation to call the "regular" &lt;code&gt;imageNamed:&lt;/code&gt;, of course. Since that &lt;code&gt;IMP&lt;/code&gt; is just a C function, we need to cast it to the correct signature &lt;strong&gt;and&lt;/strong&gt; provide a correct &lt;code&gt;self&lt;/code&gt; and &lt;em&gt;selector&lt;/em&gt; for the call. I wrapped that part in a block of it's own to make it more readable. Also notice that we can reuse the return value from the call (the original &lt;code&gt;IMP&lt;/code&gt;) in the block itself by prepending it with &lt;code&gt;__block&lt;/code&gt; so that the compiler will keep the reference to it until the block executes. The rest of the code is the same as our original implementation since we did not rely on &lt;code&gt;self&lt;/code&gt; or &lt;code&gt;imageNamed:&lt;/code&gt; apart from that first call.&lt;/p&gt;

&lt;p&gt;You could also have this code in a &lt;code&gt;+load&lt;/code&gt; method, but I prefer to have it explicitly called in an AppDelegate so that it's clear you're doing magic. &lt;/p&gt;

&lt;p&gt;But again: this approach is probably not the most sound one, but it probably is the most lazy one. &lt;/p&gt;

&lt;h2&gt;One more thing: nibs&lt;/h2&gt;

&lt;p&gt;For completeness: you can use the same system for Nibs, by the way. Since there's no &lt;code&gt;nibNamed:&lt;/code&gt; we can create one ourselves:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-objc highlight"&gt;&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;nibNamed&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt; &lt;span class="nf"&gt;allAppBundles&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSBundle&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bundles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;UINib&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;nib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UINib&lt;/span&gt; &lt;span class="nf"&gt;nibWithName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nf"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nib&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;nib&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So that's it. &lt;code&gt;imageNamedGlobally:&lt;/code&gt; is an easy way out of doing manual bundle searching yourself. &lt;/p&gt;

&lt;p&gt;There's a few optimisations that can be made on this code, like remembering where you find an image so that you don't have to search again for every invocation. But I'll leave those as an exercise to the reader. &lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-06-30:/blog/2015/06/30/uikonf-2015/</id>
    <title type="html">UIKonf 2015</title>
    <published>2015-06-30T11:27:47Z</published>
    <updated>2015-06-30T11:27:47Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/06/30/uikonf-2015/"/>
    <content type="html">

&lt;p&gt;&lt;a href="http://uikonf.com"&gt;UIKonf 2015&lt;/a&gt;. It's been a while already, but I've too busy afterwards to do a decent writeup. I feel like I should though, because it's the first conference I attended where I was also a speaker (if you don't count my adhoc lightning talk at &lt;a href="http://nsspain.com"&gt;NSSpain&lt;/a&gt; last year, that is). Attending a conference as an announced speaker is different. Which was to be expected, of course.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2&gt;Runup&lt;/h2&gt;

&lt;p&gt;One of the things is: since you're doing a talk you want it to be perfect and so until you have actually performed on stage, everything about the conference is subordinate to the preparation of your talk. At least: that's how I experienced it. And judging from sitting at tables at other conferences with speakers that still needed to do their talk: I'm not the only one. Now, restarting the work on your slides 2 days before the conference doesn't really help. But I felt it was necessary: my first set of slides contained too much text and content, and I wanted to focus on certain things. Explaining everything on screen is pretty hard to follow for the audience, and the feeling that it just wasn't quite right had been dawning on me but in the run up to the conf it became more obvious.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/423R0d1F2J2r/IMG_2783.jpg" width="750"&gt; &lt;/p&gt;

&lt;p&gt;Mind you, I had set a schedule for myself: work on your slides each day in the train after &lt;a href="http://nsconference.com"&gt;NSConf&lt;/a&gt; ended, and you have plenty of time to finish them before the conf. Alas - and as expected - this didn't work out quite as planned. When I'm developing something at work and I have to leave because it's the most convenient time to leave (mostly because you have to catch that direct train home that runs only once each hour), I tend to whip out the laptop on the train and just continue coding. This works pretty well: the small pauze you take going from your desk right until you sit down in the train is perfect for some settling down. And so I'm stoked to continue work once I'm on the train (I even do this for short 15min train rides, but then the short duration of the ride can be a frustrating factor). So that "make slides on train" thing only worked out for 50%. By the beginning of May I had a pretty good outline of things I wanted to say and how to say them.&lt;/p&gt;

&lt;p&gt;But then it was time to cook up some actual slides, and that was a quite whole different ballgame. Even though I had my outline, it was hard to distill it into good slides. I started and got somewhere, but like I mentioned before it felt off. And so I let it be, not continuing work because I felt the quality was sub par and I had no idea how to make it better. In the few days before the conf I actually continued working on it, but still with mixed feelings about the result.&lt;/p&gt;

&lt;p&gt;And then it dawned to me: just learn from the big ones. Remember what you saw at other conferences (and I've done a few), (re-)watch some presentations only to seem how other people did it. And so looked around, and observed. The presentations I saw features one thing most of the time: the content on screen was limited. Usually just a work, or an image or a short sentence. Not a plethora of bullet points, albeit they appeared here and there but only expectionally. And so, after 2 hours of skimming various videos, I decided to rewrite my slides.&lt;/p&gt;

&lt;p&gt;To put this into perspective: this was on Saturday when I had just arrived in Berlin, 2 days before I was to go on stage. But I felt my current content was inadequate, and going on stage knowing that you could do better was a no go. And so I went back to my outline, opened an AsyncViewControllers2.md document and started over. I could of course reuse a lot of the work I had done before, I just had to devise a new way of delivering it. Additionally, this is one of the things &lt;a href="http://decksetapp.com"&gt;Deckset&lt;/a&gt; is really good at: its limited feature set forces you to tone down on the screen content. You &lt;em&gt;can&lt;/em&gt; put a screenful of bullets on screen, but it starts to feel cramped soon.&lt;/p&gt;

&lt;p&gt;And so I started putting out Markdown, rewriting things here and there, making minimal slides accompanied by decent presenter notes. I did take the time to take the Berlin bike tour, because I felt I'd be sad later if I wouldn't have joined. And there was plenty of time afterwards. Turned out, I need most of that time afterwards. I spent part of the night working on v2, and woke up early (7am: great moment to take breakfast in a hotel after being awake for an hour). And then I missed the start of the conference, but by noon I felt I had something good to present. I also took the time to rehearse several time, which was a good decision: you know the content almost by heart when you bring it on stage, which helps a lot with the stage fright.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="https://lh5.googleusercontent.com/-EjBm196Z4Ss/VXV2hfgaGYI/AAAAAAAABHU/PmNMr80ltB0/w1266-h1900-no/_MG_0551.jpg" width="750"&gt; &lt;/p&gt;

&lt;p&gt;Speaking about stage fright: that moment right before you have to go on stage is excruciating. I've talked with other speakers about this, and apparently that's normal even after having done it several times. It also keeps you on your edge and focused, I felt. Also, once you are on stage you go into a certain flow and then you're off.&lt;/p&gt;

&lt;p&gt;All in all, I was pretty happy with the presentation at that moment. Rewatching it afterward makes me cringe a bit... but I guess that's normal. It was the first time I did this, and I hope to do it more in the future. You live, you learn. That's the fun part of it.&lt;/p&gt;

&lt;p&gt;Once the talk was over, I felt very relieved. It was so much fun to do (even with the tricky questions afterwards), and it was nice to have people come up to you to talk about it. And from that moment, I felt I could enjoy the conference so much more. That hard part was over, I had done my job, and I was happy with it.&lt;/p&gt;

&lt;p&gt;By the way, you can &lt;a href="https://youtu.be/xy-xqj3m_Tk"&gt;watch a video&lt;/a&gt; of my presentation, and in good open source spirit &lt;a href="https://speakerdeck.com/inferis/async-view-controllers"&gt;my slides&lt;/a&gt; are online, including &lt;a href="https://github.com/Inferis/UIKonf-AsyncViewControllers"&gt;the source&lt;/a&gt;. And of course, the source of &lt;a href="https://github.com/Inferis/IIAsyncViewController"&gt;IIAsyncViewController&lt;/a&gt; is available too. By the way, &lt;a href="https://www.youtube.com/playlist?list=PLdr22uU_wISpW6XI1J0S7Lp-X8Km-HaQW"&gt;all UIKonf 2015 videos&lt;/a&gt; are up, so if you missed the conference this is a good way to catch up anyway.&lt;/p&gt;

&lt;h2&gt;UIKonf&lt;/h2&gt;

&lt;p&gt;All in all, I loved every bit of UIKonf. First of all, the location. Berlin is &lt;em&gt;such&lt;/em&gt; a nice city to visit. It feels so green, so welcoming. Even the more &lt;em&gt;shady&lt;/em&gt; parts (or at least that's how they looked) never made me feel really uncomfortable. It's also very curious how present the Wall still is, even though it's been gone for 25 years now.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/421i161R181w/IMG_2750.jpg" width="750"&gt;&lt;/p&gt;

&lt;p&gt;Secondly, the conference itself is very welcoming. I found the recreational activities on Sunday to be a lot of fun. It's a different kind of setting than being at the conference itself, you get to know more people that you otherwise wouldn't have, and it's a great way to learn and experience new things.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/0H3F1F3B1H2U/IMG_2806.jpg" width="750"&gt;&lt;/p&gt;

&lt;p&gt;Thirdly: the conference was organised splendidly, IMHO. Speaking both as a speaker and an attendee, I loved the experience. The 4 organisers were very welcoming and helpful. I loved the conference swag (&lt;strong&gt;so&lt;/strong&gt; nice of them to leave that purple shirt for the speakers while they could have easily have reserved it for themselves). But the venue itself was very good, wifi was impeccable and overall the equipment used was top notch. The videos of the conference show that clearly, I feel. They inherited a great conference from an impressive set of organisers, but they took the conference and turned the dial up another notch. Lovely work, Sabine, Diana, Maxim and Engin!&lt;/p&gt;

&lt;h2&gt;Takeaway&lt;/h2&gt;

&lt;p&gt;We're all winging it. Attendees, speakers, organisers. But that doesn't change the fact that UIKonf was one of the conferences I enjoyed most. And so:&lt;/p&gt;

&lt;p&gt;★ ★ ★ ★ ★ WOULD COME BACK FOR MORE&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-06-08:/blog/2015/06/08/wwdc-2015-predictions/</id>
    <title type="html">WWDC 2015 Predictions</title>
    <published>2015-06-08T08:10:04Z</published>
    <updated>2015-06-08T08:10:04Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/06/08/wwdc-2015-predictions/"/>
    <content type="html">

&lt;p&gt;That time of year again: june! Time for WWDC. A special WWDC: given my future plans, it'll be the last (in a while I guess) WWDC I'll be experiencing from &lt;em&gt;the outside&lt;/em&gt;. So this is the perfect opportunity to do &lt;a href="/blog/2013/06/08/wwdc-predictions/"&gt;another&lt;/a&gt; &lt;a href="/blog/2014/05/29/wwdc-14/"&gt;predictions&lt;/a&gt; post. 😉&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2&gt;Will see&lt;/h2&gt;

&lt;h4&gt;iOS 9&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;more extensions: If not lock screen extensions, perhaps more interaction in Springboard. But not only that, more interaction between apps themselves (embeddable views?).&lt;/li&gt;
&lt;li&gt;opening up Siri (so you can use it to open your own app or even make use of her services inside of your apps)&lt;/li&gt;
&lt;li&gt;Side by side apps support for larger devices. Not sure if they're going to announce this now or leave it as a surprise when actually release the new iOS? Better multitasking overall (see a)&lt;/li&gt;
&lt;li&gt;an update to WatchOS. I can see us getting 1.1 soon, but 2.0 will probably add native Watch apps. I previously was of the opinion that they would wait longer for native apps to gather more battery stats from current usage, but since the battery is rarely an issue with daily Watch usage (for me at least) I can see them moving faster. It'll be interesting to see what the limits will be for Watchkit apps, because this is a whole different ballgame than the iPhone.&lt;/li&gt;
&lt;li&gt;More HealthKit &amp;amp; ResearchKit (including more integration with the Watch). Better ways to get data out (e.g. watch workouts?)&lt;/li&gt;
&lt;li&gt;HomeKit. The introduction last year was clearly intended to get hardware vendors on the bandwagon, but this year should see more functionality.&lt;/li&gt;
&lt;li&gt;Related to this: no new AppleTV hardware, but I do think we'll see an update to the software if only to accomodate the new HomeKit functionality (the AppleTV will act as a bridge between local hardware and your other devices, I think).&lt;/li&gt;
&lt;li&gt;Swift: not sure. Mixins would be nice. I think we'll see the two languages (ObjC and Swift) come together more to improve interop (e.g. more annotations in the frameworks, but also better ways to integrate Swift components in Objective-C code). Objective-C is not going away soon, folks.&lt;/li&gt;
&lt;li&gt;A retina Thunderbolt display. A standalone retina iMac, let's say. Announced, but not immediately shippable. Seems like something developers will be very happy with (the needed hardware to drive it, apart from that Mac Pro, will come later).&lt;/li&gt;
&lt;li&gt;general improvements to iCloud (more storage, better UI, improvements to CloudKit, ...). Probably in conjuction with a price drop for iCloud storage.&lt;/li&gt;
&lt;li&gt;a significant update to the dev tooling. This includes Xcode but also things for continious integration. Additionally, I have a feeling that deployment might become a bit simpler given the current hassle with extensions etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That last speculation is (IMHO) reinforced by the scheduled maintenance window today, which ends around the time the keynote should end (9PM CET = 12AM PST):&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/2K3U0D3j2516/Image%202015-06-08%20at%2011.55.54%20am.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;One can hope.&lt;/p&gt;

&lt;p&gt;Also:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iOS8.4 with &lt;em&gt;Apple Music&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But that's not really a surprise. I'm curious about the pricing, though.&lt;/p&gt;

&lt;h4&gt;OSX 10.11&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;more integration with iOS. A better handoff, messages, ...&lt;/li&gt;
&lt;li&gt;the demise of HFS+ (because you never know)&lt;/li&gt;
&lt;li&gt;the breakup of iTunes into a Music only component and a sync app for syncing your iDevice with you Mac. Potentially I'd see them getting rid of that last part, forcing everybody to go to iCloud for syncing and backup (see price reduction above).&lt;/li&gt;
&lt;li&gt;iCloud will become more prominent, I think. This will anger the Snow-Leopard-Was-The-Best purists, naturally.&lt;/li&gt;
&lt;li&gt;a public UXKit (UIKit for the Mac)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Won't see&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Jony Ive on stage (👋 White Room)&lt;/li&gt;
&lt;li&gt;hints of new iOS devices&lt;/li&gt;
&lt;li&gt;no new Macbook Pro's (👋 Intel)&lt;/li&gt;
&lt;li&gt;A review of OSX by &lt;a href="https://twitter.com/siracusa"&gt;@siracusa&lt;/a&gt;. 😢&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So there. There's probably more but these are the things from the top of my head. It's more than enough, and you can't guess it all.&lt;/p&gt;

&lt;p&gt;To be clear: I have &lt;strong&gt;no&lt;/strong&gt; insider knowledge. This is pure guesswork. 😁 And if I had, I wouldn't be doing a post like this.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-05-27:/blog/2015/05/27/swift-an-array-of-protocols/</id>
    <title type="html">Swift: an array of protocols</title>
    <published>2015-05-27T05:03:27Z</published>
    <updated>2015-05-27T05:03:27Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/05/27/swift-an-array-of-protocols/"/>
    <content type="html">

&lt;p&gt;I was working on a side project yesterday, a side project which I decided to develop using Swift. My day job mostly consists of Objective-C (which I still love) but all the hip kids are doing Swift and it doesn't hurt to keep along with the latest trend, right? And learning is fun.&lt;/p&gt;

&lt;p&gt;So I was coding away, and I had this component which needed to notify several other components of certain events that happened. In practice this meant that I needed a sort of &lt;em&gt;multicast delegate&lt;/em&gt;. Now, I could have solved this the old Cocoa way by using notifications, but I try to stay away from them unless it really makes sense. The contract they offer is pretty loose (which can be handy too), but I wanted to try something more set-in-stone right now.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2&gt;The setup&lt;/h2&gt;

&lt;p&gt;So I created this class and protocol.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didDoOneThingy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;thingyName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didDoOtherThingy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;thingyId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;ThingyManager&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;doOneThingy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;thingyName&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"one-thing"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"other-thing"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;notifyAll&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;notifier&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="n"&gt;notifier&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;didDoOneThingy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thingyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;doOtherThingy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;thingyId&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;notifyAll&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;notifier&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
          &lt;span class="n"&gt;notifier&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;didDoOtherThingy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thingyId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;addNotifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// to be implemented&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;removeNotifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// to be implemented&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;notifyAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// to be implemented&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;(Note: The actual code was obviously different but similar.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is pretty simple: I have a &lt;code&gt;ThingyManager&lt;/code&gt; which manages thingies (not very good in this case, but I disgress), and whenever something changes I'd like to notify one or more instances of said changes. This is where &lt;code&gt;ThingyNotifier&lt;/code&gt; comes in; and as you can see, there's more than one thing to be notified of. This is like the delegate pattern, but as a &lt;code&gt;1-&amp;gt;n&lt;/code&gt; connection instead of a &lt;code&gt;1-&amp;gt;1&lt;/code&gt; connection.&lt;/p&gt;

&lt;p&gt;You'll also notice that there are 3 methods still left to be implemented: &lt;code&gt;addNotifier&lt;/code&gt;, &lt;code&gt;removeNotifier&lt;/code&gt; and &lt;code&gt;notifyAll&lt;/code&gt;. We'll cover these later.&lt;/p&gt;

&lt;p&gt;Additionally, I'd like to sprinkle some operator magic on top so that using these notifiers becomes more intuitive:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyManager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;ThingyManager&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addNotifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;left&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyManager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;ThingyManager&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;removeNotifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;left&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This just wraps our &lt;code&gt;addNotifier&lt;/code&gt; and &lt;code&gt;removeNotifier&lt;/code&gt; in &lt;code&gt;+=&lt;/code&gt; and &lt;code&gt;-=&lt;/code&gt; calls, and so I can use this class like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;ThatController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;thingyManager&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;thingyManager&lt;/span&gt;

  &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;thingyManager&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyManager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thingyManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thingyManager&lt;/span&gt;
    &lt;span class="n"&gt;thingyManager&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nf"&gt;deinit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thingyManager&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is nice (IMHO) and invokes some fond memories of using multicast delegates in my C# days.&lt;/p&gt;

&lt;h2&gt;// to be implemented&lt;/h2&gt;

&lt;p&gt;But now those three methods remain. Let's implement them.&lt;/p&gt;

&lt;p&gt;First of all, we need a place to store our &lt;code&gt;ThingyNotifier&lt;/code&gt; instances:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;notifiers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We'll just use an array of &lt;code&gt;ThingyNotifier&lt;/code&gt;. Easy.&lt;/p&gt;

&lt;p&gt;Now onto &lt;code&gt;notifyAll&lt;/code&gt;, which is just an iteration over said array to invoke the block on each notifier:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;notifyAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;notifier&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;notifiers&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, easy.&lt;/p&gt;

&lt;p&gt;Next up: &lt;code&gt;addNotifier&lt;/code&gt;. This is even easier, just add the notifier to our array:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;addNotifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;notifiers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally &lt;code&gt;removeNotifier&lt;/code&gt;. Here's where things get tricky (you felt this coming, right?).
A naive implementation could be:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;removeNotifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;notifiers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;notifiers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;removeAtIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But alas, the compiler disagrees:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/1b3f0W103t37/Image%202015-05-27%20at%207.48.13%20am.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;Now the error is a bit sparse on information, but looking at the (current) definition of &lt;code&gt;find&lt;/code&gt; gives us more information:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;C&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;CollectionType&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="kt"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Element&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Equatable&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It turns out that the element of the collection type we're trying to find something in must conform to &lt;code&gt;Equatable&lt;/code&gt;. That makes sense since how else would &lt;code&gt;find&lt;/code&gt; know if it has found the element it is looking for? There must be some kind of test for equality.&lt;/p&gt;

&lt;p&gt;So, the solution is easy, right? Just make &lt;code&gt;ThingyNotifier&lt;/code&gt; conform to &lt;code&gt;Equatable&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Equatable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didDoOneThingy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;thingyName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didDoOtherThingy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;thingyId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nope. This introduces a slew of new errors (of the same type):&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/1Z0b2L3M0v08/Image%202015-05-27%20at%207.58.20%20am.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;Looking at the definition of &lt;code&gt;Equatable&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;Equatable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the &lt;code&gt;Self&lt;/code&gt; type. This denotes that the method will use the actual type that's implementing the protocol. In this case, it makes sure we're comparing two objects of the same type with each other. This actually makes sense from a semantic standpoint: it's a pretty good assumption that objects need to be of the same type to be considered equal.&lt;/p&gt;

&lt;p&gt;But this doesn't help us: we can't use &lt;code&gt;Equatable&lt;/code&gt;, and thus we can't use &lt;code&gt;find&lt;/code&gt;. We'll have to find another way.&lt;/p&gt;

&lt;h2&gt;Our own ==&lt;/h2&gt;

&lt;p&gt;So let's declare the &lt;code&gt;==&lt;/code&gt; operator/func to be part of the &lt;code&gt;ThingyNotifier&lt;/code&gt; protocol itself:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didDoOneThingy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;thingyName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didDoOtherThingy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;thingyId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then we'll change our searching a bit to do a manual loop over the array instead of using &lt;code&gt;find&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;removeNotifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;notifiers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;notifiers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;notifier&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;notifiers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;removeAtIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, that doesn't work either: we get back to the same problem as before, kind of:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/3K0a2i2y0k1k/Image%202015-05-27%20at%208.35.57%20am.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;And while you can make that error go away by providing an implementation of that &lt;code&gt;==&lt;/code&gt; operator, like this...&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// UWOTM8&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;... it's kind of useless since you still need to do comparing of ThingyNotifier instances and always returning &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; isn't going to do that. Since we have nothing else to work with, we're stuck.&lt;/p&gt;

&lt;h3&gt;A solution&lt;/h3&gt;

&lt;p&gt;Since we can't do this in pure-pure Swift, let's include &lt;em&gt;Foundation&lt;/em&gt; into the party. How about we declare &lt;code&gt;ThingyNotifier&lt;/code&gt; to have to conform to &lt;code&gt;NSObjectProtocol&lt;/code&gt;? In my use case, this wasn't a problem since the notifier instances would be &lt;code&gt;UIViewController&lt;/code&gt; instances anyway, but I guess this puts a bit of a limitation on what target objects you can use in the more general case.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;NSObjectProtocol&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didDoOneThingy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;thingyName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didDoOtherThingy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;thingyId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But it does introduce &lt;code&gt;isEqual()&lt;/code&gt; into the equation. So now our &lt;code&gt;removeNotifier&lt;/code&gt; implementation will become:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;removeNotifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;notifiers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;notifiers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;isEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;notifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;notifiers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;removeAtIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that works as expected. Like I said before, this introduces an extra requirement to conform to the &lt;code&gt;NSObject&lt;/code&gt; protocol, which might be problematic depending on how you want to use this. But in practice, it's likely that the objects you're using as &lt;code&gt;ThingyNotifiers&lt;/code&gt; are a subclass of &lt;code&gt;NSObject&lt;/code&gt; anyway.&lt;/p&gt;

&lt;p&gt;I can hear you think: "&lt;em&gt;but what if I just add an equality method myself?&lt;/em&gt;". Let's just copy the &lt;code&gt;isEqual&lt;/code&gt; method signature from &lt;code&gt;NSObjectProtocol&lt;/code&gt; and we're good, right?&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-swift highlight"&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;ThingyNotifier&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didDoOneThingy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;thingyName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;didDoOtherThingy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;thingyId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;isEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;AnyObject&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/39081y3E1C1T/nope.gif"&gt;&lt;/p&gt;

&lt;p&gt;Why? Objects conforming to &lt;code&gt;ThingyNotifier&lt;/code&gt; now have to implement this method too and on top of it you cannot freeload on the &lt;code&gt;NSObjectProtocol&lt;/code&gt; implementation anyway:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/3w0P3p0a2I41/Image%202015-05-27%20at%209.16.19%20am.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;And! Our equality check doesn't work anymore:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/2Y082Z3v3S2q/Image%202015-05-27%20at%209.16.05%20am.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;So, all in all, this &lt;code&gt;NSObjectProtocol&lt;/code&gt; approach isn't too bad.&lt;/p&gt;

&lt;h3&gt;A Real Pure™ Swift solution?&lt;/h3&gt;

&lt;p&gt;So, as far as I know, there's no pure Swift solution to this. &lt;a href="https://twitter.com/jckarter"&gt;Joe Groff&lt;/a&gt; of the Swift team at Apple provided a trampoline to a solution which I tried to implement. Alas, his solution – while clever – caused other problems. For example: you can't have the &lt;code&gt;+=&lt;/code&gt; and &lt;code&gt;-=&lt;/code&gt; operators (or any operator) operating on protocol instances if the protocol somehow employs the &lt;code&gt;Self&lt;/code&gt; type, causing us to get back to the same error as mentioned before. Which leaves us empty handed yet again. 😉&lt;/p&gt;

&lt;p&gt;This reminds me to mention how I love how the Swift team reaches out to us for problems like this. They cannot solve them all but they are very helpful and even getting these problems noticed by them makes me feel like there's a good chance they'll be actually solved in the future. Who knows, right?&lt;/p&gt;

&lt;p&gt;Anyway, thanks to Joe (and the team) for the help. Much appreciated! 👍&lt;/p&gt;

&lt;h3&gt;Example code&lt;/h3&gt;

&lt;p&gt;You can find a playground with the code included in this post on &lt;a href="https://github.com/Inferis/ThingyNotifier"&gt;Github&lt;/a&gt;, if you care to play with it some more.&lt;/p&gt;

&lt;p&gt;And oh, if there's another approach, I'd love to hear it!&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-05-11:/blog/2015/05/11/watchkit-app-versions/</id>
    <title type="html">Watchkit app versions</title>
    <published>2015-05-11T16:15:28Z</published>
    <updated>2015-05-11T16:15:28Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/05/11/watchkit-app-versions/"/>
    <content type="html">

&lt;p&gt;I came across &lt;a href="http://ikennd.ac/blog/2015/05/build-time-cfbundleversion-values-in-watchkit-apps/"&gt;this article&lt;/a&gt; by Daniel Kennett this morning. I had seen him tweet about it too, but checking my feeds (yeah, I still do that, albeit not daily) I noticed he also made a post about it.&lt;/p&gt;

&lt;p&gt;Having toyed a lot with build configurations and their associated settings configuration, I was curious how he solved the issue.&lt;/p&gt;

&lt;p&gt;I'd have to concur with Daniel: the solution is horrible. 8 Steps to get this working, with aggregate targets and disabling of parallelization of the project: Not Good™.&lt;/p&gt;

&lt;p&gt;But my interest was piqued, and so I tried to recreate his problem (not hard) and find a better solution. I assumed it would still be hacky, but less hacky than Daniel's "Horrible" solution.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2&gt;Step 0&lt;/h2&gt;

&lt;p&gt;Create iPhone app, add Watchkit extension. In this case, just an empty app that displays the version of the app in a label (both on the watch and the phone). Or use existing iPhone + Watch apps.&lt;/p&gt;

&lt;h2&gt;Step 1&lt;/h2&gt;

&lt;p&gt;In the root of your project, add a shell script that we'll use to define the version settings:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/2J2p3L1Q2o30/Image%202015-05-11%20at%207.05.55%20pm.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;The contents of the scripts are similar to the script Daniel creates:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-sh highlight"&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date &lt;span class="s2"&gt;"+%S"&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;M&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date &lt;span class="s2"&gt;"+%M"&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;D&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;GENERATED_BUNDLE_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;GENERATED_BUNDLE_SHORTVERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;M&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;SRCROOT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SRCROOT&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"// Generated: &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;D&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &amp;gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SRCROOT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/Version.xcconfig"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"GENERATED_BUNDLE_VERSION = &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GENERATED_BUNDLE_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SRCROOT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/Version.xcconfig"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"GENERATED_BUNDLE_SHORTVERSION = &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GENERATED_BUNDLE_SHORTVERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SRCROOT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/Version.xcconfig"&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Generated: &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GENERATED_BUNDLE_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp; &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GENERATED_BUNDLE_SHORTVERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This script generates a file &lt;code&gt;Version.xcconfig&lt;/code&gt; in the root of the project, containing two build settings: &lt;code&gt;GENERATED_BUNDLE_VERSION&lt;/code&gt; and &lt;code&gt;GENERATED_BUNDLE_SHORTVERSION&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is slightly different since we use the date of the system here to generate the version numbers, and Daniel's approach is more &lt;em&gt;real life&lt;/em&gt; than mine using the git commit hash, but I wanted something that would change regularly for testing purposes. You'll obviously want to change the source for &lt;code&gt;GENERATED_BUNDLE_VERSION&lt;/code&gt; and &lt;code&gt;GENERATED_BUNDLE_SHORTVERSION&lt;/code&gt; to something more sensible.&lt;/p&gt;

&lt;h2&gt;Step 2&lt;/h2&gt;

&lt;p&gt;Integrate the script to your project, not as a &lt;em&gt;Build Phase&lt;/em&gt;, but as a &lt;em&gt;Build Pre-Action&lt;/em&gt;. You can find these under the schemes of your project:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/161A0v25191W/Image%202015-05-11%20at%207.14.59%20pm.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;You can define pre-actions and post-actions for every "Product Action" of the project. This is defined in the scheme, so you'll have to do this for all schemes defined in the project where you want this to happen. In our case, this is twice since Xcode creates a default scheme for the app and a scheme for the watchkit app (basically because it's a lot easier to run them that way).&lt;/p&gt;

&lt;p&gt;This is also why we made a script; you could also paste the code right into the action window textarea like Daniel did. That works as good, but then you'd have to change the code for every scheme when you want a change (which is at least twice in our case), so I prefer to put scripts in their own file. It's also easier to edit them this way.&lt;/p&gt;

&lt;p&gt;Don't forget to specify to "take the buildsettings" from the appropriate target, otherwise the &lt;code&gt;$SRCROOT&lt;/code&gt; variable we use in the script (and to invoke it) is not set.&lt;/p&gt;

&lt;h2&gt;Step 3&lt;/h2&gt;

&lt;p&gt;Build the project. This should generate a &lt;code&gt;Version.xcconfig&lt;/code&gt; along side the &lt;code&gt;Version.sh&lt;/code&gt; file. Add this xcconfig file to the project:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/1g1L1B0k0w0e/Image%202015-05-11%20at%207.23.24%20pm.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;Don't add it to a target (uncheck all the boxes); we don't want it included in a build product, but it needs to be in the project... because we want to use it as base setting for our project's configurations:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/07153B0F1Y25/Image%202015-05-11%20at%207.28.28%20pm.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;This makes sure that the settings defined in the config file are usable in our project. Since we add them at project level, they will be present for &lt;em&gt;every target&lt;/em&gt; which is &lt;strong&gt;exactly&lt;/strong&gt; what we want. You can verify this by looking at user defined settings in &lt;em&gt;Build Settings&lt;/em&gt; (all the way to the bottom):&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/3r0a3s1h1Z3g/Image%202015-05-11%20at%207.49.08%20pm.png" width="675"&gt;&lt;/p&gt;

&lt;h2&gt;Step 4&lt;/h2&gt;

&lt;p&gt;Now we need to incorporate the generated settings into the Info.plist files. By default, the &lt;em&gt;Expand Build Settings in Info.plist File&lt;/em&gt; is set to &lt;code&gt;YES&lt;/code&gt;, so we don't have to take precautions for this like Daniel did, because his version settings were in a header file. I had no clue that you could do this, by the way, and it allows for interesting approaches for other problems. 😍&lt;/p&gt;

&lt;p&gt;So for every &lt;code&gt;Info.plist&lt;/code&gt; file, change the hardcoded &lt;code&gt;CFBundleVersion&lt;/code&gt; and &lt;code&gt;CFBundleShortVersionString&lt;/code&gt; values to the values we get from the settings, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-xml highlight"&gt;&lt;span class="nt"&gt;&amp;lt;plist&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
   ...
   &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleShortVersionString&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;$(GENERATED_BUNDLE_SHORTVERSION)&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleVersion&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;$(GENERATED_BUNDLE_VERSION)&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
   ...
&lt;span class="nt"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will look like this in when you inspect the project:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/2R383y10101i/Image%202015-05-11%20at%207.57.25%20pm.png" width="400"&gt;&lt;/p&gt;

&lt;h2&gt;Step 5&lt;/h2&gt;

&lt;p&gt;There is no step 5. Well, except for: build your app (I have no Watch yet so I can't show you a fancy hairy wrist with the demo app running), and continue developing.&lt;/p&gt;

&lt;h2&gt;Caveat&lt;/h2&gt;

&lt;p&gt;Now once in a while you might get the original error because thanks to (what I presume to be) Xcode caching things: it seems the changes to the Version.xcconfig file aren't picked up right away or Xcode doesn't notice it was changed.&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/2s270O1i462K/Image%202015-05-11%20at%208.06.53%20pm.png" width="750"&gt;&lt;/p&gt;

&lt;p&gt;It seems that this also has to do with the parallelized builds: it looks like Xcode is running the pre-action scripts for each run it can parallellize, causing slight changes in the resulting values.&lt;/p&gt;

&lt;p&gt;Now, this is more an obvious problem for this demo project since the values change so often but in a real world case this won't happen as much (see Daniel's script, for example). And when this occurs, you can clean the project and rebuild in which case all plist files will be updated. But still, this does not make me happy and for larger project can cause quite a bit of delay.&lt;/p&gt;

&lt;p&gt;Additionally, the updated values sometimes aren't picked up directly due to the same caching playing its role. So most of the time you don't see the updated version inside the app unless you clean or reopen the project. This is usually not a problem since the use case for these versions are only applicable for release builds, but it's not pretty.&lt;/p&gt;

&lt;h2&gt;Step 1 (🙈)&lt;/h2&gt;

&lt;p&gt;But both problems can be remedied pretty simple by augmenting our script with 2 lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-sh highlight"&gt;&lt;span class="c"&gt;# finishing touch&lt;/span&gt;
find &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$SRCROOT&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; -name Info.plist -exec touch &lt;span class="s2"&gt;"{}"&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt;

&lt;span class="c"&gt;# haste makes waste&lt;/span&gt;
sleep 0.5&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first line looks for all Info.plist files under the source root and &lt;em&gt;touches&lt;/em&gt; them. Xcode will pick them up as changed and incorporate the updated version settings into the build.&lt;/p&gt;

&lt;p&gt;The second line waits a bit before continuing. This adds an extra half second to your build but this fixes the problem with the parallellized builds: by waiting a bit before continuing, we make sure the last change is picked up nicely for all build runs.&lt;/p&gt;

&lt;p&gt;Now, these two lines are the icing on the cake and shouldn't be really necessary for a real world scenario where the versions don't change often. But in case these issues do bite you, here's a solution.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There's still no "out of the box" solution for this version numbering issue. I don't know why you need to set the version of each extension manually while Xcode could be doing this itself since it's mandatory anyway. The steps above make it a bit simpler to have a general system of version numbers for your app and your (WatchKit) extensions, using tools we have to our disposal anyway.&lt;/p&gt;

&lt;p&gt;Having access to the build steps like Daniel asks would be nice but I don't think it's necessary for this problem, because we can fix it with plain old configuration. The only downside is that you need to add the script for each scheme you have in your project, but that's (IMHO) a small price to pay.&lt;/p&gt;

&lt;p&gt;Thanks again to Daniel for the original post which I thought was very interesting, and by which I learned that you can use preprocessing for &lt;code&gt;Info.plist&lt;/code&gt; files too: something I hadn't discovered before. It's always nice to learn something new. 🌟&lt;/p&gt;

&lt;p&gt;Oh yeah: you can find &lt;a href="https://github.com/Inferis/WatchVersionThingy"&gt;the demo project&lt;/a&gt; on Github.&lt;/p&gt;

&lt;h2&gt;&lt;em&gt;Update&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;After posting this, Daniel mentions on Twitter that he considered a config file, but he didn't want to spoil the repo with changing version file:&lt;/p&gt;

&lt;div class="embed tweet"&gt;
&lt;blockquote class="twitter-tweet" align="center" width="350"&gt;
&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/Inferis"&gt;@Inferis&lt;/a&gt; I considered a config file, but updating it would dirty the repo. Since my numbers are based on commits, it’s be an infinite loop.&lt;/p&gt;— Daniel Kennett (@iKenndac) &lt;a href="https://twitter.com/iKenndac/status/597843683132755968"&gt;May 11, 2015&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;I can see that's not what you want, and the easy solution is that you can put the file in your &lt;code&gt;.gitignore&lt;/code&gt; settings so that it doesn't get pushed to the repo. However, this might cause the Version.xcconfig file to go red in your project explorer, which doesn't look as nice:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="http://c.inferis.org/image/3u2N3i250S06/Image%202015-05-12%20at%207.06.02%20am.png" width="276"&gt;&lt;/p&gt;

&lt;p&gt;But to me, it's no real problem anyway: you can either put it in a folder where you don't see it (like the build products), or just build the project and it's fine. The red is only there when initially checking out the repo.&lt;/p&gt;

&lt;p&gt;But then Daniel Tull (ALL THE DANIELS) chimed in:&lt;/p&gt;

&lt;div class="embed tweet"&gt;
&lt;blockquote class="twitter-tweet" align="center" width="350"&gt;
&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/iKenndac"&gt;@iKenndac&lt;/a&gt; &lt;a href="https://twitter.com/Inferis"&gt;@Inferis&lt;/a&gt; I generate a header for the plist in the scheme pre-build script. The middle ground between your methods. ☺️&lt;/p&gt;— Daniel Tull (@danielctull) &lt;a href="https://twitter.com/danielctull/status/597871444429774849"&gt;May 11, 2015&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;Indeed, you can use the header approach as a sort of middle ground: you don't get the pesky missing file (sometimes) because the generated header is not included in the project (which &lt;strong&gt;is&lt;/strong&gt; necessary for the config file), but it requires you to do more setup up front. Depending on what you like, you can choose whatever approach you'd like, since their net effect is the same.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.inferis.org,2015-04-30:/blog/2015/04/30/nanoc/</id>
    <title type="html">Nanoc</title>
    <published>2015-04-30T07:30:03Z</published>
    <updated>2015-04-30T07:30:03Z</updated>
    <link rel="alternate" href="http://blog.inferis.org/blog/2015/04/30/nanoc/"/>
    <content type="html">

&lt;p&gt;The current iteration of this blog runs on an "engine" called &lt;a href="http://nanoc.ws"&gt;Nanoc&lt;/a&gt;. Nanoc, you say?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;nanoc is a static site generator, fit for building anything from a small personal blog to a large corporate web site.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The keywords here is "static site generator". This means that I build/generate the site locally on my machine, and then push it to a server on the internets for all you to see. There's no dynamic site running, built in PHP or ruby or whatever. Just plain HTML files, some CSS, a bit of Javascript and some images or videos.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2&gt;Why nanoc?&lt;/h2&gt;

&lt;p&gt;The previous iteration of my blog was built on Octopress. The principle was the same: Octopress is built on Jekyll, and Jekyll is also a static site generator (there are &lt;a href="https://staticsitegenerators.net"&gt;many others&lt;/a&gt;, by the way). But I felt constrained by using Octopress. I don't know why exactly, but I think it started when I wanted to put a new theme on my blog; the current one at the time was a quick-n-dirty job to get started, and after a year on the blog I felt it was time to put some more personalized paint on it. I did not have to time build a full new theme from scratch so I was looking for an "almost there" theme which I could then modify.&lt;/p&gt;

&lt;p&gt;I guess I was put off by the (seeming) complexity of the Octopress themes. I did not directly find my way around them, and installing/maintaining them felt like too much work for what it was worth. But even apart from that, due to the out-of-the-box nature of Octopress, trying to change it to fit your own needs was not straightforward. Might be good for starting off quickly, but not for more advanced use.&lt;/p&gt;

&lt;p&gt;So started putting off revamping the blog, either until I found the courage to get the work done, or until I found something new.&lt;/p&gt;

&lt;p&gt;And then I saw &lt;a href="http://ikennd.ac"&gt;Daniel Kennett&lt;/a&gt; doing a &lt;a href="http://ikennd.ac/blog/2015/02/rebrand/"&gt;post&lt;/a&gt; about switching to Nanoc and I knew I was "in love" immediately. This was what I needed. Raw but malleable, ruby, and at first sight: not &lt;em&gt;too&lt;/em&gt; complicated.&lt;/p&gt;

&lt;h2&gt;Start over&lt;/h2&gt;

&lt;p&gt;The next steps were:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-sh highlight"&gt;sudo gem install nanoc
nanoc create-site blog.inferis.org&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And off I was. To be honest: the bare-bones site that &lt;code&gt;create-site&lt;/code&gt; creates is &lt;em&gt;really&lt;/em&gt; bare-bones. But I felt this was good, because there's not to much to worry about. You can learn from your site's source and the generated html how things work. Now don't understand me wrong: this took some time and wasn't an easy task. But it wasn't complex either, and the most important part: it was fun exploring how everything worked. You take baby steps here, moving from one issue to another, building up gradually.&lt;/p&gt;

&lt;p&gt;Sometimes I hit some brick walls, taking wrong approaches, being stuck for no apparent reason. But it felt like programming, not like configuring. Those brick walls became challenges, and I was eager to find a solution for them. Given that, the &lt;a href="http://nanoc.ws/docs/"&gt;Nanoc documentation&lt;/a&gt; is really good, but as usual the guides only cover the basic things. Once you go deeper it becomes harder to find good information. There's a few other people tinkering with Nanoc, and blogging about it, and those blogposts were helpful (I'll probably do some more technical posts on my nanoc ventures later on). Also, since everything is open source, you can just consult the source code to see what's going on and work with that.&lt;/p&gt;

&lt;h2&gt;NSConference&lt;/h2&gt;

&lt;p&gt;So I was almost done when &lt;a href="http://nsconference.com"&gt;NSConference 7&lt;/a&gt; came. I wanted to blog about my move to Apple during NSConference, so I started a final sprint to finish the blog so I could switch to nanoc and ditch Octopress. Turned out it was more work than expected (e.g. the code blocks issue -- see below -- took quite a bit of messing around to fix). But by the end of the first day of the conf I felt I was finished and published the site.&lt;/p&gt;

&lt;p&gt;I've been happy with it ever since, fine-tuning things here and there, adding initial non-necessary features back in (categories, for example). I feel I have a robust and easy to augment codebase now, and that makes the developer in me very happy.&lt;/p&gt;

&lt;h2&gt;Current setup&lt;/h2&gt;

&lt;p&gt;Some details about my current nanoc setup?&lt;/p&gt;

&lt;h4&gt;Markdown&lt;/h4&gt;

&lt;p&gt;My posts are all written in Markdown and parsed using the redcarpet gem, using the following configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby highlight"&gt;&lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="ss"&gt;:redcarpet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="ss"&gt;:options&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;:fenced_code_blocks&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:smartypants&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:tables&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I love using Markdown to write content. It's great for embedding code (especially with the fenced code blocks), and you don't get distracted about the layout too much. And if I'm every inclined to do so, it's easy to generate a paper version of this blog; there's enough tools out there to generate PDFs from Markdown.&lt;/p&gt;

&lt;h4&gt;Theme&lt;/h4&gt;

&lt;p&gt;I'm using a variation of the &lt;a href="http://startbootstrap.com/template-overviews/clean-blog/"&gt;Clean Blog Theme&lt;/a&gt; (thanks, &lt;a href="http://ashfurrow.com"&gt;Ash Furrow&lt;/a&gt; for the inspiration). I modified it slighly to personalise it a bit. There's more I want to do but that's for another time.&lt;/p&gt;

&lt;p&gt;The theme is made up from a bunch of static files compromising the base of the theme; these are stored in a separate folder which is merged in when generating the site:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby highlight"&gt;&lt;span class="o"&gt;-&lt;/span&gt;
  &lt;span class="ss"&gt;type: &lt;/span&gt;&lt;span class="n"&gt;static&lt;/span&gt;
  &lt;span class="ss"&gt;items_root: &lt;/span&gt;&lt;span class="sr"&gt;/
  allow_periods_in_identifiers: true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works because nanoc has support for multiple data sources, and nanoc combines the "dynamic" source (the posts) and the static source together to generate the final result. This also means that you could have your posts in an Oracle database if you wanted. 😜&lt;/p&gt;

&lt;h4&gt;Custom filters&lt;/h4&gt;

&lt;p&gt;Filters are nanoc's way of transforming your source content to content that you view in the site. As mentioned before, I'm using the &lt;em&gt;redcarpet&lt;/em&gt; filter to transform the Markdown posts into HTML.&lt;/p&gt;

&lt;p&gt;Nanoc comes with a bunch of filters, and there are another set of them out on the internet. You can use plain &lt;em&gt;erb&lt;/em&gt; if you wanted, or use a different Markdown parser (e.g. &lt;em&gt;Kramdown&lt;/em&gt;). But it's very easy to come up with your own filters too.&lt;/p&gt;

&lt;p&gt;I wrote a couple for my blog specifically:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;fixcodeblocks.rb&lt;/code&gt; fixes the redcarpet generated codeblocks (using Nokogiri) to conform to the HTML that the code highlighter filter expected (took me some time to find out why that was, by the way).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;octopress_img_tags.rb&lt;/code&gt; is a filter I ported from the Octopress install which supports the {% img %} syntax from Jekyll.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tweet_tag.rb&lt;/code&gt; is another Octopress style filter that filters {% tweet %} tags into an embedded tweet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There's probably more to come as I expand the blog, but that's it for now.&lt;/p&gt;

&lt;h4&gt;Niceties&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;I added categories/tags because that's what you do.&lt;/li&gt;
&lt;li&gt;I added a &lt;code&gt;published&lt;/code&gt; metadata item for posts, which you can set to false so that the post is excluded when generating the site. Very handy for WIP posts.&lt;/li&gt;
&lt;li&gt;I also added a &lt;code&gt;preview&lt;/code&gt; metadata item for posts; setting this to true does generate the page with the article itself, but it omits the same article in the rest of the site. It won't appear on the homepage, in the archives or category browsers or in the atom feed. I did this so I could publish posts for proofreading (just pass the link to proofreaders) but without alerting the Rest-Of-The-World.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Pros/cons&lt;/h2&gt;

&lt;h4&gt;Cons&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;steep learning curve&lt;/li&gt;
&lt;li&gt;you need a Mac to deploy your site (generation + cli tools)&lt;/li&gt;
&lt;li&gt;requires knowledge of Ruby&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also be thrown off by the not-to-obvious error messages when something goes wrong:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-text highlight"&gt;$&amp;gt; nanoc
Loading site data… done
Compiling site…

Captain! We’ve been hit!

Message:

NoMethodError: undefined method `encoding' for nil:NilClass

Compilation stack:

  - [item]   /posts/2015-04-30-nanoc/ (rep default)

Stack trace:

  0. /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/cgi/util.rb:7:in `escape'
  1. lib/filters/tweet_tag.rb:65:in `block in url_params_for'
  2. lib/filters/tweet_tag.rb:64:in `map'
  3. lib/filters/tweet_tag.rb:64:in `url_params_for'
  4. lib/filters/tweet_tag.rb:70:in `cache_file_for'
  5. lib/filters/tweet_tag.rb:59:in `cached_response'
  6. lib/filters/tweet_tag.rb:44:in `html_output_for'
  7. lib/filters/tweet_tag.rb:39:in `run_octopress'
  8. lib/filters/OctopressFilter.rb:11:in `block in run'
  9. lib/filters/OctopressFilter.rb:9:in `gsub'
  ... 36 more lines omitted. See full crash log for details.

If you believe this is a bug in nanoc, please do report it at
-&amp;gt; https://github.com/nanoc/nanoc/issues/new &amp;lt;-

A detailed crash log has been written to ./crash.log.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But then again, it's just parsing the throw error correctly, find the culprit and continue.&lt;/p&gt;

&lt;h4&gt;Pros&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;very, very flexible&lt;/li&gt;
&lt;li&gt;static: no fear of performance problems or server breakdowns - it's just files&lt;/li&gt;
&lt;li&gt;well documented&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But above all: once you get the hang of it, it's so much fun to hack on it. If you know how it works, it's pretty easy to set it to your hand and modify it as you see fit. It almost feels like an app/program you're working on.&lt;/p&gt;

&lt;p&gt;I'm currently using Nanoc 3.7.5, and they're working on 4.0. Judging from the &lt;a href="http://nanoc.ws/docs/nanoc-4-upgrade-guide/"&gt;upgrade guide&lt;/a&gt; a lot of the peculiarities I found a bit daunting at first are smoothed out. This will probably make it easier to start with Nanoc.&lt;/p&gt;

&lt;h2&gt;Open Source&lt;/h2&gt;

&lt;p&gt;So &lt;a href="http://nanoc.ws"&gt;check it out&lt;/a&gt; if you're looking for something new. It's &lt;a href="https://github.com/nanoc"&gt;open source&lt;/a&gt;, so there's no excuse not to dive in or to contribute. 😊&lt;/p&gt;

&lt;p&gt;Speaking of contribute: the complete source of this blog is open source (thanks again to &lt;a href="http://ashfurrow.com"&gt;Ash Furrow&lt;/a&gt; for the inspiration). You can see all the code I wrote or changed at &lt;a href=""&gt;http://github.com/inferis/inferis.github.io&lt;/a&gt; (the &lt;code&gt;nanoc&lt;/code&gt; branch contains the source code, the &lt;code&gt;master&lt;/code&gt; branch is the generated site). The cool thing about this is that people send pull requests to fix typos: it hasn't happened often, but when it happens, I love it. 😘&lt;/p&gt;

</content>
  </entry>
</feed>

